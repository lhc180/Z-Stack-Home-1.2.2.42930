###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                08/Aug/2015  13:35:08
# Copyright 2004-2015 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=10000 -DQUEUED_POLL_RATE=1000 -DRESPONSE_POLL_RATE=1000
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Components\stack\zdo\ZDObject.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D ZTOOL_P1 -D
#        MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -lC
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\
#        -lA
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\ZDObject.lst
#    Object file        =  
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\ZDObject.r51
#
###############################################################################

C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2015-02-12 15:03:08 -0800 (Thu, 12 Feb 2015) $
      4            Revision:       $Revision: 42535 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #if defined ( MANAGED_SCAN )
    155            static void ZDOManagedScan_Next( void );
    156          #endif
    157          #if defined ( REFLECTOR )
    158            static void ZDO_RemoveEndDeviceBind( void );
    159            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    160          #endif
    161          #if ( ZG_BUILD_COORDINATOR_TYPE )
    162            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    163                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    164            static void ZDO_RemoveMatchMemory( void );
    165            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    166            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    167          #endif
    168          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    169          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    170          
    171          /*********************************************************************
    172           * @fn          ZDO_Init
    173           *
    174           * @brief       ZDObject and ZDProfile initialization.
    175           *
    176           * @param       none
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDO_Init( void )
   \                     ZDO_Init:
    181          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    182            // Initialize ZD items
    183            #if defined ( REFLECTOR )
    184            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    185            #endif
    186          
    187            // Initialize default ZDO_UseExtendedPANID to the APS one.
    188            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    189          
    190            // Setup the device - type of device to create.
    191            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function APS_ReflectorInit
   \   000016   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   000019                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000019   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    192          }
   \   00001C                REQUIRE ?Subroutine0
   \   00001C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    193          
    194          #if defined ( MANAGED_SCAN )
    195          /*********************************************************************
    196           * @fn      ZDOManagedScan_Next()
    197           *
    198           * @brief   Setup a managed scan.
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           */
    204          static void ZDOManagedScan_Next( void )
    205          {
    206            // Is it the first time
    207            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    208            {
    209              // Setup the defaults
    210              managedScanNextChannel  = 1;
    211          
    212              while( managedScanNextChannel && (runtimeChannel & managedScanNextChannel) == 0 )
    213                managedScanNextChannel <<= 1;
    214          
    215              managedScanChannelMask = managedScanNextChannel;
    216              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    217            }
    218            else
    219            {
    220              // Do we need to go to the next channel
    221              if ( managedScanTimesPerChannel == 0 )
    222              {
    223                // Find next active channel
    224                managedScanChannelMask  = managedScanNextChannel;
    225                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    226              }
    227              else
    228              {
    229                managedScanTimesPerChannel--;
    230          
    231                if ( managedScanTimesPerChannel == 0 )
    232                {
    233                  managedScanNextChannel  <<= 1;
    234                  while( managedScanNextChannel && (runtimeChannel & managedScanNextChannel) == 0 )
    235                    managedScanNextChannel <<= 1;
    236          
    237                  if ( managedScanNextChannel == 0 )
    238                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    239                }
    240              }
    241            }
    242          }
    243          #endif // MANAGED_SCAN
    244          
    245          /*********************************************************************
    246           * @fn      ZDODeviceSetup()
    247           *
    248           * @brief   Call set functions depending on the type of device compiled.
    249           *
    250           * @param   none
    251           *
    252           * @return  none
    253           */
    254          static void ZDODeviceSetup( void )
    255          {
    256            if ( ZG_BUILD_COORDINATOR_TYPE )
    257            {
    258              NLME_CoordinatorInit();
    259            }
    260          
    261          #if defined ( REFLECTOR )
    262            APS_ReflectorInit();
    263          #endif
    264          
    265            if ( ZG_BUILD_JOINING_TYPE )
    266            {
    267              NLME_DeviceJoiningInit();
    268            }
    269          }
    270          
    271          /*********************************************************************
    272           * @fn          ZDO_StartDevice
    273           *
    274           * @brief       This function starts a device in a network.
    275           *
    276           * @param       logicalType     - Device type to start
    277           *              startMode       - indicates mode of device startup
    278           *              beaconOrder     - indicates time betwen beacons
    279           *              superframeOrder - indicates length of active superframe
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8A..         MOV     ?V1,R2
    285            ZStatus_t ret;
    286          #if defined ( ZIGBEE_FREQ_AGILITY )
    287            static uint8 discRetries = 0;
    288          #endif
    289          #if defined ( ZIGBEE_COMMISSIONING )
    290            static uint8 scanCnt = 0;
    291          #endif
    292          
    293            ret = ZUnsupportedMode;
    294          
    295            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    296            {
    297              if ( startMode == MODE_HARD )
    298              {
    299                ZDApp_ChangeState( DEV_COORD_STARTING );
    300                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, runtimeChannel,
    301                                                    zgDefaultStartingScanDuration, beaconOrder,
    302                                                    superframeOrder, false );
    303              }
    304              else if ( startMode == MODE_RESUME )
    305              {
    306                // Just start the coordinator
    307                ZDApp_ChangeState( DEV_COORD_STARTING );
    308                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    309              }
    310              else
    311              {
    312          #if defined( LCD_SUPPORTED )
    313                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    314          #endif
    315              }
    316            }
    317          
    318            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   65..         XRL     A,?V0
   \   000012   6009         JZ      ??ZDO_StartDevice_0
   \   000014   7402         MOV     A,#0x2
   \   000016   65..         XRL     A,?V0
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
    319            {
    320              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001D   EA           MOV     A,R2
   \   00001E   6006         JZ      ??ZDO_StartDevice_2
   \   000020   7403         MOV     A,#0x3
   \   000022   65..         XRL     A,?V1
   \   000024   7040         JNZ     ??ZDO_StartDevice_3
    321              {
    322                ZDApp_ChangeState( DEV_NWK_DISC );
   \                     ??ZDO_StartDevice_2:
   \   000026                ; Setup parameters for call to function ZDApp_ChangeState
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    323          
    324            #if defined( MANAGED_SCAN )
    325                ZDOManagedScan_Next();
    326                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    327          #else
    328                ret = NLME_NetworkDiscoveryRequest( runtimeChannel, zgDefaultStartingScanDuration );
   \   00002B                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   00002B   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   90....       MOV     DPTR,#runtimeChannel
   \   000033   12....       LCALL   ?XLOAD_R2345
   \   000036   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000039   E9           MOV     A,R1
   \   00003A   F9           MOV     R1,A
    329          #if defined ( ZIGBEE_FREQ_AGILITY )
    330                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    331                    ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    332                {
    333                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    334                  // change will not be recieved. On these devices or routers that have
    335                  // lost the network, an active scan shall be conducted on the Default
    336                  // Channel list using the extended PANID to find the network. If the
    337                  // extended PANID isn't found using the Default Channel list, an scan
    338                  // should be completed using all channels.
    339                  runtimeChannel = MAX_CHANNELS_24GHZ;
    340                }
    341              #endif // ZIGBEE_FREQ_AGILITY
    342              #if defined ( ZIGBEE_COMMISSIONING )
    343                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \   00003B   7403         MOV     A,#0x3
   \   00003D   65..         XRL     A,?V1
   \   00003F   6003         JZ      $+5
   \   000041   02....       LJMP    ??ZDO_StartDevice_4 & 0xFFFF
   \   000044   90....       MOV     DPTR,#??scanCnt
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7401         MOV     A,#0x1
   \   00004B   28           ADD     A,R0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   E8           MOV     A,R0
   \   00004E   C3           CLR     C
   \   00004F   9405         SUBB    A,#0x5
   \   000051   4079         JC      ??ZDO_StartDevice_4
    344                {
    345                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    346                  // application specific means, the device shall conduct an active scan
    347                  // on the Default Channel list and join the PAN with the same
    348                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    349                  // on all channels.
    350                  // When devices rejoin the network and the PAN is not found from
    351                  runtimeChannel = MAX_CHANNELS_24GHZ;
   \   000053   90....       MOV     DPTR,#runtimeChannel
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74F8         MOV     A,#-0x8
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   74FF         MOV     A,#-0x1
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   7407         MOV     A,#0x7
   \   000063   F0           MOVX    @DPTR,A
   \   000064   8066         SJMP    ??ZDO_StartDevice_4
    352                }
    353              #endif // ZIGBEE_COMMISSIONING
    354            #endif
    355              }
    356              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   000066   7401         MOV     A,#0x1
   \   000068   65..         XRL     A,?V1
   \   00006A   7065         JNZ     ??ZDO_StartDevice_5
    357              {
    358                if ( logicalType == NODETYPE_ROUTER )
   \   00006C   7401         MOV     A,#0x1
   \   00006E   65..         XRL     A,?V0
   \   000070   790A         MOV     R1,#0xa
   \   000072   702E         JNZ     ??ZDO_StartDevice_6
    359                {
    360                  ZMacScanCnf_t scanCnf;
    361                  ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   000074                ; Setup parameters for call to function ZDApp_ChangeState
   \   000074   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    362          
    363                  /* if router and nvram is available, fake successful orphan scan */
    364                  scanCnf.hdr.Status = ZSUCCESS;
   \   000077   7401         MOV     A,#0x1
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E4           CLR     A
   \   00007D   F0           MOVX    @DPTR,A
    365                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   7403         MOV     A,#0x3
   \   000085   F0           MOVX    @DPTR,A
    366                  scanCnf.UnscannedChannels = 0;
   \   000086   04           INC     A
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   F0           MOVX    @DPTR,A
    367                  scanCnf.ResultListSize = 0;
   \   000092   7408         MOV     A,#0x8
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   E4           CLR     A
   \   000098   F0           MOVX    @DPTR,A
    368                  nwk_ScanJoiningOrphan(&scanCnf);
   \   000099                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000099   AA..         MOV     R2,?XSP + 0
   \   00009B   AB..         MOV     R3,?XSP + 1
   \   00009D   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    369          
    370                  ret = ZSuccess;
   \   0000A0   8051         SJMP    ??ZDO_StartDevice_7
    371                }
    372                else
    373                {
    374                  ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \                     ??ZDO_StartDevice_6:
   \   0000A2                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A2   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    375                  //set timer for scan and rejoin
    376                  osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   0000A5                ; Setup parameters for call to function osal_start_timerEx
   \   0000A5   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   0000A8   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AB   7A00         MOV     R2,#0x0
   \   0000AD   7B20         MOV     R3,#0x20
   \   0000AF   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    377                  ret = NLME_OrphanJoinRequest( runtimeChannel,
    378                                                zgDefaultStartingScanDuration );
   \   0000BC                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   0000BC   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   90....       MOV     DPTR,#runtimeChannel
   \   0000C4   12....       LCALL   ?XLOAD_R2345
   \   0000C7   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   0000CA   E9           MOV     A,R1
   \   0000CB   F9           MOV     R1,A
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_4:
   \   0000CC   E9           MOV     A,R1
   \   0000CD   700D         JNZ     ??ZDO_StartDevice_1
   \   0000CF   8022         SJMP    ??ZDO_StartDevice_7
   \                     ??ZDO_StartDevice_5:
   \   0000D1                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000D1   7C..         MOV     R4,#`?<Constant "MODE unknown">` & 0xff
   \   0000D3   7D..         MOV     R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   0000D5   7A..         MOV     R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   0000D7   7B..         MOV     R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   0000D9   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    390            {
    391              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   0000DC                ; Setup parameters for call to function osal_start_timerEx
   \   0000DC   90....       MOV     DPTR,#__Constant_3e8
   \   0000DF   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E2   7A01         MOV     R2,#0x1
   \   0000E4   7B00         MOV     R3,#0x0
   \   0000E6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F9           MOV     R1,A
   \   0000EB   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EE   7404         MOV     A,#0x4
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
    392            }
    393          }
   \                     ??ZDO_StartDevice_7:
   \   0000F3   740B         MOV     A,#0xb
   \   0000F5   80..         SJMP    ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine149_0
   \   000003                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    394          
    395          /**************************************************************************************************
    396           * @fn          zdoSendStateChangeMsg
    397           *
    398           * @brief       Helper function for ZDO_UpdateNwkStatus.
    399           *
    400           * input parameters
    401           *
    402           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    403           * @param       state - The current device state.
    404           *
    405           * output parameters
    406           *
    407           * None.
    408           *
    409           * @return      None.
    410           **************************************************************************************************
    411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    414            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV     R2,#-0x2f
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
    415          
    416            if (NULL == pMsg)
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   702A         JNZ     ??zdoSendStateChangeMsg_0
    417            {
    418              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   700E         JNZ     ??zdoSendStateChangeMsg_1
    419              {
    420                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    421                // try again later when more Heap may be available.
    422                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV     R2,#0x10
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   8014         SJMP    ??zdoSendStateChangeMsg_2
    423              }
    424              else
    425              {
    426                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74D1         MOV     A,#-0x2f
   \   000038   F0           MOVX    @DPTR,A
    427                pMsg->status = state;
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    428          
    429                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV     A,R6
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000041   8003         SJMP    ??zdoSendStateChangeMsg_2
    430              }
    431            }
    432            else
    433            {
    434              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    435              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV     A,R7
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    436            }
    437          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   80..         SJMP    ??Subroutine149_0
    438          
    439          /**************************************************************************************************
    440           * @fn          ZDO_UpdateNwkStatus
    441           *
    442           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    443           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    444           *              than one registered EndPoint, it will only receive one notification per state
    445           *              change. Although the device may go through a sequence of state changes, the
    446           *              Application task may only receive notification of the final, steady-state state
    447           *              because it has the lowest priority and never even runs to receive the intermediate
    448           *              state change notifications.
    449           *
    450           * input parameters
    451           *
    452           * @param       state - The current device state.
    453           *
    454           * output parameters
    455           *
    456           * None.
    457           *
    458           * @return      None.
    459           **************************************************************************************************
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    462          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    463            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   00000D   801B         SJMP    ??CrossCallReturnLabel_122
    464          
    465          #if defined MT_ZDO_CB_FUNC
    466            if ( zdpExternalStateTaskID == -1 )
    467            {
    468              zdpExternalStateTaskID = MT_TaskID;
    469            }
    470          #endif
    471          
    472            while (pItem != NULL)
    473            {
    474              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00000F   8E82         MOV     DPL,R6
   \   000011   8F83         MOV     DPH,R7
   \   000013   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000016   E0           MOVX    A,@DPTR
   \   000017   600A         JZ      ??ZDO_UpdateNwkStatus_1
    475              {
    476                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000019                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000019   A3           INC     DPTR
   \   00001A   12....       LCALL   ??Subroutine163_0 & 0xFFFF
    477              }
   \                     ??CrossCallReturnLabel_316:
   \   00001D   FA           MOV     R2,A
   \   00001E   A9..         MOV     R1,?V0
   \   000020   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    478          
    479              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   12....       LCALL   ?Subroutine79 & 0xFFFF
    480            }
   \                     ??CrossCallReturnLabel_122:
   \   00002A   FF           MOV     R7,A
   \   00002B   EE           MOV     A,R6
   \   00002C   4F           ORL     A,R7
   \   00002D   70E0         JNZ     ??ZDO_UpdateNwkStatus_0
    481          
    482            if ( zdpExternalStateTaskID != -1 )
   \   00002F   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F4           CPL     A
   \   000034   7003         JNZ     ??ZDO_UpdateNwkStatus_2
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F4           CPL     A
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000039   600A         JZ      ??ZDO_UpdateNwkStatus_3
    483            {
    484              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   00003B                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   00003B   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A9..         MOV     R1,?V0
   \   000042   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    485            }
    486          
    487            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000045                ; Setup parameters for call to function NLME_GetShortAddr
   \   000045   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000048   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00004B   12....       LCALL   ??Subroutine159_0 & 0xFFFF
    488            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_293:
   \   00004E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00004E   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    489          }
   \   000051                REQUIRE ?Subroutine2
   \   000051                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine150_0
   \   000002                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine151_0
   \   000001                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine160_0
   \   000001                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000003   E8           MOV     A,R0
   \   000004   FE           MOV     R6,A
   \   000005   E9           MOV     A,R1
   \   000006   22           RET
    490          
    491          #if defined ( REFLECTOR )
    492          /*********************************************************************
    493           * @fn          ZDO_RemoveEndDeviceBind
    494           *
    495           * @brief       Remove the end device bind
    496           *
    497           * @param  none
    498           *
    499           * @return      none
    500           */
    501          static void ZDO_RemoveEndDeviceBind( void )
    502          {
    503            if ( ZDO_EDBind != NULL )
    504            {
    505              // Free the RAM
    506              if ( ZDO_EDBind->inClusters != NULL )
    507              {
    508                osal_mem_free( ZDO_EDBind->inClusters );
    509              }
    510              if ( ZDO_EDBind->outClusters != NULL )
    511              {
    512                osal_mem_free( ZDO_EDBind->outClusters );
    513              }
    514              osal_mem_free( ZDO_EDBind );
    515              ZDO_EDBind = NULL;
    516            }
    517          }
    518          #endif // REFLECTOR
    519          
    520          #if defined ( REFLECTOR )
    521          /*********************************************************************
    522           * @fn          ZDO_SendEDBindRsp
    523           *
    524           * @brief       Send the end device bind response
    525           *
    526           * @param  none
    527           *
    528           * @return      none
    529           */
    530          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    531          {
    532            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    533          
    534          #if defined( LCD_SUPPORTED )
    535            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    536            if ( Status == ZDP_SUCCESS )
    537            {
    538              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    539            }
    540            else
    541            {
    542              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    543            }
    544          #endif
    545          
    546          }
    547          #endif // REFLECTOR
    548          
    549          #if ( ZG_BUILD_COORDINATOR_TYPE )
    550          /*********************************************************************
    551           * @fn          ZDO_CompareClusterLists
    552           *
    553           * @brief       Compare one list to another list
    554           *
    555           * @param       numList1 - number of items in list 1
    556           * @param       list1 - first list of cluster IDs
    557           * @param       numList2 - number of items in list 2
    558           * @param       list2 - second list of cluster IDs
    559           * @param       pMatches - buffer to put matches
    560           *
    561           * @return      number of matches
    562           */
    563          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    564                                    byte numList2, uint16 *list2, uint16 *pMatches )
    565          {
    566            byte x, y;
    567            uint16 z;
    568            byte numMatches = 0;
    569          
    570            // Check the first in against the seconds out
    571            for ( x = 0; x < numList1; x++ )
    572            {
    573              for ( y = 0; y < numList2; y++ )
    574              {
    575                z = list2[y];
    576                if ( list1[x] == z )
    577                {
    578                  pMatches[numMatches++] = z;
    579                }
    580              }
    581            }
    582          
    583            return ( numMatches );
    584          }
    585          #endif // ZG_BUILD_COORDINATOR_TYPE
    586          
    587          /*********************************************************************
    588           * Utility functions
    589           */
    590          
    591          /*********************************************************************
    592           * @fn          ZDO_CompareByteLists
    593           *
    594           * @brief       Compares two lists for matches.
    595           *
    596           * @param       ACnt  - number of entries in list A
    597           * @param       AList  - List A
    598           * @param       BCnt  - number of entries in list B
    599           * @param       BList  - List B
    600           *
    601           * @return      true if a match is found
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    604          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8C..         MOV     ?V2,R4
    605            byte x, y;
    606          
    607            for ( x = 0; x < ACnt; x++ )
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000014   E8           MOV     A,R0
   \   000015   FC           MOV     R4,A
   \   000016   E9           MOV     A,R1
   \   000017   FD           MOV     R5,A
   \   000018   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   00001A   05..         INC     ?V0
   \                     ??ZDO_AnyClusterMatches_0:
   \   00001C   E5..         MOV     A,?V0
   \   00001E   C3           CLR     C
   \   00001F   95..         SUBB    A,?V3
   \   000021   502A         JNC     ??ZDO_AnyClusterMatches_2
    608            {
    609              for ( y = 0; y < BCnt; y++ )
   \   000023   75..00       MOV     ?V1,#0x0
   \   000026   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000028   05..         INC     ?V1
   \                     ??ZDO_AnyClusterMatches_3:
   \   00002A   E5..         MOV     A,?V1
   \   00002C   C3           CLR     C
   \   00002D   95..         SUBB    A,?V2
   \   00002F   50E9         JNC     ??ZDO_AnyClusterMatches_1
    610              {
    611                if ( AList[x] == BList[y] )
   \   000031   A8..         MOV     R0,?V0
   \   000033   E8           MOV     A,R0
   \   000034   28           ADD     A,R0
   \   000035   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000038   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00003B   A8..         MOV     R0,?V1
   \   00003D   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6E           XRL     A,R6
   \   000042   7003         JNZ     ??ZDO_AnyClusterMatches_5
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6F           XRL     A,R7
   \                     ??ZDO_AnyClusterMatches_5:
   \   000047   70DF         JNZ     ??ZDO_AnyClusterMatches_4
    612                {
    613                  return true;
   \   000049   7901         MOV     R1,#0x1
   \   00004B   8002         SJMP    ??ZDO_AnyClusterMatches_6
    614                }
    615              }
    616            }
    617          
    618            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00004D   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00004F   02....       LJMP    ?Subroutine3 & 0xFFFF
    619          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EC           MOV     A,R4
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   ED           MOV     A,R5
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   FF           MOV     R7,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   28           ADD     A,R0
   \   000006   F582         MOV     DPL,A
   \   000008   EB           MOV     A,R3
   \   000009   39           ADDC    A,R1
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
    620          
    621          /*********************************************************************
    622           * Callback functions from ZDProfile
    623           */
    624          
    625          /*********************************************************************
    626           * @fn          ZDO_ProcessNodeDescReq
    627           *
    628           * @brief       This function processes and responds to the
    629           *              Node_Desc_req message.
    630           *
    631           * @param       inMsg - incoming message
    632           *
    633           * @return      none
    634           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    635          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    636          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine46 & 0xFFFF
    637            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    638            NodeDescriptorFormat_t *desc = NULL;
    639          
    640            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_70:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    641            {
    642              desc = &ZDO_Config_Node_Descriptor;
    643            }
    644          
    645            if ( desc != NULL )
    646            {
    647              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    648            }
    649            else
    650            {
    651              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    652                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine48 & 0xFFFF
    653            }
   \                     ??CrossCallReturnLabel_74:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    654          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   02....       LJMP    ??Subroutine149_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   7C80         MOV     R4,#-0x80
   \   000005   EE           MOV     A,R6
   \   000006   2402         ADD     A,#0x2
   \   000008   FA           MOV     R2,A
   \   000009   E4           CLR     A
   \   00000A   3F           ADDC    A,R7
   \   00000B   FB           MOV     R3,A
   \   00000C   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000007   FC           MOV     R4,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FD           MOV     R5,A
   \   00000B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6C           XRL     A,R4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000004   3F           ADDC    A,R7
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00000A   FA           MOV     R2,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   E4           CLR     A
   \   00000F   C8           XCH     A,R0
   \   000010   F9           MOV     R1,A
   \   000011   EA           MOV     A,R2
   \   000012   28           ADD     A,R0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    655          
    656          /*********************************************************************
    657           * @fn          ZDO_ProcessPowerDescReq
    658           *
    659           * @brief       This function processes and responds to the
    660           *              Node_Power_req message.
    661           *
    662           * @param       inMsg  - incoming request
    663           *
    664           * @return      none
    665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    666          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    667          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine46 & 0xFFFF
    668            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    669            NodePowerDescriptorFormat_t *desc = NULL;
    670          
    671            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_71:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    672            {
    673              desc = &ZDO_Config_Power_Descriptor;
    674            }
    675          
    676            if ( desc != NULL )
    677            {
    678              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    679            }
    680            else
    681            {
    682              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    683                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine48 & 0xFFFF
    684            }
   \                     ??CrossCallReturnLabel_75:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    685          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   02....       LJMP    ??Subroutine149_0 & 0xFFFF
    686          
    687          /*********************************************************************
    688           * @fn          ZDO_ProcessSimpleDescReq
    689           *
    690           * @brief       This function processes and responds to the
    691           *              Simple_Desc_req message.
    692           *
    693           * @param       inMsg - incoming message (request)
    694           *
    695           * @return      none
    696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine148_0
   \   000002                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    698          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    699            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    700            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   00001B   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00001E   FB           MOV     R3,A
   \   00001F   EC           MOV     A,R4
   \   000020   FA           MOV     R2,A
    701            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
    702            byte free = false;
   \   000029   75..00       MOV     ?V1,#0x0
    703            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV     ?V0,#0x0
    704          
    705            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000031   74FF         MOV     A,#-0x1
   \   000033   69           XRL     A,R1
   \   000034   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    706            {
    707              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV     ?V0,#-0x7e
   \   000039   8024         SJMP    ??ZDO_ProcessSimpleDescReq_2
    708            }
    709            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6A           XRL     A,R2
   \   000040   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   7015         JNZ     ??ZDO_ProcessSimpleDescReq_4
    710            {
    711              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV     R2,?XSP + 0
   \   000049   AB..         MOV     R3,?XSP + 1
   \   00004B   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV     A,R1
   \   00004F   FA           MOV     R2,A
    712              if ( sDesc == NULL )
   \   000050   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000053   7003         JNZ     ??ZDO_ProcessSimpleDescReq_5
    713              {
    714                stat = ZDP_NOT_ACTIVE;
   \   000055   75..83       MOV     ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000058   8A..         MOV     ?V1,R2
   \   00005A   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    715              }
    716            }
    717            else
    718            {
    719              if ( ZSTACK_ROUTER_BUILD )
    720              {
    721                stat = ZDP_DEVICE_NOT_FOUND;
    722              }
    723              else if ( ZSTACK_END_DEVICE_BUILD )
    724              {
    725                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005C   75..80       MOV     ?V0,#-0x80
    726              }
    727            }
    728          
    729            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   00005F                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FC           MOV     R4,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FD           MOV     R5,A
   \   00006A   A9..         MOV     R1,?V0
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    730          
    731            if ( free && sDesc )
   \   000073   E5..         MOV     A,?V1
   \   000075   600B         JZ      ??ZDO_ProcessSimpleDescReq_6
   \   000077   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00007A   6006         JZ      ??ZDO_ProcessSimpleDescReq_6
    732            {
    733              osal_mem_free( sDesc );
   \   00007C                ; Setup parameters for call to function osal_mem_free
   \   00007C   12....       LCALL   ?Subroutine73 & 0xFFFF
    734            }
   \                     ??CrossCallReturnLabel_277:
   \   00007F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    735          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000082   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine157_0
   \   000006                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine158_0
   \   000006                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000004   3F           ADDC    A,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   22           RET
    736          
    737          /*********************************************************************
    738           * @fn          ZDO_ProcessActiveEPReq
    739           *
    740           * @brief       This function processes and responds to the
    741           *              Active_EP_req message.
    742           *
    743           * @param       inMsg  - incoming message (request)
    744           *
    745           * @return      none
    746           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    748          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    749            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    750            uint16 aoi;
    751            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    752          
    753            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000012   F5..         MOV     ?V2,A
   \   000014   E4           CLR     A
   \   000015   39           ADDC    A,R1
   \   000016   F5..         MOV     ?V3,A
    754          
    755            if ( aoi == NLME_GetShortAddr() )
   \   000018                ; Setup parameters for call to function NLME_GetShortAddr
   \   000018   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   65..         XRL     A,?V2
   \   00001E   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000020   EB           MOV     A,R3
   \   000021   65..         XRL     A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000023   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    756            {
    757              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000025                ; Setup parameters for call to function afNumEndPoints
   \   000025   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000028   E9           MOV     A,R1
   \   000029   14           DEC     A
   \   00002A   F5..         MOV     ?V0,A
    758              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002C                ; Setup parameters for call to function afEndPoints
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000030   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000032   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000035   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    759            }
    760            else
    761            {
    762              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000037   75..80       MOV     ?V1,#-0x80
    763            }
    764          
    765            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    766                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003A                ; Setup parameters for call to function ZDP_EPRsp
   \   00003A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V4,A
   \   000040   78..         MOV     R0,#?V4
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000045   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000048   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004B   78..         MOV     R0,#?V4
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   78..         MOV     R0,#?V2
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   E5..         MOV     A,?V1
   \   00005C   F5..         MOV     ?V0,A
   \   00005E   78..         MOV     R0,#?V0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   EE           MOV     A,R6
   \   000064   2402         ADD     A,#0x2
   \   000066   FC           MOV     R4,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00006D   7A05         MOV     R2,#0x5
   \   00006F   7B80         MOV     R3,#-0x80
   \   000071   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000074   7407         MOV     A,#0x7
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    767          }
   \   000079   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    768          
    769          /*********************************************************************
    770           * @fn          ZDO_ConvertOTAClusters
    771           *
    772           * @brief       This function will convert the over-the-air cluster list
    773           *              format to an internal format.
    774           *
    775           * @param       inMsg  - incoming message (request)
    776           *
    777           * @return      pointer to incremented inBuf
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    781            uint8 x;
    782          
    783            for ( x = 0; x < cnt; x++ )
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   8021         SJMP    ??ZDO_ConvertOTAClusters_0
    784            {
    785              // convert ota format to internal
    786              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000015   EE           MOV     A,R6
   \   000016   28           ADD     A,R0
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FF           MOV     R7,A
   \   00001A   A8..         MOV     R0,?V0
   \   00001C   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00001F   EE           MOV     A,R6
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EF           MOV     A,R7
   \   000023   F0           MOVX    @DPTR,A
    787              inBuf += sizeof( uint16 );
   \   000024   EA           MOV     A,R2
   \   000025   2402         ADD     A,#0x2
   \   000027   FA           MOV     R2,A
   \   000028   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   00002A   0B           INC     R3
    788            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   00002B   05..         INC     ?V0
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00002D   E5..         MOV     A,?V0
   \   00002F   C3           CLR     C
   \   000030   95..         SUBB    A,?V1
   \   000032   40D8         JC      ??ZDO_ConvertOTAClusters_1
    789            return ( inBuf );
   \   000034   02....       LJMP    ??Subroutine149_0 & 0xFFFF
    790          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   22           RET
    791          
    792          /*********************************************************************
    793           * @fn          ZDO_ProcessMatchDescReq
    794           *
    795           * @brief       This function processes and responds to the
    796           *              Match_Desc_req message.
    797           *
    798           * @param       inMsg  - incoming message (request)
    799           *
    800           * @return      none
    801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    802          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    803          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
    804            uint8 epCnt = 0;
   \   00000E   75..00       MOV     ?V9,#0x0
    805            uint8 numInClusters;
    806            uint16 *inClusters = NULL;
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ?Subroutine27 & 0xFFFF
    807            uint8 numOutClusters;
    808            uint16 *outClusters = NULL;
   \                     ??CrossCallReturnLabel_33:
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    809            epList_t *epDesc;
    810            SimpleDescriptionFormat_t *sDesc = NULL;
    811            uint8 allocated;
    812            uint8 *msg;
    813            uint16 aoi;
    814            uint16 profileID;
    815          
    816            // Parse the incoming message
    817            msg = inMsg->asdu;
   \   00001F   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000022   35..         ADDC    A,?V13
   \   000024   12....       LCALL   ?Subroutine61 & 0xFFFF
    818            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_90:
   \   000027   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   00002A   FE           MOV     R6,A
   \   00002B   E4           CLR     A
   \   00002C   39           ADDC    A,R1
   \   00002D   FF           MOV     R7,A
    819            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00002E   85..82       MOV     DPL,?V2
   \   000031   85..83       MOV     DPH,?V3
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   F5..         MOV     ?V0,A
   \   000040   E4           CLR     A
   \   000041   39           ADDC    A,R1
   \   000042   F5..         MOV     ?V1,A
   \   000044                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
    820            msg += 4;
    821          
    822            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000048   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00004B   E9           MOV     A,R1
   \   00004C   6401         XRL     A,#0x1
   \   00004E   6016         JZ      ??ZDO_ProcessMatchDescReq_0
    823            {
    824              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    825                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    826              return;
    827            }
    828            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000050                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   FB           MOV     R3,A
   \   000054   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000057   E9           MOV     A,R1
   \   000058   7046         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   00005A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6E           XRL     A,R6
   \   00005F   7003         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000064   603A         JZ      ??ZDO_ProcessMatchDescReq_1
    829            {
    830              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    831                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000066                ; Setup parameters for call to function ZDP_EPRsp
   \   000066   E5..         MOV     A,?V12
   \   000068   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00006B   35..         ADDC    A,?V13
   \   00006D   F583         MOV     DPH,A
   \   00006F   12....       LCALL   ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   E4           CLR     A
   \   000076   F5..         MOV     ?V0,A
   \   000078   F5..         MOV     ?V1,A
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   78..         MOV     R0,#?V0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000084   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000087   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008A   75..80       MOV     ?V0,#-0x80
   \   00008D   78..         MOV     R0,#?V0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000092   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000095   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000098   7407         MOV     A,#0x7
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
    832              return;
   \   00009D   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    833            }
    834          
    835            if ((numInClusters = *msg++) &&
    836                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000A0   85..82       MOV     DPL,?V2
   \   0000A3   85..83       MOV     DPH,?V3
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F5..         MOV     ?V8,A
   \   0000AD   E5..         MOV     A,?V2
   \   0000AF   2405         ADD     A,#0x5
   \   0000B1   F5..         MOV     ?V2,A
   \   0000B3   5002         JNC     ??ZDO_ProcessMatchDescReq_4
   \   0000B5   05..         INC     ?V3
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000B7   E5..         MOV     A,?V8
   \   0000B9   602B         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000BB                ; Setup parameters for call to function osal_mem_alloc
   \   0000BB   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000BE   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C1   7402         MOV     A,#0x2
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   0000D1   6013         JZ      ??ZDO_ProcessMatchDescReq_5
    837            {
    838              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000D3                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ?Subroutine76 & 0xFFFF
    839            }
   \                     ??CrossCallReturnLabel_117:
   \   0000DB   A9..         MOV     R1,?V8
   \   0000DD   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000E0   8A..         MOV     ?V2,R2
   \   0000E2   8B..         MOV     ?V3,R3
   \   0000E4   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    840            else
    841            {
    842              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000E6   75..00       MOV     ?V8,#0x0
    843            }
    844          
    845            if ((numOutClusters = *msg++) &&
    846                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000E9   85..82       MOV     DPL,?V2
   \   0000EC   85..83       MOV     DPH,?V3
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F5..         MOV     ?V7,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   8582..       MOV     ?V2,DPL
   \   0000F6   8583..       MOV     ?V3,DPH
   \   0000F9   6027         JZ      ??ZDO_ProcessMatchDescReq_7
   \   0000FB                ; Setup parameters for call to function osal_mem_alloc
   \   0000FB   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000FE   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000101   85..82       MOV     DPL,?XSP + 0
   \   000104   85..83       MOV     DPH,?XSP + 1
   \   000107   EA           MOV     A,R2
   \   000108   F0           MOVX    @DPTR,A
   \   000109   A3           INC     DPTR
   \   00010A   EB           MOV     A,R3
   \   00010B   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00010E   E8           MOV     A,R0
   \   00010F   49           ORL     A,R1
   \   000110   6010         JZ      ??ZDO_ProcessMatchDescReq_7
    847            {
    848              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000112                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   12....       LCALL   ?Subroutine76 & 0xFFFF
    849            }
   \                     ??CrossCallReturnLabel_118:
   \   00011B   A9..         MOV     R1,?V7
   \   00011D   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000120   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    850            else
    851            {
    852              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000122   75..00       MOV     ?V7,#0x0
    853            }
    854          
    855            // First count the number of endpoints that match.
    856            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000125   90....       MOV     DPTR,#epList
   \   000128   8045         SJMP    ??ZDO_ProcessMatchDescReq_9
    857            while ( epDesc )
    858            {
    859              // Don't search endpoint 0 and check if response is allowed
    860              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    861              {
    862                if ( epDesc->pfnDescCB )
    863                {
    864                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    865                  allocated = TRUE;
    866                }
    867                else
    868                {
    869                  sDesc = epDesc->epDesc->simpleDesc;
    870                  allocated = FALSE;
    871                }
    872          
    873                // Allow specific ProfileId or Wildcard ProfileID
    874                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    875                {
    876                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    877          
    878                  // Are there matching input clusters?
    879                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    880                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    881                      // Are there matching output clusters?
    882                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    883                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    884                  {
    885                    // Notify the endpoint of the match.
    886                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    887                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    888          
    889                    if (pRspSent)
    890                    {
    891                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    892                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    893                      pRspSent->numInClusters = numInClusters;
    894                      pRspSent->numOutClusters = numOutClusters;
    895          
    896                      if (numInClusters)
    897                      {
    898                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    899                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    900                      }
    901                      else
    902                      {
    903                        pRspSent->pInClusters = NULL;
    904                      }
    905          
    906                      if (numOutClusters)
    907                      {
    908                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    909                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    910                      }
    911                      else
    912                      {
    913                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00012A   E4           CLR     A
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   F0           MOVX    @DPTR,A
    914                      }
    915          
    916                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00012E                ; Setup parameters for call to function osal_msg_send
   \   00012E   AA..         MOV     R2,?V2
   \   000130   AB..         MOV     R3,?V3
   \   000132   85..82       MOV     DPL,?V14
   \   000135   85..83       MOV     DPH,?V15
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00013D   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000140   F9           MOV     R1,A
   \   000141   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    917                    }
    918          
    919                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000144   85..82       MOV     DPL,?V10
   \   000147   85..83       MOV     DPH,?V11
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   C0E0         PUSH    A
   \   00014D   A8..         MOV     R0,?V9
   \   00014F   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000151   28           ADD     A,R0
   \   000152   F582         MOV     DPL,A
   \   000154   E4           CLR     A
   \   000155   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   000157   F583         MOV     DPH,A
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   05..         INC     ?V9
    920                  }
    921                }
    922          
    923                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   00015E   A2..         MOV     C,?VB.0
   \   000160   5007         JNC     ??ZDO_ProcessMatchDescReq_14
    924                {
    925                  osal_mem_free( sDesc );
   \   000162                ; Setup parameters for call to function osal_mem_free
   \   000162   AA..         MOV     R2,?V10
   \   000164   AB..         MOV     R3,?V11
   \   000166   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    926                }
    927              }
    928              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000169   85..82       MOV     DPL,?V14
   \   00016C   85..83       MOV     DPH,?V15
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F5..         MOV     ?V14,A
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   F5..         MOV     ?V15,A
   \   000176   E5..         MOV     A,?V14
   \   000178   45..         ORL     A,?V15
   \   00017A   7003         JNZ     $+5
   \   00017C   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   00017F   85..82       MOV     DPL,?V14
   \   000182   85..83       MOV     DPH,?V15
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   00018A   E8           MOV     A,R0
   \   00018B   FA           MOV     R2,A
   \   00018C   E9           MOV     A,R1
   \   00018D   FB           MOV     R3,A
   \   00018E   8A82         MOV     DPL,R2
   \   000190   8B83         MOV     DPH,R3
   \   000192   E0           MOVX    A,@DPTR
   \   000193   FC           MOV     R4,A
   \   000194   60D3         JZ      ??ZDO_ProcessMatchDescReq_14
   \   000196   85..82       MOV     DPL,?V14
   \   000199   85..83       MOV     DPH,?V15
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001A7   50C0         JNC     ??ZDO_ProcessMatchDescReq_14
   \   0001A9   85..82       MOV     DPL,?V14
   \   0001AC   85..83       MOV     DPH,?V15
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   0001B4   E582         MOV     A,DPL
   \   0001B6   4583         ORL     A,DPH
   \   0001B8   600F         JZ      ??ZDO_ProcessMatchDescReq_16
   \   0001BA                ; Setup parameters for indirect call
   \   0001BA   EC           MOV     A,R4
   \   0001BB   FA           MOV     R2,A
   \   0001BC   7901         MOV     R1,#0x1
   \   0001BE   12....       LCALL   ?CALL_IND
   \   0001C1   8A..         MOV     ?V10,R2
   \   0001C3   8B..         MOV     ?V11,R3
   \   0001C5   D2..         SETB    ?VB.0
   \   0001C7   8010         SJMP    ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001C9   8A82         MOV     DPL,R2
   \   0001CB   8B83         MOV     DPH,R3
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   F5..         MOV     ?V10,A
   \   0001D3   A3           INC     DPTR
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   F5..         MOV     ?V11,A
   \   0001D7   C2..         CLR     ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001D9   E5..         MOV     A,?V10
   \   0001DB   45..         ORL     A,?V11
   \   0001DD   7003         JNZ     $+5
   \   0001DF   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   0001E2   85..82       MOV     DPL,?V10
   \   0001E5   85..83       MOV     DPH,?V11
   \   0001E8   A3           INC     DPTR
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   65..         XRL     A,?V0
   \   0001EC   7004         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   0001EE   A3           INC     DPTR
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   0001F2   600F         JZ      ??ZDO_ProcessMatchDescReq_19
   \   0001F4   74FF         MOV     A,#-0x1
   \   0001F6   65..         XRL     A,?V0
   \   0001F8   7004         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   0001FA   74FF         MOV     A,#-0x1
   \   0001FC   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0001FE   6003         JZ      $+5
   \   000200   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000203                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000203   85..82       MOV     DPL,?V10
   \   000206   85..83       MOV     DPH,?V11
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000213   85..82       MOV     DPL,?V10
   \   000216   85..83       MOV     DPH,?V11
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   FC           MOV     R4,A
   \   000221   7404         MOV     A,#0x4
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000229   A9..         MOV     R1,?V8
   \   00022B   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00022E   7402         MOV     A,#0x2
   \   000230   12....       LCALL   ?DEALLOC_XSTACK8
   \   000233   E9           MOV     A,R1
   \   000234   703C         JNZ     ??ZDO_ProcessMatchDescReq_21
   \   000236                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000236   85..82       MOV     DPL,?V10
   \   000239   85..83       MOV     DPH,?V11
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000249   85..82       MOV     DPL,?V10
   \   00024C   85..83       MOV     DPH,?V11
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   A3           INC     DPTR
   \   000256   A3           INC     DPTR
   \   000257   A3           INC     DPTR
   \   000258   E0           MOVX    A,@DPTR
   \   000259   FC           MOV     R4,A
   \   00025A   7402         MOV     A,#0x2
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000262   A9..         MOV     R1,?V7
   \   000264   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000267   7402         MOV     A,#0x2
   \   000269   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026C   E9           MOV     A,R1
   \   00026D   7003         JNZ     $+5
   \   00026F   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000272                ; Setup parameters for call to function osal_msg_allocate
   \   000272   E5..         MOV     A,?V7
   \   000274   25..         ADD     A,?V8
   \   000276   C3           CLR     C
   \   000277   33           RLC     A
   \   000278   240A         ADD     A,#0xa
   \   00027A   FA           MOV     R2,A
   \   00027B   7B00         MOV     R3,#0x0
   \   00027D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000280   8A..         MOV     ?V2,R2
   \   000282   8B..         MOV     ?V3,R3
   \   000284   EA           MOV     A,R2
   \   000285   45..         ORL     A,?V3
   \   000287   7003         JNZ     $+5
   \   000289   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   00028C   8A82         MOV     DPL,R2
   \   00028E   8B83         MOV     DPH,R3
   \   000290   74D2         MOV     A,#-0x2e
   \   000292   F0           MOVX    @DPTR,A
   \   000293   85..82       MOV     DPL,?V12
   \   000296   85..83       MOV     DPH,?V13
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00029E   8A82         MOV     DPL,R2
   \   0002A0   8B83         MOV     DPH,R3
   \   0002A2   A3           INC     DPTR
   \   0002A3   A3           INC     DPTR
   \   0002A4   E8           MOV     A,R0
   \   0002A5   F0           MOVX    @DPTR,A
   \   0002A6   A3           INC     DPTR
   \   0002A7   E9           MOV     A,R1
   \   0002A8   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002AB   A3           INC     DPTR
   \   0002AC   E5..         MOV     A,?V8
   \   0002AE   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0002B1   E5..         MOV     A,?V7
   \   0002B3   F0           MOVX    @DPTR,A
   \   0002B4   EA           MOV     A,R2
   \   0002B5   2405         ADD     A,#0x5
   \   0002B7   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   0002BA   E5..         MOV     A,?V8
   \   0002BC   6025         JZ      ??ZDO_ProcessMatchDescReq_22
   \   0002BE   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   0002C1   35..         ADDC    A,?V3
   \   0002C3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   0002C6                ; Setup parameters for call to function osal_memcpy
   \   0002C6   7402         MOV     A,#0x2
   \   0002C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CB   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0002CE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002D1   AC..         MOV     R4,?V8
   \   0002D3   EC           MOV     A,R4
   \   0002D4   2C           ADD     A,R4
   \   0002D5   FC           MOV     R4,A
   \   0002D6   E4           CLR     A
   \   0002D7   33           RLC     A
   \   0002D8   FD           MOV     R5,A
   \   0002D9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002DC   7403         MOV     A,#0x3
   \   0002DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E1   8004         SJMP    ??ZDO_ProcessMatchDescReq_23
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0002E3   E4           CLR     A
   \   0002E4   F0           MOVX    @DPTR,A
   \   0002E5   A3           INC     DPTR
   \   0002E6   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0002E7   E5..         MOV     A,?V2
   \   0002E9   2408         ADD     A,#0x8
   \   0002EB   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0002EE   E5..         MOV     A,?V7
   \   0002F0   7003         JNZ     $+5
   \   0002F2   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   0002F5   A8..         MOV     R0,?V8
   \   0002F7   E8           MOV     A,R0
   \   0002F8   28           ADD     A,R0
   \   0002F9   F8           MOV     R0,A
   \   0002FA   E4           CLR     A
   \   0002FB   33           RLC     A
   \   0002FC   F9           MOV     R1,A
   \   0002FD   E5..         MOV     A,?V2
   \   0002FF   28           ADD     A,R0
   \   000300   F8           MOV     R0,A
   \   000301   E5..         MOV     A,?V3
   \   000303   39           ADDC    A,R1
   \   000304   F9           MOV     R1,A
   \   000305   E8           MOV     A,R0
   \   000306   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000309   39           ADDC    A,R1
   \   00030A   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00030D                ; Setup parameters for call to function osal_memcpy
   \   00030D   85..82       MOV     DPL,?XSP + 0
   \   000310   85..83       MOV     DPH,?XSP + 1
   \   000313   12....       LCALL   ?Subroutine60 & 0xFFFF
    929            }
   \                     ??CrossCallReturnLabel_89:
   \   000316   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000319   AC..         MOV     R4,?V7
   \   00031B   EC           MOV     A,R4
   \   00031C   2C           ADD     A,R4
   \   00031D   FC           MOV     R4,A
   \   00031E   E4           CLR     A
   \   00031F   33           RLC     A
   \   000320   FD           MOV     R5,A
   \   000321   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000324   7403         MOV     A,#0x3
   \   000326   12....       LCALL   ?DEALLOC_XSTACK8
   \   000329   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    930          
    931            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   00032C   75....       MOV     ?V0,#`?<Constant "Match Desc Req">` & 0xff
   \   00032F   75....       MOV     ?V1,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   000332   E5..         MOV     A,?V9
   \   000334   603C         JZ      ??ZDO_ProcessMatchDescReq_24
    932            {
    933              // Send the message if at least one match found.
    934              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    935                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000336                ; Setup parameters for call to function ZDP_EPRsp
   \   000336   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000339   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00033C   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   00033F   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   000342   78..         MOV     R0,#?V2
   \   000344   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000347   E5..         MOV     A,?V9
   \   000349   F5..         MOV     ?V2,A
   \   00034B   78..         MOV     R0,#?V2
   \   00034D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000350   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000353   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000356   75..00       MOV     ?V2,#0x0
   \   000359   78..         MOV     R0,#?V2
   \   00035B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035E   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000361   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000364   7407         MOV     A,#0x7
   \   000366   12....       LCALL   ?DEALLOC_XSTACK8
   \   000369   E9           MOV     A,R1
   \   00036A   7050         JNZ     ??ZDO_ProcessMatchDescReq_25
    936              {
    937          #if defined( LCD_SUPPORTED )
    938                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   00036C                ; Setup parameters for call to function HalLcdWriteScreen
   \   00036C   7C..         MOV     R4,#`?<Constant "Rsp Sent">` & 0xff
   \   00036E   7D..         MOV     R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   000370   8043         SJMP    ??ZDO_ProcessMatchDescReq_26
    939          #endif
    940              }
    941            }
    942            else
    943            {
    944              // No match found
    945              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   000372                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000372   EE           MOV     A,R6
   \   000373   FA           MOV     R2,A
   \   000374   EF           MOV     A,R7
   \   000375   FB           MOV     R3,A
   \   000376   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000379   E9           MOV     A,R1
   \   00037A   7035         JNZ     ??ZDO_ProcessMatchDescReq_27
    946              {
    947                // send response message with match length = 0
    948                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    949                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   00037C                ; Setup parameters for call to function ZDP_EPRsp
   \   00037C   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00037F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000382   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000385   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   000388   78..         MOV     R0,#?V2
   \   00038A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038D   75..00       MOV     ?V2,#0x0
   \   000390   78..         MOV     R0,#?V2
   \   000392   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000395   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000398   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00039B   78..         MOV     R0,#?V2
   \   00039D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003A0   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0003A3   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0003A6   7407         MOV     A,#0x7
   \   0003A8   12....       LCALL   ?DEALLOC_XSTACK8
    950          #if defined( LCD_SUPPORTED )
    951                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
   \   0003AB                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003AB   7C..         MOV     R4,#`?<Constant "Rsp Non Matched">` & 0xff
   \   0003AD   7D..         MOV     R5,#(`?<Constant "Rsp Non Matched">` >> 8) & 0xff
   \   0003AF   8004         SJMP    ??ZDO_ProcessMatchDescReq_26
    952          #endif
    953              }
    954              else
    955              {
    956                // no response mesage for broadcast message
    957          #if defined( LCD_SUPPORTED )
    958                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0003B1                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003B1   7C..         MOV     R4,#`?<Constant "Non Matched">` & 0xff
   \   0003B3   7D..         MOV     R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0003B5   AA..         MOV     R2,?V0
   \   0003B7   AB..         MOV     R3,?V1
   \   0003B9   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    959          #endif
    960              }
    961            }
    962          
    963            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0003BC   7402         MOV     A,#0x2
   \   0003BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C1   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0003C4   600B         JZ      ??ZDO_ProcessMatchDescReq_28
    964            {
    965              osal_mem_free( inClusters );
   \   0003C6                ; Setup parameters for call to function osal_mem_free
   \   0003C6   7402         MOV     A,#0x2
   \   0003C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CB   12....       LCALL   ??Subroutine157_0 & 0xFFFF
    966            }
   \                     ??CrossCallReturnLabel_272:
   \   0003CE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    967          
    968            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   0003D1   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   0003D4   6006         JZ      ??ZDO_ProcessMatchDescReq_3
    969            {
    970              osal_mem_free( outClusters );
   \   0003D6                ; Setup parameters for call to function osal_mem_free
   \   0003D6   12....       LCALL   ?Subroutine73 & 0xFFFF
    971            }
   \                     ??CrossCallReturnLabel_278:
   \   0003D9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    972          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0003DC   7404         MOV     A,#0x4
   \   0003DE   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine152_0
   \   000003                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   35..         ADDC    A,?V3
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E5..         MOV     A,?V12
   \   000002   240E         ADD     A,#0xe
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V13
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V2,A
   \   00000E   78..         MOV     R0,#?V2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   AA..         MOV     R2,?V2
   \   000007   AB..         MOV     R3,?V3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E5..         MOV     A,?V12
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V13
   \   000008   FD           MOV     R5,A
   \   000009   E5..         MOV     A,?V12
   \   00000B   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00000E   35..         ADDC    A,?V13
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   7A06         MOV     R2,#0x6
   \   000016   7B80         MOV     R3,#-0x80
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine156_0
   \   000003                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine159_0
   \   000001                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine166_0
   \   000001                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F5..         MOV     ?V2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V3,A
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine174_0
   \   000001                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   240A         ADD     A,#0xa
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   85..82       MOV     DPL,?V2
   \   000005   85..83       MOV     DPH,?V3
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   C8           XCH     A,R0
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   28           ADD     A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
    973          
    974          #if defined ( REFLECTOR )
    975          /*********************************************************************
    976           * @fn      ZDO_ProcessBindUnbindReq()
    977           *
    978           * @brief   Called to process a Bind or Unbind Request message.
    979           *
    980           * @param   inMsg  - incoming message (request)
    981           * @param   pReq - place to put parsed information
    982           *
    983           * @return  none
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    986          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    987            zAddrType_t SourceAddr;       // Binding Source addres
    988            byte bindStat;
    989          
    990            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    991            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    992          
    993            // If the local device is not the primary binding cache
    994            // check the src address of the bind request.
    995            // If it is not the local device's extended address
    996            // discard the request.
    997            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    998                  (pReq->dstAddress.addrMode != Addr64Bit &&
    999                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   AC..         MOV     R4,?V2
   \   000029   AD..         MOV     R5,?V3
   \   00002B   EE           MOV     A,R6
   \   00002C   240F         ADD     A,#0xf
   \   00002E   F5..         MOV     ?V14,A
   \   000030   E4           CLR     A
   \   000031   3F           ADDC    A,R7
   \   000032   F5..         MOV     ?V15,A
   \   000034   EE           MOV     A,R6
   \   000035   240E         ADD     A,#0xe
   \   000037   F5..         MOV     ?V12,A
   \   000039   E4           CLR     A
   \   00003A   3F           ADDC    A,R7
   \   00003B   F5..         MOV     ?V13,A
   \   00003D   EE           MOV     A,R6
   \   00003E   2402         ADD     A,#0x2
   \   000040   F5..         MOV     ?V10,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F5..         MOV     ?V11,A
   \   000046   EE           MOV     A,R6
   \   000047   240C         ADD     A,#0xc
   \   000049   F5..         MOV     ?V8,A
   \   00004B   E4           CLR     A
   \   00004C   3F           ADDC    A,R7
   \   00004D   F5..         MOV     ?V9,A
   \   00004F                ; Setup parameters for call to function sAddrExtCmp
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000057   E9           MOV     A,R1
   \   000058   6019         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   00005A   E5..         MOV     A,?V0
   \   00005C   2413         ADD     A,#0x13
   \   00005E   FA           MOV     R2,A
   \   00005F   E4           CLR     A
   \   000060   35..         ADDC    A,?V1
   \   000062   FB           MOV     R3,A
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7403         MOV     A,#0x3
   \   00006B   68           XRL     A,R0
   \   00006C   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00006E   7401         MOV     A,#0x1
   \   000070   68           XRL     A,R0
   \   000071   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
   1000            {
   1001              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   7484         MOV     A,#-0x7c
   \   00007B   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1002            }
   1003            else
   1004            {
   1005              // Check source & destination endpoints
   1006              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1007                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1008                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00007E   E5..         MOV     A,?V0
   \   000080   2408         ADD     A,#0x8
   \   000082   F5..         MOV     ?V6,A
   \   000084   E4           CLR     A
   \   000085   35..         ADDC    A,?V1
   \   000087   F5..         MOV     ?V7,A
   \   000089   85..82       MOV     DPL,?V6
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   6024         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000092   74FF         MOV     A,#-0x1
   \   000094   69           XRL     A,R1
   \   000095   601F         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000097   E5..         MOV     A,?V0
   \   000099   2414         ADD     A,#0x14
   \   00009B   F5..         MOV     ?V2,A
   \   00009D   E4           CLR     A
   \   00009E   35..         ADDC    A,?V1
   \   0000A0   F5..         MOV     ?V3,A
   \   0000A2   7403         MOV     A,#0x3
   \   0000A4   68           XRL     A,R0
   \   0000A5   701A         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   0000A7   85..82       MOV     DPL,?V2
   \   0000AA   85..83       MOV     DPH,?V3
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F8           MOV     R0,A
   \   0000AF   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   0000B1   74FF         MOV     A,#-0x1
   \   0000B3   68           XRL     A,R0
   \   0000B4   700B         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1009              {
   1010                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   7482         MOV     A,#-0x7e
   \   0000BE   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1011              }
   1012              else
   1013              {
   1014                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000C1   E5..         MOV     A,?V0
   \   0000C3   2409         ADD     A,#0x9
   \   0000C5   F5..         MOV     ?V4,A
   \   0000C7   E4           CLR     A
   \   0000C8   35..         ADDC    A,?V1
   \   0000CA   F5..         MOV     ?V5,A
   \   0000CC   E5..         MOV     A,?V0
   \   0000CE   240B         ADD     A,#0xb
   \   0000D0   FE           MOV     R6,A
   \   0000D1   E4           CLR     A
   \   0000D2   35..         ADDC    A,?V1
   \   0000D4   FF           MOV     R7,A
   \   0000D5   85..82       MOV     DPL,?V8
   \   0000D8   85..83       MOV     DPH,?V9
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   6421         XRL     A,#0x21
   \   0000DE   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000E2   6003         JZ      $+5
   \   0000E4   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1015                {
   1016                  // Assume the table is full
   1017                  bindStat = ZDP_TABLE_FULL;
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   748C         MOV     A,#-0x74
   \   0000EF   12....       LCALL   ?Subroutine23 & 0xFFFF
   1018          
   1019          #if defined( APP_TP ) || defined( APP_TP2 )
   1020                  // For ZigBee Conformance Testing
   1021                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1022          #endif
   1023                  {
   1024          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1025                    uint16 nwkAddr;
   1026          
   1027                    // Verifies that a valid NWK address exists for the device
   1028                    // before creating a Binding entry. If NWK address does not
   1029                    // exist the request is sent out and the BindReq is saved, to
   1030                    // create the Bind Entry once the NwkAddrRsp is received
   1031                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1032                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \                     ??CrossCallReturnLabel_25:
   \   0000F2   6403         XRL     A,#0x3
   \   0000F4   6003         JZ      $+5
   \   0000F6   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   0000F9                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000F9   7401         MOV     A,#0x1
   \   0000FB   12....       LCALL   ?XSTACK_DISP102_8
   \   0000FE   EE           MOV     A,R6
   \   0000FF   FA           MOV     R2,A
   \   000100   EF           MOV     A,R7
   \   000101   FB           MOV     R3,A
   \   000102   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000105   E9           MOV     A,R1
   \   000106   6003         JZ      $+5
   \   000108   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1033                    {
   1034                      // find an empty bind slot in the pending Bind Req list
   1035                      ZDO_PendingBindReq_t *pPendingBind;
   1036          
   1037                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   00010B                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   00010B   12....       LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   00010E   8A..         MOV     ?V2,R2
   \   000110   8B..         MOV     ?V3,R3
   \   000112   EA           MOV     A,R2
   \   000113   45..         ORL     A,?V3
   \   000115   7003         JNZ     $+5
   \   000117   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1038                      {
   1039                        // copy the received request into the empty slot and all required info
   1040                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   00011A                ; Setup parameters for call to function osal_memcpy
   \   00011A   85....       MOV     ?V4,?V0
   \   00011D   85....       MOV     ?V5,?V1
   \   000120   75..00       MOV     ?V6,#0x0
   \   000123   78..         MOV     R0,#?V4
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000128   7C15         MOV     R4,#0x15
   \   00012A   7D00         MOV     R5,#0x0
   \   00012C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012F   7403         MOV     A,#0x3
   \   000131   12....       LCALL   ?DEALLOC_XSTACK8
   1041          
   1042                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   000134   85..82       MOV     DPL,?V10
   \   000137   85..83       MOV     DPH,?V11
   \   00013A   E5..         MOV     A,?V2
   \   00013C   2415         ADD     A,#0x15
   \   00013E   FC           MOV     R4,A
   \   00013F   E4           CLR     A
   \   000140   35..         ADDC    A,?V3
   \   000142   FD           MOV     R5,A
   \   000143   7409         MOV     A,#0x9
   \   000145   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1043                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   000148   85..82       MOV     DPL,?V12
   \   00014B   85..83       MOV     DPH,?V13
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   C0E0         PUSH    A
   \   000151   E5..         MOV     A,?V2
   \   000153   241E         ADD     A,#0x1e
   \   000155   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000158   D0E0         POP     A
   \   00015A   F0           MOVX    @DPTR,A
   1044                        pPendingBind->transSeq = inMsg->TransSeq;
   \   00015B   85..82       MOV     DPL,?V14
   \   00015E   85..83       MOV     DPH,?V15
   \   000161   E0           MOVX    A,@DPTR
   \   000162   C0E0         PUSH    A
   \   000164   E5..         MOV     A,?V2
   \   000166   241F         ADD     A,#0x1f
   \   000168   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00016B   D0E0         POP     A
   \   00016D   F0           MOVX    @DPTR,A
   1045                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   00016E   E5..         MOV     A,?V2
   \   000170   2420         ADD     A,#0x20
   \   000172   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000175   7405         MOV     A,#0x5
   \   000177   F0           MOVX    @DPTR,A
   1046          
   1047                        // create an entry in Address Manager
   1048                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   000178                ; Setup parameters for call to function bindAddrIndexGet
   \   000178   EE           MOV     A,R6
   \   000179   FA           MOV     R2,A
   \   00017A   EF           MOV     A,R7
   \   00017B   FB           MOV     R3,A
   \   00017C   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   1049          
   1050                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00017F                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00017F   7D00         MOV     R5,#0x0
   \   000181   7C00         MOV     R4,#0x0
   \   000183   7900         MOV     R1,#0x0
   \   000185   EE           MOV     A,R6
   \   000186   FA           MOV     R2,A
   \   000187   EF           MOV     A,R7
   \   000188   FB           MOV     R3,A
   \   000189   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1051          
   1052                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1053                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   00018C                ; Setup parameters for call to function osal_start_timerEx
   \   00018C   90....       MOV     DPTR,#__Constant_3e8
   \   00018F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000192   7A00         MOV     R2,#0x0
   \   000194   7B10         MOV     R3,#0x10
   \   000196   90....       MOV     DPTR,#ZDAppTaskID
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F9           MOV     R1,A
   \   00019B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00019E   7404         MOV     A,#0x4
   \   0001A0   12....       LCALL   ?DEALLOC_XSTACK8
   1054                        return;
   \   0001A3   02....       LJMP    ??ZDO_ProcessBindUnbindReq_9 & 0xFFFF
   1055                      }
   1056                    }
   1057                    // Add Bind entry
   1058                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1059                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0001A6                ; Setup parameters for call to function APSME_BindRequest
   \   0001A6   12....       LCALL   ?Subroutine67 & 0xFFFF
   1060                    {
   1061                      // valid entry
   1062                      bindStat = ZDP_SUCCESS;
   1063          
   1064                      // Notify to save info into NV
   1065                      ZDApp_NVUpdate();
   1066                    }
   1067          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1068                    // Create binding entry first independently of existance of  valid NWK addres
   1069                    // if NWK address does not exist a request is sent out
   1070                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1071                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1072                    {
   1073                      uint16 nwkAddr;
   1074          
   1075                      // valid entry
   1076                      bindStat = ZDP_SUCCESS;
   1077          
   1078                      // Notify to save info into NV
   1079                      ZDApp_NVUpdate();
   1080          
   1081                      // Check for the destination address
   1082                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1083                      {
   1084                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1085                        {
   1086                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1087                        }
   1088                      }
   1089                    }
   1090          #endif
   1091                  }
   1092                }
   \                     ??CrossCallReturnLabel_265:
   \   0001A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AC   EE           MOV     A,R6
   \   0001AD   FC           MOV     R4,A
   \   0001AE   EF           MOV     A,R7
   \   0001AF   FD           MOV     R5,A
   \   0001B0   85..82       MOV     DPL,?V4
   \   0001B3   85..83       MOV     DPH,?V5
   \   0001B6   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0001B9   85..82       MOV     DPL,?V6
   \   0001BC   85..83       MOV     DPH,?V7
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F9           MOV     R1,A
   \   0001C1   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0001C4   7401         MOV     A,#0x1
   \   0001C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C9   E9           MOV     A,R1
   \   0001CA   7036         JNZ     ??ZDO_ProcessBindUnbindReq_8
   \   0001CC   801E         SJMP    ??ZDO_ProcessBindUnbindReq_10
   1093                else // Unbind_req
   1094                {
   1095                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1096                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0001CE                ; Setup parameters for call to function APSME_UnBindRequest
   \   0001CE   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0001D1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D4   EE           MOV     A,R6
   \   0001D5   FC           MOV     R4,A
   \   0001D6   EF           MOV     A,R7
   \   0001D7   FD           MOV     R5,A
   \   0001D8   85..82       MOV     DPL,?V4
   \   0001DB   85..83       MOV     DPH,?V5
   \   0001DE   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0001E1   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   0001E4   7401         MOV     A,#0x1
   \   0001E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E9   E9           MOV     A,R1
   \   0001EA   700D         JNZ     ??ZDO_ProcessBindUnbindReq_11
   1097                  {
   1098                    bindStat = ZDP_SUCCESS;
   \                     ??ZDO_ProcessBindUnbindReq_10:
   \   0001EC   85..82       MOV     DPL,?XSP + 0
   \   0001EF   85..83       MOV     DPH,?XSP + 1
   \   0001F2   E4           CLR     A
   \   0001F3   F0           MOVX    @DPTR,A
   1099          
   1100                    // Notify to save info into NV
   1101                    ZDApp_NVUpdate();
   \   0001F4                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0001F4   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   0001F7   8009         SJMP    ??ZDO_ProcessBindUnbindReq_8
   1102                  }
   1103                  else
   1104                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_11:
   \   0001F9   85..82       MOV     DPL,?XSP + 0
   \   0001FC   85..83       MOV     DPH,?XSP + 1
   \   0001FF   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000201   F0           MOVX    @DPTR,A
   1105                }
   1106              }
   1107            }
   1108          
   1109            // Send back a response message
   1110            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1111                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1112                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000202                ; Setup parameters for call to function ZDP_SendData
   \   000202   85..82       MOV     DPL,?V12
   \   000205   85..83       MOV     DPH,?V13
   \   000208   12....       LCALL   ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00020B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020E   7401         MOV     A,#0x1
   \   000210   12....       LCALL   ?XSTACK_DISP100_8
   \   000213   88..         MOV     ?V0,R0
   \   000215   89..         MOV     ?V1,R1
   \   000217   78..         MOV     R0,#?V0
   \   000219   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021C   85..82       MOV     DPL,?V8
   \   00021F   85..83       MOV     DPH,?V9
   \   000222   E0           MOVX    A,@DPTR
   \   000223   F5..         MOV     ?V0,A
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   4480         ORL     A,#0x80
   \   000229   F5..         MOV     ?V1,A
   \   00022B   78..         MOV     R0,#?V0
   \   00022D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000230   7901         MOV     R1,#0x1
   \   000232   AC..         MOV     R4,?V10
   \   000234   AD..         MOV     R5,?V11
   \   000236   AA..         MOV     R2,?V14
   \   000238   AB..         MOV     R3,?V15
   \   00023A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00023D   7405         MOV     A,#0x5
   \   00023F   12....       LCALL   ?DEALLOC_XSTACK8
   1113          }
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000242   740C         MOV     A,#0xc
   \   000244   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine153_0
   \   000006                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   1114          #endif // REFLECTOR
   1115          
   1116          /*********************************************************************
   1117           * @fn      ZDO_UpdateAddrManager
   1118           *
   1119           * @brief   Update the Address Manager.
   1120           *
   1121           * @param   nwkAddr - network address
   1122           * @param   extAddr - extended address
   1123           *
   1124           * @return  none
   1125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1126          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1127          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1128            AddrMgrEntry_t addrEntry;
   1129          
   1130            // Update the address manager
   1131            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1132            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   1133            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_295:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1134            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1135          }
   \   00002B   740D         MOV     A,#0xd
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   1136          
   1137          /*********************************************************************
   1138           * @fn      ZDO_ProcessServerDiscReq
   1139           *
   1140           * @brief   Process the Server_Discovery_req message.
   1141           *
   1142           * @param   inMsg  - incoming message (request)
   1143           *
   1144           * @return  none
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1147          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine86 & 0xFFFF
   1148            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1149            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_338:
   \   000008   F583         MOV     DPH,A
   \   00000A   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00000D   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   58           ANL     A,R0
   \   000015   F5..         MOV     ?V0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   59           ANL     A,R1
   \   00001A   F5..         MOV     ?V1,A
   1150          
   1151            if ( matchMask )
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   6021         JZ      ??ZDO_ProcessServerDiscReq_0
   1152            {
   1153              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1154                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000022                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002D   12....       LCALL   ?Subroutine92 & 0xFFFF
   1155            }
   \                     ??CrossCallReturnLabel_143:
   \   000030   7C00         MOV     R4,#0x0
   \   000032   EE           MOV     A,R6
   \   000033   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000036   3F           ADDC    A,R7
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00003B   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   1156          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000043   02....       LJMP    ??Subroutine149_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   2402         ADD     A,#0x2
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine167_0
   \   000004                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000003   F8           MOV     R0,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   22           RET
   1157          
   1158          /*********************************************************************
   1159           * Call Back Functions from APS  - API
   1160           */
   1161          
   1162          /*********************************************************************
   1163           * @fn          ZDO_EndDeviceTimeoutCB
   1164           *
   1165           * @brief       This function handles the binding timer for the End
   1166           *              Device Bind command.
   1167           *
   1168           * @param       none
   1169           *
   1170           * @return      none
   1171           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1172          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1173          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1174          #if defined ( REFLECTOR )
   1175            byte stat;
   1176            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1177            {
   1178              stat = ZDO_EDBind->status;
   1179          
   1180              // Send the response message to the first sent
   1181              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1182                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2416         ADD     A,#0x16
   \   000019   F582         MOV     DPL,A
   \   00001B   E4           CLR     A
   \   00001C   38           ADDC    A,R0
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000029   F583         MOV     DPH,A
   \   00002B   8882         MOV     DPL,R0
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00003A   C8           XCH     A,R0
   \   00003B   2415         ADD     A,#0x15
   \   00003D   F582         MOV     DPL,A
   \   00003F   E4           CLR     A
   \   000040   38           ADDC    A,R0
   \   000041   F583         MOV     DPH,A
   \   000043   12....       LCALL   ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP100_8
   \   00004E   88..         MOV     ?V0,R0
   \   000050   89..         MOV     ?V1,R1
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..20       MOV     ?V0,#0x20
   \   00005A   75..80       MOV     ?V1,#-0x80
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   7901         MOV     R1,#0x1
   \   000064   90....       MOV     DPTR,#ZDO_EDBind
   \   000067   E0           MOVX    A,@DPTR
   \   000068   29           ADD     A,R1
   \   000069   FC           MOV     R4,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   FD           MOV     R5,A
   \   00006F   7406         MOV     A,#0x6
   \   000071   12....       LCALL   ?XSTACK_DISP101_8
   \   000074   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000077   7405         MOV     A,#0x5
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007C                ; Setup parameters for call to function HalLcdWriteString
   \   00007C   7901         MOV     R1,#0x1
   \   00007E   7A..         MOV     R2,#`?<Constant "End Device Bind">` & 0xff
   \   000080   7B..         MOV     R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   000082   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   7902         MOV     R1,#0x2
   \   00008E   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_1
   \   000090                ; Setup parameters for call to function HalLcdWriteString
   \   000090   7A..         MOV     R2,#`?<Constant "Success Sent">` & 0xff
   \   000092   7B..         MOV     R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   000094   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   000096                ; Setup parameters for call to function HalLcdWriteString
   \   000096   7A..         MOV     R2,#`?<Constant "Timeout">` & 0xff
   \   000098   7B..         MOV     R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   00009A   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1183          
   1184              ZDO_RemoveEndDeviceBind();
   \   00009D   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A0   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   1185            }
   \                     ??CrossCallReturnLabel_286:
   \   0000A3   602A         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   C8           XCH     A,R0
   \   0000A7   2410         ADD     A,#0x10
   \   0000A9   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   0000AC   6003         JZ      ??ZDO_EndDeviceTimeoutCB_3
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   0000B1   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   0000B4   C8           XCH     A,R0
   \   0000B5   2413         ADD     A,#0x13
   \   0000B7   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   0000BA   6003         JZ      ??ZDO_EndDeviceTimeoutCB_4
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000BF                ; Setup parameters for call to function osal_mem_free
   \   0000BF   90....       MOV     DPTR,#ZDO_EDBind
   \   0000C2   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0000C5   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C8   90....       MOV     DPTR,#ZDO_EDBind
   \   0000CB   E4           CLR     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   F0           MOVX    @DPTR,A
   1186          #endif  // REFLECTOR
   1187          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000CF   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine154_0
   \   000006                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   90....       MOV     DPTR,#ZDO_EDBind
   \   000003                REQUIRE ??Subroutine155_0
   \   000003                ; // Fall through to label ??Subroutine155_0
   1188          
   1189          /*********************************************************************
   1190           * Optional Management Messages
   1191           */
   1192          
   1193          /*********************************************************************
   1194           * @fn          ZDO_ProcessMgmtLqiReq
   1195           *
   1196           * @brief       This function handles parsing the incoming Management
   1197           *              LQI request and generate the response.
   1198           *
   1199           *   Note:      This function will limit the number of items returned
   1200           *              to ZDO_MAX_LQI_ITEMS items.
   1201           *
   1202           * @param       inMsg - incoming message (request)
   1203           *
   1204           * @return      none
   1205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1206          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V14,R2
   \   00000C   8B..         MOV     ?V15,R3
   1208            byte x;
   1209            byte index;
   1210            byte numItems;
   1211            byte maxItems;
   1212            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V12,#0x0
   \   000011   75..00       MOV     ?V13,#0x0
   1213            ZDP_MgmtLqiItem_t* item;
   1214            neighborEntry_t    entry;
   1215            byte aItems;
   1216            associated_devices_t *aDevice;
   1217            AddrMgrEntry_t  nwkEntry;
   1218            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000017   35..         ADDC    A,?V15
   \   000019   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00001C   F5..         MOV     ?V4,A
   1219          
   1220            // Get the number of neighbor items
   1221            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   00001E                ; Setup parameters for call to function NLME_GetRequest
   \   00001E   AC..         MOV     R4,?XSP + 0
   \   000020   AD..         MOV     R5,?XSP + 1
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   799C         MOV     R1,#-0x64
   \   000028   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1222          
   1223            // Get the number of associated items
   1224            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002B                ; Setup parameters for call to function AssocCount
   \   00002B   7A04         MOV     R2,#0x4
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000032   EA           MOV     A,R2
   \   000033   F5..         MOV     ?V2,A
   1225          
   1226            // Total number of items
   1227            maxItems += aItems;
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2A           ADD     A,R2
   \   00003D   F0           MOVX    @DPTR,A
   1228          
   1229            // Start with the supplied index
   1230            if ( maxItems > StartIndex )
   \   00003E   F8           MOV     R0,A
   \   00003F   E5..         MOV     A,?V4
   \   000041   C3           CLR     C
   \   000042   98           SUBB    A,R0
   \   000043   4003         JC      $+5
   \   000045   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1231            {
   1232              numItems = maxItems - StartIndex;
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C3           CLR     C
   \   00004A   95..         SUBB    A,?V4
   \   00004C   F5..         MOV     ?V1,A
   1233          
   1234              // limit the size of the list
   1235              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   00004E   C3           CLR     C
   \   00004F   9404         SUBB    A,#0x4
   \   000051   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1236                numItems = ZDO_MAX_LQI_ITEMS;
   \   000053   75..03       MOV     ?V1,#0x3
   1237          
   1238              // Allocate the memory to build the table
   1239              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1240                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   E5..         MOV     A,?V1
   \   000058   75F01A       MOV     B,#0x1a
   \   00005B   A4           MUL     AB
   \   00005C   FA           MOV     R2,A
   \   00005D   ABF0         MOV     R3,B
   \   00005F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000062   8A..         MOV     ?V12,R2
   \   000064   8B..         MOV     ?V13,R3
   1241          
   1242              if ( table != NULL )
   \   000066   EA           MOV     A,R2
   \   000067   45..         ORL     A,?V13
   \   000069   7003         JNZ     $+5
   \   00006B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1243              {
   1244                x = 0;
   \   00006E   75..00       MOV     ?V3,#0x0
   1245                item = table;
   \   000071   AE..         MOV     R6,?V12
   \   000073   AF..         MOV     R7,?V13
   1246                index = StartIndex;
   \   000075   85....       MOV     ?V0,?V4
   \   000078   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1247          
   1248                // Loop through associated items and build list
   1249                for ( ; x < numItems; x++ )
   1250                {
   1251                  if ( index < aItems )
   1252                  {
   1253                    // get next associated device
   1254                    aDevice = AssocFindDevice( index++ );
   1255          
   1256                    // set basic fields
   1257                    item->panID   = _NIB.nwkPanId;
   1258                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1259                    item->nwkAddr = aDevice->shortAddr;
   1260                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1261                    item->depth   = 0xFF;
   1262                    item->lqi     = aDevice->linkInfo.rxLqi;
   1263          
   1264                    // set extented address
   1265                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1266                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1267          
   1268                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1269                    {
   1270                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1271                    }
   1272                    else
   1273                    {
   1274                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007B                ; Setup parameters for call to function osal_memset
   \   00007B   7C08         MOV     R4,#0x8
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   79FF         MOV     R1,#-0x1
   \   000081   AA..         MOV     R2,?V10
   \   000083   AB..         MOV     R3,?V11
   \   000085   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1275                    }
   1276          
   1277                    // use association info to set other fields
   1278                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000088   E5..         MOV     A,?V6
   \   00008A   2404         ADD     A,#0x4
   \   00008C   F8           MOV     R0,A
   \   00008D   E4           CLR     A
   \   00008E   35..         ADDC    A,?V7
   \   000090   F9           MOV     R1,A
   \   000091   EE           MOV     A,R6
   \   000092   2416         ADD     A,#0x16
   \   000094   FA           MOV     R2,A
   \   000095   E4           CLR     A
   \   000096   3F           ADDC    A,R7
   \   000097   FB           MOV     R3,A
   \   000098   EE           MOV     A,R6
   \   000099   2415         ADD     A,#0x15
   \   00009B   FC           MOV     R4,A
   \   00009C   E4           CLR     A
   \   00009D   3F           ADDC    A,R7
   \   00009E   FD           MOV     R5,A
   \   00009F   EE           MOV     A,R6
   \   0000A0   2414         ADD     A,#0x14
   \   0000A2   F5..         MOV     ?V10,A
   \   0000A4   E4           CLR     A
   \   0000A5   3F           ADDC    A,R7
   \   0000A6   F5..         MOV     ?V11,A
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   702E         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1279                    {
   1280                      if (  aDevice->shortAddr == 0 )
   \   0000AF   85..82       MOV     DPL,?V6
   \   0000B2   85..83       MOV     DPH,?V7
   \   0000B5   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0000B8   85..82       MOV     DPL,?V10
   \   0000BB   85..83       MOV     DPH,?V11
   \   0000BE   7004         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1281                      {
   1282                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   1283                        item->depth = 0;
   \   0000C2   8008         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1284                      }
   1285                      else
   1286                      {
   1287                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   F0           MOVX    @DPTR,A
   1288                        item->depth = _NIB.nodeDepth - 1;
   \   0000C7   90....       MOV     DPTR,#_NIB + 52
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   14           DEC     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000CC   85..82       MOV     DPL,?V8
   \   0000CF   85..83       MOV     DPH,?V9
   1289                      }
   1290          
   1291                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1292                      item->relation = ZDP_MGMT_REL_PARENT;
   1293                    }
   \   0000D2   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0000DA   E4           CLR     A
   \   0000DB   8033         SJMP    ??ZDO_ProcessMgmtLqiReq_9
   1294                    else
   1295                    {
   1296                      // If not parent, then it's a child
   1297                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000DD   90....       MOV     DPTR,#_NIB + 52
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   04           INC     A
   \   0000E2   85..82       MOV     DPL,?V8
   \   0000E5   85..83       MOV     DPH,?V9
   \   0000E8   12....       LCALL   ?Subroutine42 & 0xFFFF
   1298          
   1299                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_64:
   \   0000EB   C3           CLR     C
   \   0000EC   9403         SUBB    A,#0x3
   \   0000EE   85..82       MOV     DPL,?V10
   \   0000F1   85..83       MOV     DPH,?V11
   \   0000F4   4003         JC      $+5
   \   0000F6   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1300                      {
   1301                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000F9   7402         MOV     A,#0x2
   \   0000FB   12....       LCALL   ?Subroutine42 & 0xFFFF
   1302          
   1303                        if ( aDevice->nodeRelation == CHILD_RFD )
   1304                        {
   1305                          item->rxOnIdle = FALSE;
   1306                        }
   1307                        else
   1308                        {
   1309                          item->rxOnIdle = TRUE;
   1310                        }
   1311                      }
   \                     ??CrossCallReturnLabel_65:
   \   0000FE   6401         XRL     A,#0x1
   \   000100   7003         JNZ     $+5
   \   000102   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1312                      else
   1313                      {
   1314                        item->devType = ZDP_MGMT_DT_ROUTER;
   1315          
   1316                        if ( aDevice->nodeRelation == CHILD_FFD )
   1317                        {
   1318                          item->rxOnIdle = FALSE;
   1319                        }
   1320                        else
   1321                        {
   1322                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000105   8C82         MOV     DPL,R4
   \   000107   8D83         MOV     DPH,R5
   \   000109   7401         MOV     A,#0x1
   1323                        }
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   00010B   12....       LCALL   ?Subroutine138 & 0xFFFF
   1324                      }
   1325          
   1326                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_232:
   \   00010E   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   000110   F0           MOVX    @DPTR,A
   1327                    }
   1328          
   1329                    item++;
   \   000111   EE           MOV     A,R6
   \   000112   241A         ADD     A,#0x1a
   \   000114   FE           MOV     R6,A
   \   000115   5001         JNC     ??ZDO_ProcessMgmtLqiReq_14
   \   000117   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   000118   05..         INC     ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   00011A   E5..         MOV     A,?V3
   \   00011C   C3           CLR     C
   \   00011D   95..         SUBB    A,?V1
   \   00011F   4003         JC      $+5
   \   000121   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   000124   E5..         MOV     A,?V0
   \   000126   C3           CLR     C
   \   000127   95..         SUBB    A,?V2
   \   000129   4003         JC      $+5
   \   00012B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   \   00012E                ; Setup parameters for call to function AssocFindDevice
   \   00012E   AA..         MOV     R2,?V0
   \   000130   7B00         MOV     R3,#0x0
   \   000132   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   000135   8A..         MOV     ?V6,R2
   \   000137   8B..         MOV     ?V7,R3
   \   000139   05..         INC     ?V0
   \   00013B   90....       MOV     DPTR,#_NIB + 33
   \   00013E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000141   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000144   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000147   EE           MOV     A,R6
   \   000148   2412         ADD     A,#0x12
   \   00014A   F582         MOV     DPL,A
   \   00014C   E4           CLR     A
   \   00014D   3F           ADDC    A,R7
   \   00014E   F583         MOV     DPH,A
   \   000150   E8           MOV     A,R0
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \   000153   E9           MOV     A,R1
   \   000154   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000157   F5..         MOV     ?V8,A
   \   000159   E4           CLR     A
   \   00015A   3F           ADDC    A,R7
   \   00015B   F5..         MOV     ?V9,A
   \   00015D   85..82       MOV     DPL,?V8
   \   000160   F583         MOV     DPH,A
   \   000162   74FF         MOV     A,#-0x1
   \   000164   F0           MOVX    @DPTR,A
   \   000165   85..82       MOV     DPL,?V6
   \   000168   85..83       MOV     DPH,?V7
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00017B   D0E0         POP     A
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E   7401         MOV     A,#0x1
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   E4           CLR     A
   \   000184   F0           MOVX    @DPTR,A
   \   000185   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000188   7402         MOV     A,#0x2
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   E8           MOV     A,R0
   \   00018E   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000191   EE           MOV     A,R6
   \   000192   240A         ADD     A,#0xa
   \   000194   F5..         MOV     ?V10,A
   \   000196   E4           CLR     A
   \   000197   3F           ADDC    A,R7
   \   000198   F5..         MOV     ?V11,A
   \   00019A                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00019A   7401         MOV     A,#0x1
   \   00019C   12....       LCALL   ?XSTACK_DISP101_8
   \   00019F   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0001A2   E9           MOV     A,R1
   \   0001A3   6401         XRL     A,#0x1
   \   0001A5   6003         JZ      $+5
   \   0001A7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   0001AA                ; Setup parameters for call to function sAddrExtCpy
   \   0001AA   7404         MOV     A,#0x4
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   AC82         MOV     R4,DPL
   \   0001B1   AD83         MOV     R5,DPH
   \   0001B3   AA..         MOV     R2,?V10
   \   0001B5   AB..         MOV     R3,?V11
   \   0001B7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001BA   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001BD   7401         MOV     A,#0x1
   \   0001BF   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001C2   6403         XRL     A,#0x3
   \   0001C4   6003         JZ      $+5
   \   0001C6   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001C9   8C82         MOV     DPL,R4
   \   0001CB   8D83         MOV     DPH,R5
   \   0001CD   E4           CLR     A
   \   0001CE   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   1330                  }
   1331                  else
   1332                  {
   1333                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001D1   E5..         MOV     A,?V2
   \   0001D3   C3           CLR     C
   \   0001D4   95..         SUBB    A,?V4
   \   0001D6   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1334                      // Start with 1st neighbor
   1335                      index = 0;
   \   0001D8   75..00       MOV     ?V0,#0x0
   \   0001DB   801F         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1336                    else
   1337                      // Start with >1st neighbor
   1338                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001DD   E5..         MOV     A,?V4
   \   0001DF   C3           CLR     C
   \   0001E0   95..         SUBB    A,?V2
   \   0001E2   F5..         MOV     ?V0,A
   \   0001E4   8016         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1339                    break;
   1340                  }
   1341                }
   1342          
   1343                // Loop through neighbor items and finish list
   1344                for ( ; x < numItems; x++ )
   1345                {
   1346                  // Add next neighbor table item
   1347                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1348          
   1349                  // set ZDP_MgmtLqiItem_t fields
   1350                  item->panID    = entry.panId;
   1351                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1352                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1353                  item->nwkAddr  = entry.neighborAddress;
   1354                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1355                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1356                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1357                  item->depth    = 0xFF;
   1358                  item->lqi      = entry.linkInfo.rxLqi;
   1359          
   1360                  if ( item->nwkAddr == 0 )
   1361                  {
   1362                    item->devType = ZDP_MGMT_DT_COORD;
   1363                  }
   1364                  else
   1365                  {
   1366                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001E6   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0001E8   F0           MOVX    @DPTR,A
   1367                  }
   1368          
   1369                  item++;
   \   0001E9   EE           MOV     A,R6
   \   0001EA   241A         ADD     A,#0x1a
   \   0001EC   FE           MOV     R6,A
   \   0001ED   5001         JNC     ??ZDO_ProcessMgmtLqiReq_21
   \   0001EF   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0001F0   05..         INC     ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001F2   E5..         MOV     A,?V3
   \   0001F4   C3           CLR     C
   \   0001F5   95..         SUBB    A,?V1
   \   0001F7   4003         JC      $+5
   \   0001F9   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001FC                ; Setup parameters for call to function NLME_GetRequest
   \   0001FC   740E         MOV     A,#0xe
   \   0001FE   12....       LCALL   ?XSTACK_DISP102_8
   \   000201   AA..         MOV     R2,?V0
   \   000203   7B00         MOV     R3,#0x0
   \   000205   7987         MOV     R1,#-0x79
   \   000207   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   00020A   05..         INC     ?V0
   \   00020C   7418         MOV     A,#0x18
   \   00020E   12....       LCALL   ?XSTACK_DISP0_8
   \   000211   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000214   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000217                ; Setup parameters for call to function osal_memset
   \   000217   7C08         MOV     R4,#0x8
   \   000219   7D00         MOV     R5,#0x0
   \   00021B   79FF         MOV     R1,#-0x1
   \   00021D   EE           MOV     A,R6
   \   00021E   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000221   3F           ADDC    A,R7
   \   000222   FB           MOV     R3,A
   \   000223   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000226   EE           MOV     A,R6
   \   000227   2412         ADD     A,#0x12
   \   000229   F8           MOV     R0,A
   \   00022A   E4           CLR     A
   \   00022B   3F           ADDC    A,R7
   \   00022C   F9           MOV     R1,A
   \   00022D   740E         MOV     A,#0xe
   \   00022F   12....       LCALL   ?XSTACK_DISP0_8
   \   000232   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000235   8882         MOV     DPL,R0
   \   000237   8983         MOV     DPH,R1
   \   000239   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00023C   EE           MOV     A,R6
   \   00023D   2415         ADD     A,#0x15
   \   00023F   F582         MOV     DPL,A
   \   000241   E4           CLR     A
   \   000242   3F           ADDC    A,R7
   \   000243   F583         MOV     DPH,A
   \   000245   7402         MOV     A,#0x2
   \   000247   F0           MOVX    @DPTR,A
   \   000248   EE           MOV     A,R6
   \   000249   2416         ADD     A,#0x16
   \   00024B   F582         MOV     DPL,A
   \   00024D   E4           CLR     A
   \   00024E   3F           ADDC    A,R7
   \   00024F   F583         MOV     DPH,A
   \   000251   7403         MOV     A,#0x3
   \   000253   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000256   F582         MOV     DPL,A
   \   000258   E4           CLR     A
   \   000259   3F           ADDC    A,R7
   \   00025A   F583         MOV     DPH,A
   \   00025C   74FF         MOV     A,#-0x1
   \   00025E   F0           MOVX    @DPTR,A
   \   00025F   741D         MOV     A,#0x1d
   \   000261   12....       LCALL   ?XSTACK_DISP0_8
   \   000264   E0           MOVX    A,@DPTR
   \   000265   C0E0         PUSH    A
   \   000267   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00026A   D0E0         POP     A
   \   00026C   F0           MOVX    @DPTR,A
   \   00026D   EE           MOV     A,R6
   \   00026E   2414         ADD     A,#0x14
   \   000270   FA           MOV     R2,A
   \   000271   E4           CLR     A
   \   000272   3F           ADDC    A,R7
   \   000273   FB           MOV     R3,A
   \   000274   8882         MOV     DPL,R0
   \   000276   8983         MOV     DPH,R1
   \   000278   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   00027B   8A82         MOV     DPL,R2
   \   00027D   8B83         MOV     DPH,R3
   \   00027F   6003         JZ      $+5
   \   000281   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   \   000284   E4           CLR     A
   \   000285   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_20 & 0xFFFF
   1370                }
   1371              }
   1372            }
   1373            else
   1374            {
   1375              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000288   75..00       MOV     ?V1,#0x0
   1376            }
   1377          
   1378            // Send response
   1379            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1380                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00028B                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00028B   75..00       MOV     ?V2,#0x0
   \   00028E   78..         MOV     R0,#?V2
   \   000290   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000293   78..         MOV     R0,#?V12
   \   000295   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000298   78..         MOV     R0,#?V1
   \   00029A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029D   E5..         MOV     A,?V4
   \   00029F   F5..         MOV     ?V1,A
   \   0002A1   78..         MOV     R0,#?V1
   \   0002A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A6   7405         MOV     A,#0x5
   \   0002A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AB   E0           MOVX    A,@DPTR
   \   0002AC   FD           MOV     R5,A
   \   0002AD   7C00         MOV     R4,#0x0
   \   0002AF   E5..         MOV     A,?V14
   \   0002B1   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0002B4   35..         ADDC    A,?V15
   \   0002B6   FB           MOV     R3,A
   \   0002B7   E5..         MOV     A,?V14
   \   0002B9   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   0002BC   35..         ADDC    A,?V15
   \   0002BE   F583         MOV     DPH,A
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   F9           MOV     R1,A
   \   0002C2   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   0002C5   7405         MOV     A,#0x5
   \   0002C7   12....       LCALL   ?DEALLOC_XSTACK8
   1381          
   1382            if ( table )
   \   0002CA   E5..         MOV     A,?V12
   \   0002CC   45..         ORL     A,?V13
   \   0002CE   6007         JZ      ??ZDO_ProcessMgmtLqiReq_22
   1383            {
   1384              osal_mem_free( table );
   \   0002D0                ; Setup parameters for call to function osal_mem_free
   \   0002D0   AA..         MOV     R2,?V12
   \   0002D2   AB..         MOV     R3,?V13
   \   0002D4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1385            }
   1386          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   0002D7   7425         MOV     A,#0x25
   \   0002D9                REQUIRE ?Subroutine5
   \   0002D9                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   3F           ADDC    A,R7
   \   000016   FB           MOV     R3,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2418         ADD     A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine163_0
   \   000002                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   85..82       MOV     DPL,?V6
   \   000003   85..83       MOV     DPH,?V7
   \   000006                REQUIRE ??Subroutine169_0
   \   000006                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   1387          
   1388          /*********************************************************************
   1389           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1390           *
   1391           * @brief       This function handles parsing the incoming Management
   1392           *              Network Discover request and starts the request.
   1393           *
   1394           * @param       inMsg - incoming message (request)
   1395           *
   1396           * @return      none
   1397           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1398          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1399          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine90 & 0xFFFF
   1400            NLME_ScanFields_t scan;
   1401            uint8             index;
   1402            uint8             *msg;
   1403          
   1404            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_331:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine63 & 0xFFFF
   1405            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_97:
   \   000012   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000015   EA           MOV     A,R2
   \   000016   F8           MOV     R0,A
   \   000017   EB           MOV     A,R3
   \   000018   F9           MOV     R1,A
   \   000019   EC           MOV     A,R4
   \   00001A   FA           MOV     R2,A
   \   00001B   ED           MOV     A,R5
   \   00001C   FB           MOV     R3,A
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   12....       LCALL   ?XSTORE_R0123
   1406            msg += 4;
   1407            scan.duration = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   12....       LCALL   ?Subroutine31 & 0xFFFF
   1408            index         = *msg;
   \                     ??CrossCallReturnLabel_44:
   \   00003B   F8           MOV     R0,A
   1409            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7401         MOV     A,#0x1
   \   000043   F0           MOVX    @DPTR,A
   1410            scan.scanApp  = NLME_DISC_SCAN;
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   1411          
   1412            // Save off the information to be used for the response
   1413            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004C   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004F   F0           MOVX    @DPTR,A
   1414            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000053   04           INC     A
   \   000054   12....       LCALL   ?Subroutine35 & 0xFFFF
   1415            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_53:
   \   000057   FA           MOV     R2,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FB           MOV     R3,A
   \   00005B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00005E   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   1416            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_297:
   \   000061   E8           MOV     A,R0
   \   000062   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000065   F0           MOVX    @DPTR,A
   1417            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000066   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006D   F0           MOVX    @DPTR,A
   1418          
   1419            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00006E                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00006E   AA..         MOV     R2,?XSP + 0
   \   000070   AB..         MOV     R3,?XSP + 1
   \   000072   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000075   E9           MOV     A,R1
   \   000076   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1420            {
   1421              NLME_NwkDiscTerm();
   \   000078                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000078   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1422          
   1423              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1424            }
   1425          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00007B   7407         MOV     A,#0x7
   \   00007D   02....       LJMP    ??Subroutine148_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004                REQUIRE ??Subroutine165_0
   \   000004                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005   7904         MOV     R1,#0x4
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET
   1426          
   1427          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1428          /*********************************************************************
   1429           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1430           *
   1431           * @brief       This function finishes the processing of the Management
   1432           *              Network Discover Request and generates the response.
   1433           *
   1434           *   Note:      This function will limit the number of items returned
   1435           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1436           *
   1437           * @param       ResultCountSrcAddr - source of the request
   1438           * @param       msg - pointer to incoming message
   1439           * @param       SecurityUse -
   1440           *
   1441           * @return      none
   1442           */
   1443          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1444          {
   1445            byte count, i, ResultCount = 0;
   1446            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1447          
   1448            NetworkList = nwk_getNwkDescList();
   1449          
   1450            // Count the number of nwk descriptors in the list
   1451            pList = nwk_getNwkDescList();
   1452            while (pList)
   1453            {
   1454              ResultCount++;
   1455              pList = pList->nextDesc;
   1456            }
   1457          
   1458            if ( ZSTACK_ROUTER_BUILD )
   1459            {
   1460              // Look for my PanID.
   1461              pList = nwk_getNwkDescList();
   1462              while ( pList )
   1463              {
   1464                if ( pList->panId == _NIB.nwkPanId )
   1465                {
   1466                  break;
   1467                }
   1468          
   1469          
   1470                if ( !pList->nextDesc )
   1471                {
   1472                  break;
   1473                }
   1474                pList = pList->nextDesc;
   1475              }
   1476          
   1477          
   1478              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1479              // prepend it.
   1480              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1481              {
   1482                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1483                if ( newDesc )
   1484                {
   1485                  byte pJoin;
   1486          
   1487                  newDesc->panId = _NIB.nwkPanId;
   1488                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1489                  newDesc->version = NLME_GetProtocolVersion();
   1490                  newDesc->stackProfile = zgStackProfile;
   1491          
   1492                  //Extended PanID
   1493                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1494          
   1495                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1496                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1497                                                     INVALID_NODE_ADDR);
   1498          
   1499                  newDesc->nextDesc = NetworkList;
   1500                  NetworkList = newDesc;
   1501                  ResultCount++;
   1502                }
   1503              }
   1504            }
   1505          
   1506            // Calc the count and apply a max count.
   1507            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1508            {
   1509              count = 0;
   1510            }
   1511            else
   1512            {
   1513              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1514              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1515              {
   1516                count = ZDO_MAX_NWKDISC_ITEMS;
   1517              }
   1518          
   1519              // Move the list pointer up to the start index.
   1520              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1521              {
   1522                NetworkList = NetworkList->nextDesc;
   1523              }
   1524            }
   1525          
   1526            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1527                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1528                                zdappMgmtNwkDiscStartIndex,
   1529                                count,
   1530                                NetworkList,
   1531                                false );
   1532          
   1533            if ( ZSTACK_ROUTER_BUILD )
   1534            {
   1535              if ( newDesc != NULL )
   1536              {
   1537                osal_mem_free( newDesc );
   1538              }
   1539            }
   1540          
   1541            NLME_NwkDiscTerm();
   1542          }
   1543          #endif
   1544          
   1545          /*********************************************************************
   1546           * @fn          ZDO_ProcessMgmtRtgReq
   1547           *
   1548           * @brief       This function finishes the processing of the Management
   1549           *              Routing Request and generates the response.
   1550           *
   1551           *   Note:      This function will limit the number of items returned
   1552           *              to ZDO_MAX_RTG_ITEMS items.
   1553           *
   1554           * @param       inMsg - incoming message (request)
   1555           *
   1556           * @return      none
   1557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1558          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1559          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1560            byte x;
   1561            byte maxNumItems;
   1562            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1563            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V6,R6
   \   000012   8E..         MOV     ?V7,R6
   1564            rtgItem_t *pList;
   1565            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000017   35..         ADDC    A,?V3
   \   000019   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00001C   FF           MOV     R7,A
   1566          
   1567            // Get the number of table items
   1568            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001D                ; Setup parameters for call to function NLME_GetRequest
   \   00001D   AC..         MOV     R4,?XSP + 0
   \   00001F   AD..         MOV     R5,?XSP + 1
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7B00         MOV     R3,#0x0
   \   000025   799D         MOV     R1,#-0x63
   \   000027   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1569          
   1570            if ( maxNumItems > StartIndex )
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   EF           MOV     A,R7
   \   000033   C3           CLR     C
   \   000034   98           SUBB    A,R0
   \   000035   506E         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1571            {
   1572              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C3           CLR     C
   \   000039   9F           SUBB    A,R7
   \   00003A   FE           MOV     R6,A
   1573          
   1574              // limit the size of the list
   1575              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003B   C3           CLR     C
   \   00003C   940B         SUBB    A,#0xb
   \   00003E   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1576              {
   1577                numItems = ZDO_MAX_RTG_ITEMS;
   \   000040   7E0A         MOV     R6,#0xa
   1578              }
   1579          
   1580              // Allocate the memory to build the table
   1581              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   EE           MOV     A,R6
   \   000043   75F007       MOV     B,#0x7
   \   000046   A4           MUL     AB
   \   000047   FA           MOV     R2,A
   \   000048   ABF0         MOV     R3,B
   \   00004A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004D   8A..         MOV     ?V0,R2
   \   00004F   8B..         MOV     ?V1,R3
   \   000051   8A..         MOV     ?V6,R2
   \   000053   8B..         MOV     ?V7,R3
   1582          
   1583              if ( pBuf != NULL )
   \   000055   EA           MOV     A,R2
   \   000056   45..         ORL     A,?V7
   \   000058   6049         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1584              {
   1585                // Convert buffer to list
   1586                pList = (rtgItem_t *)pBuf;
   1587          
   1588                // Loop through items and build list
   1589                for ( x = 0; x < numItems; x++ )
   \   00005A   75..00       MOV     ?V4,#0x0
   \   00005D   800F         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1590                {
   1591                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1592          
   1593                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1594                  switch( pList->status )
   1595                  {
   1596                    case RT_ACTIVE:
   1597                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1598                      break;
   1599          
   1600                    case RT_DISC:
   1601                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1602                      break;
   1603          
   1604                    case RT_LINK_FAIL:
   1605                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1606                      break;
   1607          
   1608                    case RT_INIT:
   1609                    case RT_REPAIR:
   1610                    default:
   1611                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   00005F   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000061   F0           MOVX    @DPTR,A
   1612                      break;
   1613                  }
   1614          
   1615                  // Increment pointer to next record
   1616                  pList++;
   \   000062   E5..         MOV     A,?V0
   \   000064   2407         ADD     A,#0x7
   \   000066   F5..         MOV     ?V0,A
   \   000068   5002         JNC     ??ZDO_ProcessMgmtRtgReq_6
   \   00006A   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00006C   05..         INC     ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00006E   E5..         MOV     A,?V4
   \   000070   C3           CLR     C
   \   000071   9E           SUBB    A,R6
   \   000072   5031         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000074                ; Setup parameters for call to function NLME_GetRequest
   \   000074   AC..         MOV     R4,?V0
   \   000076   AD..         MOV     R5,?V1
   \   000078   E5..         MOV     A,?V4
   \   00007A   2F           ADD     A,R7
   \   00007B   FA           MOV     R2,A
   \   00007C   E4           CLR     A
   \   00007D   3400         ADDC    A,#0x0
   \   00007F   FB           MOV     R3,A
   \   000080   798B         MOV     R1,#-0x75
   \   000082   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000085   E5..         MOV     A,?V0
   \   000087   2405         ADD     A,#0x5
   \   000089   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   14           DEC     A
   \   00008E   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   000090   14           DEC     A
   \   000091   6008         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   000093   14           DEC     A
   \   000094   6009         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   000096   80C7         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   000098   E4           CLR     A
   \   000099   80C6         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   00009B   7401         MOV     A,#0x1
   \   00009D   80C2         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   80BE         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1617                }
   1618              }
   1619              else
   1620              {
   1621                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000A3   7E00         MOV     R6,#0x0
   1622              }
   1623            }
   1624          
   1625            // Send response
   1626            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1627                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000A5                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000A5   75..00       MOV     ?V0,#0x0
   \   0000A8   78..         MOV     R0,#?V0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   78..         MOV     R0,#?V6
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   EE           MOV     A,R6
   \   0000B3   F5..         MOV     ?V0,A
   \   0000B5   78..         MOV     R0,#?V0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F5..         MOV     ?V0,A
   \   0000BD   78..         MOV     R0,#?V0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   7405         MOV     A,#0x5
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FD           MOV     R5,A
   \   0000C9   7C00         MOV     R4,#0x0
   \   0000CB   E5..         MOV     A,?V2
   \   0000CD   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   0000D0   35..         ADDC    A,?V3
   \   0000D2   FB           MOV     R3,A
   \   0000D3   E5..         MOV     A,?V2
   \   0000D5   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0000D8   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F9           MOV     R1,A
   \   0000DD   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   0000E0   7405         MOV     A,#0x5
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   1628          
   1629            if ( pBuf != NULL )
   \   0000E5   E5..         MOV     A,?V6
   \   0000E7   45..         ORL     A,?V7
   \   0000E9   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1630            {
   1631              osal_mem_free( pBuf );
   \   0000EB                ; Setup parameters for call to function osal_mem_free
   \   0000EB   AA..         MOV     R2,?V6
   \   0000ED   AB..         MOV     R3,?V7
   \   0000EF   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1632            }
   1633          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000F2   7401         MOV     A,#0x1
   \   0000F4                REQUIRE ?Subroutine9
   \   0000F4                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine168_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine162_0
   \   000003                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1634          
   1635          /*********************************************************************
   1636           * @fn          ZDO_ProcessMgmtBindReq
   1637           *
   1638           * @brief       This function finishes the processing of the Management
   1639           *              Bind Request and generates the response.
   1640           *
   1641           *   Note:      This function will limit the number of items returned
   1642           *              to ZDO_MAX_BIND_ITEMS items.
   1643           *
   1644           * @param       inMsg - incoming message (request)
   1645           *
   1646           * @return      none
   1647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1648          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1650          #if defined ( REFLECTOR )
   1651            byte x;
   1652            uint16 maxNumItems;
   1653            uint16 numItems;
   1654            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V8,#0x0
   \   000011   75..00       MOV     ?V9,#0x0
   1655            apsBindingItem_t *pList;
   1656            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000017   35..         ADDC    A,?V5
   \   000019   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00001C   F5..         MOV     ?V2,A
   1657            uint8 status;
   1658          
   1659            // Get the number of table items
   1660            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   00001E                ; Setup parameters for call to function APSME_GetRequest
   \   00001E   AC..         MOV     R4,?XSP + 0
   \   000020   AD..         MOV     R5,?XSP + 1
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   79A3         MOV     R1,#-0x5d
   \   000028   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1661          
   1662            if ( maxNumItems > StartIndex )
   \   00002B   A8..         MOV     R0,?V2
   \   00002D   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000030   C3           CLR     C
   \   000031   E8           MOV     A,R0
   \   000032   9A           SUBB    A,R2
   \   000033   E4           CLR     A
   \   000034   9B           SUBB    A,R3
   \   000035   5078         JNC     ??ZDO_ProcessMgmtBindReq_0
   1663            {
   1664              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C3           CLR     C
   \   00003F   98           SUBB    A,R0
   \   000040   FE           MOV     R6,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   9400         SUBB    A,#0x0
   \   000045   FF           MOV     R7,A
   1665            }
   1666            else
   1667            {
   1668              numItems = 0;
   1669            }
   1670          
   1671            // limit the size of the list
   1672            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000046   C3           CLR     C
   \   000047   EE           MOV     A,R6
   \   000048   9404         SUBB    A,#0x4
   \   00004A   EF           MOV     A,R7
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1673            {
   1674              numItems = ZDO_MAX_BIND_ITEMS;
   \   00004F   7E03         MOV     R6,#0x3
   \   000051   7F00         MOV     R7,#0x0
   \   000053   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1675            }
   1676          
   1677            // Allocate the memory to build the table
   1678            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000055   EE           MOV     A,R6
   \   000056   4F           ORL     A,R7
   \   000057   6056         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000059                ; Setup parameters for call to function osal_mem_alloc
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   EA           MOV     A,R2
   \   00005E   75F015       MOV     B,#0x15
   \   000061   A4           MUL     AB
   \   000062   FA           MOV     R2,A
   \   000063   A8F0         MOV     R0,B
   \   000065   75F015       MOV     B,#0x15
   \   000068   EB           MOV     A,R3
   \   000069   A4           MUL     AB
   \   00006A   28           ADD     A,R0
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006F   8A..         MOV     ?V0,R2
   \   000071   8B..         MOV     ?V1,R3
   \   000073   8A..         MOV     ?V8,R2
   \   000075   8B..         MOV     ?V9,R3
   \   000077   EA           MOV     A,R2
   \   000078   45..         ORL     A,?V9
   \   00007A   6033         JZ      ??ZDO_ProcessMgmtBindReq_0
   1679            {
   1680              status = ZSuccess;
   \   00007C   75..00       MOV     ?V3,#0x0
   1681          
   1682              // Convert buffer to list
   1683              pList = (apsBindingItem_t *)pBuf;
   1684          
   1685              // Loop through items and build list
   1686              for ( x = 0; x < numItems; x++ )
   \   00007F   75..00       MOV     ?V6,#0x0
   \   000082   801F         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1687              {
   1688                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000084                ; Setup parameters for call to function APSME_GetRequest
   \   000084   AC..         MOV     R4,?V0
   \   000086   AD..         MOV     R5,?V1
   \   000088   A8..         MOV     R0,?V2
   \   00008A   E5..         MOV     A,?V6
   \   00008C   28           ADD     A,R0
   \   00008D   FA           MOV     R2,A
   \   00008E   E4           CLR     A
   \   00008F   3400         ADDC    A,#0x0
   \   000091   FB           MOV     R3,A
   \   000092   79A2         MOV     R1,#-0x5e
   \   000094   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1689                pList++;
   \   000097   E5..         MOV     A,?V0
   \   000099   2415         ADD     A,#0x15
   \   00009B   F5..         MOV     ?V0,A
   \   00009D   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   00009F   05..         INC     ?V1
   1690              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000A1   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A3   C3           CLR     C
   \   0000A4   E5..         MOV     A,?V6
   \   0000A6   9E           SUBB    A,R6
   \   0000A7   E4           CLR     A
   \   0000A8   9F           SUBB    A,R7
   \   0000A9   40D9         JC      ??ZDO_ProcessMgmtBindReq_4
   \   0000AB   EE           MOV     A,R6
   \   0000AC   F9           MOV     R1,A
   \   0000AD   8005         SJMP    ??ZDO_ProcessMgmtBindReq_6
   1691          
   1692            }
   1693            else
   1694            {
   1695              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000AF   75..8B       MOV     ?V3,#-0x75
   1696              numItems = 0;
   \   0000B2   7900         MOV     R1,#0x0
   1697            }
   1698          
   1699            // Send response
   1700            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1701                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000B4                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B4   75..00       MOV     ?V0,#0x0
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BC   78..         MOV     R0,#?V8
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F5..         MOV     ?V0,A
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   E5..         MOV     A,?V2
   \   0000CB   F5..         MOV     ?V0,A
   \   0000CD   78..         MOV     R0,#?V0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   7405         MOV     A,#0x5
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FD           MOV     R5,A
   \   0000D9   AC..         MOV     R4,?V3
   \   0000DB   E5..         MOV     A,?V4
   \   0000DD   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   0000E0   35..         ADDC    A,?V5
   \   0000E2   FB           MOV     R3,A
   \   0000E3   E5..         MOV     A,?V4
   \   0000E5   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000E8   35..         ADDC    A,?V5
   \   0000EA   F583         MOV     DPH,A
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F9           MOV     R1,A
   \   0000EE   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F1   7405         MOV     A,#0x5
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   1702          
   1703            if ( pBuf )
   \   0000F6   E5..         MOV     A,?V8
   \   0000F8   45..         ORL     A,?V9
   \   0000FA   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1704            {
   1705              osal_mem_free( pBuf );
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   AA..         MOV     R2,?V8
   \   0000FE   AB..         MOV     R3,?V9
   \   000100   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1706            }
   1707          #else
   1708            (void)inMsg;
   1709          #endif
   1710          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000103   7402         MOV     A,#0x2
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
   \   000108                REQUIRE ?Subroutine7
   \   000108                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1711          
   1712          /*********************************************************************
   1713           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1714           *
   1715           * @brief       This function finishes the processing of the Management
   1716           *              Direct Join Request and generates the response.
   1717           *
   1718           * @param       inMsg - incoming message (request)
   1719           *
   1720           * @return      none
   1721           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1722          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1723          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine86 & 0xFFFF
   1724            uint8 *deviceAddr;
   1725            uint8 capInfo;
   1726            uint8 stat;
   1727          
   1728            // Parse the message
   1729            deviceAddr = inMsg->asdu;
   1730            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1731          
   1732            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_339:
   \   00000D   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   00001D   E9           MOV     A,R1
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   F0           MOVX    @DPTR,A
   1733          
   1734            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV     ?V0,#0x0
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP100_8
   \   000032   88..         MOV     ?V0,R0
   \   000034   89..         MOV     ?V1,R1
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   75..35       MOV     ?V0,#0x35
   \   00003E   75..80       MOV     ?V1,#-0x80
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000049   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00004C   7405         MOV     A,#0x5
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1735          }
   \   000051                REQUIRE ?Subroutine8
   \   000051                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine148_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EE           MOV     A,R6
   \   000003   2402         ADD     A,#0x2
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   FD           MOV     R5,A
   \   000009   EE           MOV     A,R6
   \   00000A   240F         ADD     A,#0xf
   \   00000C   FA           MOV     R2,A
   \   00000D   E4           CLR     A
   \   00000E   3F           ADDC    A,R7
   \   00000F   FB           MOV     R3,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000005   FB           MOV     R3,A
   \   000006                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET
   1736          
   1737          /*********************************************************************
   1738           * @fn          ZDO_ProcessMgmtLeaveReq
   1739           *
   1740           * @brief       This function processes a Management Leave Request
   1741           *              and generates the response.
   1742           *
   1743           * @param       inMsg - incoming message (request)
   1744           *
   1745           * @return      none
   1746           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1747          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1748          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine90 & 0xFFFF
   1749            NLME_LeaveReq_t req;
   1750            ZStatus_t       status;
   1751            uint8           option;
   1752            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_332:
   \   00000D   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000010   12....       LCALL   ?Subroutine130 & 0xFFFF
   1753          
   1754            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1755                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_219:
   \   000013                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00001A   E9           MOV     A,R1
   \   00001B   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000020   8A..         MOV     ?V2,R2
   \   000022   8B..         MOV     ?V3,R3
   \   000024   AC..         MOV     R4,?V2
   \   000026   AD..         MOV     R5,?V3
   \   000028                ; Setup parameters for call to function sAddrExtCmp
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV     A,R1
   \   000030   6401         XRL     A,#0x1
   \   000032   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1756            {
   1757              // Remove this device
   1758              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1759            }
   1760            else
   1761            {
   1762              // Remove child device
   1763              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   EE           MOV     A,R6
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   EF           MOV     A,R7
   1764            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000047   12....       LCALL   ?Subroutine16 & 0xFFFF
   1765          
   1766            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_14:
   \   00004A   F8           MOV     R0,A
   1767            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004D   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1768            {
   1769              req.removeChildren = TRUE;
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   1770            }
   1771          
   1772            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000057   E8           MOV     A,R0
   \   000058   A2E7         MOV     C,0xE0 /* A   */.7
   \   00005A   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1773            {
   1774               req.rejoin = TRUE;
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   7401         MOV     A,#0x1
   \   000063   F0           MOVX    @DPTR,A
   1775            }
   1776          
   1777            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000064   7405         MOV     A,#0x5
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   1778          
   1779            status = NLME_LeaveReq( &req );
   \   00006B                ; Setup parameters for call to function NLME_LeaveReq
   \   00006B   04           INC     A
   \   00006C   12....       LCALL   ?XSTACK_DISP101_8
   \   00006F   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000072   E9           MOV     A,R1
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   F0           MOVX    @DPTR,A
   1780          
   1781            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1782            {
   1783              // Stop polling and get ready to reset
   1784              NLME_SetPollRate( 0 );
   \   00007A                ; Setup parameters for call to function NLME_SetPollRate
   \   00007A   90....       MOV     DPTR,#__Constant_0
   \   00007D   12....       LCALL   ?XLOAD_R2345
   \   000080   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1785              NLME_SetResponseRate(0);
   \   000083                ; Setup parameters for call to function NLME_SetResponseRate
   \   000083   7A00         MOV     R2,#0x0
   \   000085   7B00         MOV     R3,#0x0
   \   000087   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1786              NLME_SetQueuedPollRate(0);
   \   00008A                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00008A   7A00         MOV     R2,#0x0
   \   00008C   7B00         MOV     R3,#0x0
   \   00008E   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1787            }
   1788          
   1789            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000091                ; Setup parameters for call to function ZDP_SendData
   \   000091   75..00       MOV     ?V2,#0x0
   \   000094   78..         MOV     R0,#?V2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   7401         MOV     A,#0x1
   \   00009B   12....       LCALL   ?XSTACK_DISP100_8
   \   00009E   88..         MOV     ?V2,R0
   \   0000A0   89..         MOV     ?V3,R1
   \   0000A2   78..         MOV     R0,#?V2
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   75..34       MOV     ?V2,#0x34
   \   0000AA   75..80       MOV     ?V3,#-0x80
   \   0000AD   78..         MOV     R0,#?V2
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   7901         MOV     R1,#0x1
   \   0000B4   E5..         MOV     A,?V0
   \   0000B6   2402         ADD     A,#0x2
   \   0000B8   FC           MOV     R4,A
   \   0000B9   E4           CLR     A
   \   0000BA   35..         ADDC    A,?V1
   \   0000BC   FD           MOV     R5,A
   \   0000BD   E5..         MOV     A,?V0
   \   0000BF   240F         ADD     A,#0xf
   \   0000C1   FA           MOV     R2,A
   \   0000C2   E4           CLR     A
   \   0000C3   35..         ADDC    A,?V1
   \   0000C5   FB           MOV     R3,A
   \   0000C6   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000C9   7405         MOV     A,#0x5
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   1790          }
   \   0000CE   7406         MOV     A,#0x6
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D3   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1791          
   1792          
   1793          /*********************************************************************
   1794           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1795           *
   1796           * @brief       This function processes a Management Permit Join Request
   1797           *              and generates the response.
   1798           *
   1799           * @param       inMsg - incoming message (request)
   1800           *
   1801           * @return      none
   1802           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1803          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1804          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine86 & 0xFFFF
   1805            uint8 stat;
   1806            uint8 duration;
   1807            uint8 tcsig;
   1808          
   1809            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1810            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1811          
   1812            // Set the network layer permit join duration
   1813            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_340:
   \   00000D   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
   1814          
   1815            // Handle the Trust Center Significance
   1816            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1817            {
   1818              if ( tcsig == TRUE )
   1819              {
   1820                ZDSecMgrPermitJoining( duration );
   1821              }
   1822            }
   1823          
   1824            // Send a response if unicast
   1825            if ( !inMsg->wasBroadcast )
   \                     ??CrossCallReturnLabel_31:
   \   00001E   702C         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1826            {
   1827              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000020                ; Setup parameters for call to function ZDP_SendData
   \   000020   75..00       MOV     ?V0,#0x0
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP100_8
   \   00002D   88..         MOV     ?V0,R0
   \   00002F   89..         MOV     ?V1,R1
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..36       MOV     ?V0,#0x36
   \   000039   75..80       MOV     ?V1,#-0x80
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   12....       LCALL   ?Subroutine93 & 0xFFFF
   1828            }
   \                     ??CrossCallReturnLabel_146:
   \   000044   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000047   7405         MOV     A,#0x5
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   1829          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00004C   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
   1830          
   1831          /*
   1832           * This function stub allows the next higher layer to be notified of
   1833           * a permit joining timeout.
   1834           */
   1835          /*********************************************************************
   1836           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1837           *
   1838           * @brief       This function stub allows the next higher layer to be
   1839           *              notified of a permit joining timeout. Currently, this
   1840           *              directly bypasses the APS layer.
   1841           *
   1842           * @param       none
   1843           *
   1844           * @return      none
   1845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1846          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1847          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1848            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1849            // Currently, only the ZDSecMgr needs to be notified
   1850            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1851            {
   1852              ZDSecMgrPermitJoiningTimeout();
   1853            }
   1854            #endif
   1855          }
   \   000000   02....       LJMP    ?BRET
   1856          
   1857          /*********************************************************************
   1858           * @fn          ZDO_ProcessUserDescReq
   1859           *
   1860           * @brief       This function finishes the processing of the User
   1861           *              Descriptor Request and generates the response.
   1862           *
   1863           * @param       inMsg - incoming message (request)
   1864           *
   1865           * @return      none
   1866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1867          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1868          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1869            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000011   F5..         MOV     ?V4,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F5..         MOV     ?V5,A
   1870            UserDescriptorFormat_t userDesc;
   1871          
   1872            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1873                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000017   EE           MOV     A,R6
   \   000018   240F         ADD     A,#0xf
   \   00001A   F5..         MOV     ?V2,A
   \   00001C   E4           CLR     A
   \   00001D   3F           ADDC    A,R7
   \   00001E   F5..         MOV     ?V3,A
   \   000020   EE           MOV     A,R6
   \   000021   2402         ADD     A,#0x2
   \   000023   F5..         MOV     ?V0,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F5..         MOV     ?V1,A
   \   000029   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   65..         XRL     A,?V4
   \   00002F   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   65..         XRL     A,?V5
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000035   705B         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV     R0,?XSP + 0
   \   000039   A9..         MOV     R1,?XSP + 1
   \   00003B   88..         MOV     ?V6,R0
   \   00003D   89..         MOV     ?V7,R1
   \   00003F   78..         MOV     R0,#?V6
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV     ?V6,#0x11
   \   000047   75..00       MOV     ?V7,#0x0
   \   00004A   78..         MOV     R0,#?V6
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV     R4,#0x0
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A81         MOV     R2,#-0x7f
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   E9           MOV     A,R1
   \   000060   7030         JNZ     ??ZDO_ProcessUserDescReq_1
   1874            {
   1875              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000062                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000062   75..00       MOV     ?V6,#0x0
   \   000065   78..         MOV     R0,#?V6
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?XSTACK_DISP100_8
   \   00006F   88..         MOV     ?V6,R0
   \   000071   89..         MOV     ?V7,R1
   \   000073   78..         MOV     R0,#?V6
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   AC..         MOV     R4,?V4
   \   00007A   AD..         MOV     R5,?V5
   \   00007C   AA..         MOV     R2,?V0
   \   00007E   AB..         MOV     R3,?V1
   \   000080   85..82       MOV     DPL,?V2
   \   000083   85..83       MOV     DPH,?V3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   00008B   7403         MOV     A,#0x3
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   8029         SJMP    ??ZDO_ProcessUserDescReq_2
   1876            }
   1877            else
   1878            {
   1879              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1880                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000092                ; Setup parameters for call to function ZDP_GenericRsp
   \   000092   75..11       MOV     ?V6,#0x11
   \   000095   75..80       MOV     ?V7,#-0x80
   \   000098   78..         MOV     R0,#?V6
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   78..         MOV     R0,#?V4
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   12....       LCALL   ?Subroutine92 & 0xFFFF
   1881            }
   \                     ??CrossCallReturnLabel_144:
   \   0000A5   7C84         MOV     R4,#-0x7c
   \   0000A7   AA..         MOV     R2,?V0
   \   0000A9   AB..         MOV     R3,?V1
   \   0000AB   85..82       MOV     DPL,?V2
   \   0000AE   85..83       MOV     DPH,?V3
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000B6   7404         MOV     A,#0x4
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   1882          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000BB   7411         MOV     A,#0x11
   \   0000BD   02....       LJMP    ?Subroutine9 & 0xFFFF
   1883          
   1884          /*********************************************************************
   1885           * @fn          ZDO_ProcessUserDescSet
   1886           *
   1887           * @brief       This function finishes the processing of the User
   1888           *              Descriptor Set and generates the response.
   1889           *
   1890           * @param       inMsg - incoming message (request)
   1891           *
   1892           * @return      none
   1893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1894          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1895          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1896            uint8 *msg;
   1897            uint16 aoi;
   1898            UserDescriptorFormat_t userDesc;
   1899            uint8 outMsg[3];
   1900            uint8 status;
   1901          
   1902            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000011   35..         ADDC    A,?V3
   \   000013   12....       LCALL   ?Subroutine56 & 0xFFFF
   1903            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_82:
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   CA           XCH     A,R2
   \   000019   FB           MOV     R3,A
   \   00001A   EC           MOV     A,R4
   \   00001B   2A           ADD     A,R2
   \   00001C   FE           MOV     R6,A
   \   00001D   E4           CLR     A
   \   00001E   3B           ADDC    A,R3
   \   00001F   FF           MOV     R7,A
   1904          
   1905            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ      $+5
   \   00002C   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1906            {
   1907              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   9410         SUBB    A,#0x10
   \   000039   5004         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8003         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003F   75..10       MOV     ?V0,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E5..         MOV     A,?V0
   \   000049   12....       LCALL   ?Subroutine34 & 0xFFFF
   1908              msg ++;  // increment one for the length field
   1909          
   1910              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_50:
   \   00004C   A982         MOV     R1,DPL
   \   00004E   AA83         MOV     R2,DPH
   \   000050   89..         MOV     ?V4,R1
   \   000052   8A..         MOV     ?V5,R2
   \   000054   75..00       MOV     ?V6,#0x0
   \   000057   78..         MOV     R0,#?V4
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005C   7407         MOV     A,#0x7
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FC           MOV     R4,A
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7408         MOV     A,#0x8
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   AA82         MOV     R2,DPL
   \   00006C   AB83         MOV     R3,DPH
   \   00006E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   1911              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000076                ; Setup parameters for call to function osal_nv_write
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?XSTACK_DISP100_8
   \   00007B   88..         MOV     ?V4,R0
   \   00007D   89..         MOV     ?V5,R1
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   75..11       MOV     ?V4,#0x11
   \   000087   75..00       MOV     ?V5,#0x0
   \   00008A   78..         MOV     R0,#?V4
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F   7C00         MOV     R4,#0x0
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A81         MOV     R2,#-0x7f
   \   000095   7B00         MOV     R3,#0x0
   \   000097   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   1912              if ( userDesc.len != 0 )
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000A8   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1913              {
   1914                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   D2E4         SETB    0xE0 /* A   */.4
   \   0000AD   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1915              }
   1916              else
   1917              {
   1918                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C2E4         CLR     0xE0 /* A   */.4
   1919              }
   1920          
   1921              status = ZDP_SUCCESS;
   1922            }
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B2   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000B5   E4           CLR     A
   \   0000B6   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1923            else
   1924            {
   1925              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C0   F0           MOVX    @DPTR,A
   1926            }
   1927          
   1928            outMsg[0] = status;
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   C0E0         PUSH    A
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   D0E0         POP     A
   \   0000CB   F0           MOVX    @DPTR,A
   1929            outMsg[1] = LO_UINT16( aoi );
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   EE           MOV     A,R6
   \   0000D2   F0           MOVX    @DPTR,A
   1930            outMsg[2] = LO_UINT16( aoi );
   \   0000D3   7403         MOV     A,#0x3
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   EE           MOV     A,R6
   \   0000D9   F0           MOVX    @DPTR,A
   1931          
   1932            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1933                         inMsg->SecurityUse );
   \   0000DA                ; Setup parameters for call to function ZDP_SendData
   \   0000DA   E5..         MOV     A,?V2
   \   0000DC   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0000DF   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F5..         MOV     ?V1,A
   \   0000E5   78..         MOV     R0,#?V1
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000EF   88..         MOV     ?V4,R0
   \   0000F1   89..         MOV     ?V5,R1
   \   0000F3   78..         MOV     R0,#?V4
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   75..14       MOV     ?V4,#0x14
   \   0000FB   75..80       MOV     ?V5,#-0x80
   \   0000FE   78..         MOV     R0,#?V4
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   7903         MOV     R1,#0x3
   \   000105   E5..         MOV     A,?V2
   \   000107   2402         ADD     A,#0x2
   \   000109   FC           MOV     R4,A
   \   00010A   E4           CLR     A
   \   00010B   35..         ADDC    A,?V3
   \   00010D   FD           MOV     R5,A
   \   00010E   E5..         MOV     A,?V2
   \   000110   240F         ADD     A,#0xf
   \   000112   FA           MOV     R2,A
   \   000113   E4           CLR     A
   \   000114   35..         ADDC    A,?V3
   \   000116   FB           MOV     R3,A
   \   000117   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00011A   7405         MOV     A,#0x5
   \   00011C   12....       LCALL   ?DEALLOC_XSTACK8
   1934          }
   \   00011F   7415         MOV     A,#0x15
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   \   000124   7F07         MOV     R7,#0x7
   \   000126   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1935          
   1936          /*********************************************************************
   1937           * @fn          ZDO_ProcessDeviceAnnce
   1938           *
   1939           * @brief       This function processes a device annouce message.
   1940           *
   1941           * @param       inMsg - incoming message
   1942           *
   1943           * @return      none
   1944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1945          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1947            ZDO_DeviceAnnce_t Annce;
   1948            AddrMgrEntry_t addrEntry;
   1949            uint8 parentExt[Z_EXTADDR_LEN];
   1950          
   1951            // Parse incoming message
   1952            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000A                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1953          
   1954            if ( ZSTACK_END_DEVICE_BUILD )
   1955            {
   1956              // Make sure the message didn't come from myself - end device only
   1957              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   000023                ; Setup parameters for call to function NLME_GetShortAddr
   \   000023   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000026   8A..         MOV     ?V0,R2
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   A8..         MOV     R0,?V0
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   68           XRL     A,R0
   \   000036   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00003B   7003         JNZ     $+5
   \   00003D   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1958              {
   1959                return;
   1960              }
   1961            }
   1962          
   1963          #if defined ( ZIGBEEPRO )
   1964            // Clean up the neighbor table
   1965            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000040                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000040   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   1966          
   1967            // If address conflict is detected, no need to update the address manager
   1968            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000043                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00004F   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000052   E9           MOV     A,R1
   \   000053   6401         XRL     A,#0x1
   \   000055   7003         JNZ     $+5
   \   000057   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1969            {
   1970              return;
   1971            }
   1972          
   1973            // Check for parent's address
   1974            NLME_GetCoordExtAddr( parentExt );
   \   00005A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00005A   7418         MOV     A,#0x18
   \   00005C   12....       LCALL   ?XSTACK_DISP101_8
   \   00005F   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1975            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000062                ; Setup parameters for call to function sAddrExtCmp
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   AC82         MOV     R4,DPL
   \   000069   AD83         MOV     R5,DPH
   \   00006B   7418         MOV     A,#0x18
   \   00006D   12....       LCALL   ?XSTACK_DISP101_8
   \   000070   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000073   E9           MOV     A,R1
   \   000074   6033         JZ      ??ZDO_ProcessDeviceAnnce_3
   1976            {
   1977              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000076                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000076   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000079   8A..         MOV     ?V0,R2
   \   00007B   8B..         MOV     ?V1,R3
   \   00007D   A8..         MOV     R0,?V0
   \   00007F   A9..         MOV     R1,?V1
   \   000081   85..82       MOV     DPL,?XSP + 0
   \   000084   85..83       MOV     DPH,?XSP + 1
   \   000087   E0           MOVX    A,@DPTR
   \   000088   68           XRL     A,R0
   \   000089   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   00008E   6019         JZ      ??ZDO_ProcessDeviceAnnce_3
   1978              {
   1979                // Set the Parent's MAC's new short address
   1980                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000090   85..82       MOV     DPL,?XSP + 0
   \   000093   85..83       MOV     DPH,?XSP + 1
   \   000096   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000099   90....       MOV     DPTR,#_NIB + 23
   \   00009C   E8           MOV     A,R0
   \   00009D   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   1981                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_381:
   \   0000A0                ; Setup parameters for call to function ZMacSetReq
   \   0000A0   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000A2   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000A4   794B         MOV     R1,#0x4b
   \   0000A6   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1982              }
   1983            }
   1984          
   1985            if ( ZSTACK_ROUTER_BUILD )
   1986            {
   1987              // If the device annce comes from a end device child that has moved
   1988              // to another parent, remove it from associated device list
   1989          
   1990              // If the dev annce is coming from other device's children,
   1991              // (The dev annce from its own children shall be unicast to itself,
   1992              // So check the mac destination address)
   1993              // Remove it from the associated device list. If it is not
   1994              // a child, no action will be taken in AssocRemove() anyway.
   1995              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1996              {
   1997                associated_devices_t *dev_ptr;
   1998          
   1999                // If it's an end device child
   2000                dev_ptr = AssocGetWithExt( Annce.extAddr );
   2001                if ( dev_ptr )
   2002                {
   2003                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2004                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   2005                  {
   2006                    AssocRemove( Annce.extAddr );
   2007                  }
   2008                }
   2009          
   2010                // Remove the address from the SrcMatch table,
   2011                // just in case the device was aged out by Child Management Table process
   2012                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2013                     ( zgChildAgingEnable == TRUE ) )
   2014                {
   2015                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   2016                }
   2017              }
   2018            }
   2019          
   2020            // Assume that the device has moved, remove existing routing entries
   2021            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000A9                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000A9   7900         MOV     R1,#0x0
   \   0000AB   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   0000AE   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2022          
   2023            // Remove entry from neighborTable
   2024            nwkNeighborRemove( Annce.nwkAddr, _NIB.nwkPanId );
   \   0000B1                ; Setup parameters for call to function nwkNeighborRemove
   \   0000B1   90....       MOV     DPTR,#_NIB + 33
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FC           MOV     R4,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   FD           MOV     R5,A
   \   0000B9   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   0000BC   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2025          
   2026          #endif // ZIGBEEPRO
   2027          
   2028            // Fill in the extended address in address manager if we don't have it already.
   2029            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000BF   740B         MOV     A,#0xb
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   E4           CLR     A
   \   0000C5   12....       LCALL   ?Subroutine21 & 0xFFFF
   2030            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_23:
   \   0000C8   740C         MOV     A,#0xc
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E8           MOV     A,R0
   \   0000CE   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   2031            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_382:
   \   0000D1                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0000D1   740B         MOV     A,#0xb
   \   0000D3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D6   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000D9   E9           MOV     A,R1
   \   0000DA   603F         JZ      ??ZDO_ProcessDeviceAnnce_5
   2032            {
   2033              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0000DC                ; Setup parameters for call to function osal_memset
   \   0000DC   7C08         MOV     R4,#0x8
   \   0000DE   7D00         MOV     R5,#0x0
   \   0000E0   7900         MOV     R1,#0x0
   \   0000E2   7418         MOV     A,#0x18
   \   0000E4   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2034              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0000EA                ; Setup parameters for call to function sAddrExtCmp
   \   0000EA   740E         MOV     A,#0xe
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   AC82         MOV     R4,DPL
   \   0000F1   AD83         MOV     R5,DPH
   \   0000F3   7418         MOV     A,#0x18
   \   0000F5   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F8   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0000FB   E9           MOV     A,R1
   \   0000FC   601D         JZ      ??ZDO_ProcessDeviceAnnce_5
   2035              {
   2036                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0000FE                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0000FE   7402         MOV     A,#0x2
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   AC82         MOV     R4,DPL
   \   000105   AD83         MOV     R5,DPH
   \   000107   740E         MOV     A,#0xe
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   AA82         MOV     R2,DPL
   \   00010E   AB83         MOV     R3,DPH
   \   000110   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2037                AddrMgrEntryUpdate( &addrEntry );
   \   000113                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000113   740B         MOV     A,#0xb
   \   000115   12....       LCALL   ?XSTACK_DISP101_8
   \   000118   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2038              }
   2039            }
   2040          
   2041            // Update the short address in address manager if it's been changed
   2042            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   00011B                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   AC82         MOV     R4,DPL
   \   000122   AD83         MOV     R5,DPH
   \   000124   740E         MOV     A,#0xe
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   AA82         MOV     R2,DPL
   \   00012B   AB83         MOV     R3,DPH
   \   00012D   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2043            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   000130                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000130   740B         MOV     A,#0xb
   \   000132   12....       LCALL   ?XSTACK_DISP101_8
   \   000135   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000138   E9           MOV     A,R1
   \   000139   6031         JZ      ??ZDO_ProcessDeviceAnnce_2
   2044            {
   2045              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   00013B   740C         MOV     A,#0xc
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000143   85..82       MOV     DPL,?XSP + 0
   \   000146   85..83       MOV     DPH,?XSP + 1
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   68           XRL     A,R0
   \   00014B   7003         JNZ     ??ZDO_ProcessDeviceAnnce_6
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   000150   601A         JZ      ??ZDO_ProcessDeviceAnnce_2
   2046              {
   2047                addrEntry.nwkAddr = Annce.nwkAddr;
   \   000152   85..82       MOV     DPL,?XSP + 0
   \   000155   85..83       MOV     DPH,?XSP + 1
   \   000158   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00015B   740C         MOV     A,#0xc
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   E8           MOV     A,R0
   \   000161   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   2048                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_383:
   \   000164                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000164   740B         MOV     A,#0xb
   \   000166   12....       LCALL   ?XSTACK_DISP101_8
   \   000169   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2049              }
   2050            }
   2051          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00016C   7420         MOV     A,#0x20
   \   00016E   02....       LJMP    ??Subroutine148_0 & 0xFFFF
   2052          
   2053          /*********************************************************************
   2054           * @fn          ZDO_ProcessParentAnnce
   2055           *
   2056           * @brief       This function processes a Parent annouce message.
   2057           *
   2058           * @param       inMsg - incoming message
   2059           *
   2060           * @return      none
   2061           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2062          void ZDO_ProcessParentAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessParentAnnce:
   2063          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   2064            ZDO_ParentAnnce_t *parentAnnce;
   2065            uint8 x;
   2066            uint8 childCount = 0;
   \                     ??CrossCallReturnLabel_298:
   \   000013   7F00         MOV     R7,#0x0
   2067            uint32 localAge;
   2068          
   2069            ZDO_ChildInfoList_t *listHead = NULL;
   \   000015   8F..         MOV     ?V0,R7
   \   000017   8F..         MOV     ?V1,R7
   2070            ZDO_ChildInfoList_t *listTail;
   2071            ZDO_ChildInfoList_t *newNode;
   2072          
   2073            // Parse incoming message, memory is allocated by the parse function,
   2074            // it should be free after processing the message
   2075            parentAnnce = ZDO_ParseParentAnnce( inMsg );
   \   000019                ; Setup parameters for call to function ZDO_ParseParentAnnce
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FA           MOV     R2,A
   \   000021   12....       LCALL   `??ZDO_ParseParentAnnce::?relay`; Banked call to: ZDO_ParseParentAnnce
   \   000024   8A..         MOV     ?V14,R2
   \   000026   8B..         MOV     ?V15,R3
   2076          
   2077            if ( parentAnnce != NULL )
   \   000028   EA           MOV     A,R2
   \   000029   45..         ORL     A,?V15
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??ZDO_ProcessParentAnnce_0 & 0xFFFF
   2078            {
   2079              for ( x = 0; x < parentAnnce->numOfChildren; x++ )
   \   000030   7E00         MOV     R6,#0x0
   \   000032   8008         SJMP    ??ZDO_ProcessParentAnnce_1
   2080              {
   2081                associated_devices_t *dev_ptr;
   2082                localAge = 0xFFFFFFFF;
   2083          
   2084                // If it's an End Device child
   2085                dev_ptr = AssocGetWithExt( parentAnnce->childInfo[x].extAddr );
   2086          
   2087                if ( dev_ptr )
   2088                {
   2089                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2090                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   2091                  {
   2092                    if ( dev_ptr->keepaliveRcv == TRUE )
   2093                    {
   2094                      localAge = dev_ptr->endDev.deviceTimeout - dev_ptr->timeoutCounter;
   2095                    }
   2096          
   2097                    if ( localAge < parentAnnce->childInfo[x].age )
   2098                    {
   2099                      // Add one element to the list
   2100                      newNode = (ZDO_ChildInfoList_t *)osal_mem_alloc( sizeof(ZDO_ChildInfoList_t) );
   2101          
   2102                      osal_cpyExtAddr( newNode->child.extAddr, parentAnnce->childInfo[x].extAddr );
   2103          
   2104                      newNode->child.age = localAge;
   2105          
   2106                      newNode->next = NULL;
   2107          
   2108                      if ( listHead == NULL )
   2109                      {
   2110                        // Initialize the head of the list
   2111                        listHead = listTail = newNode;
   2112                      }
   2113                      else
   2114                      {
   2115                        // Add new element to the end
   2116                        listTail->next = newNode;
   2117          
   2118                        listTail = listTail->next;
   2119                      }
   2120          
   2121                      childCount++;
   2122                    }
   2123                    else
   2124                    {
   2125                      AssocRemove( parentAnnce->childInfo[x].extAddr );
   \                     ??ZDO_ProcessParentAnnce_2:
   \   000034                ; Setup parameters for call to function AssocRemove
   \   000034   AA..         MOV     R2,?V12
   \   000036   AB..         MOV     R3,?V13
   \   000038   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   2126                    }
   \                     ??ZDO_ProcessParentAnnce_3:
   \   00003B   0E           INC     R6
   \                     ??ZDO_ProcessParentAnnce_1:
   \   00003C   85..82       MOV     DPL,?V14
   \   00003F   85..83       MOV     DPH,?V15
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   EE           MOV     A,R6
   \   000045   C3           CLR     C
   \   000046   98           SUBB    A,R0
   \   000047   4003         JC      $+5
   \   000049   02....       LJMP    ??ZDO_ProcessParentAnnce_4 & 0xFFFF
   \   00004C   75..FF       MOV     ?V4,#-0x1
   \   00004F   75..FF       MOV     ?V5,#-0x1
   \   000052   75..FF       MOV     ?V6,#-0x1
   \   000055   75..FF       MOV     ?V7,#-0x1
   \   000058   EE           MOV     A,R6
   \   000059   75F00C       MOV     B,#0xc
   \   00005C   A4           MUL     AB
   \   00005D   F8           MOV     R0,A
   \   00005E   A9F0         MOV     R1,B
   \   000060   E5..         MOV     A,?V14
   \   000062   28           ADD     A,R0
   \   000063   F5..         MOV     ?V10,A
   \   000065   E5..         MOV     A,?V15
   \   000067   39           ADDC    A,R1
   \   000068   F5..         MOV     ?V11,A
   \   00006A   85..82       MOV     DPL,?V10
   \   00006D   F583         MOV     DPH,A
   \   00006F   A3           INC     DPTR
   \   000070   8582..       MOV     ?V12,DPL
   \   000073   8583..       MOV     ?V13,DPH
   \   000076                ; Setup parameters for call to function AssocGetWithExt
   \   000076   AA..         MOV     R2,?V12
   \   000078   AB..         MOV     R3,?V13
   \   00007A   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00007D   EA           MOV     A,R2
   \   00007E   4B           ORL     A,R3
   \   00007F   60BA         JZ      ??ZDO_ProcessParentAnnce_3
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F8           MOV     R0,A
   \   00008B   7401         MOV     A,#0x1
   \   00008D   68           XRL     A,R0
   \   00008E   6005         JZ      ??ZDO_ProcessParentAnnce_5
   \   000090   7402         MOV     A,#0x2
   \   000092   68           XRL     A,R0
   \   000093   70A6         JNZ     ??ZDO_ProcessParentAnnce_3
   \                     ??ZDO_ProcessParentAnnce_5:
   \   000095   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000098   7010         JNZ     ??ZDO_ProcessParentAnnce_6
   \   00009A   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00009D   78..         MOV     R0,#?V4
   \   00009F   12....       LCALL   ?L_MOV_X
   \   0000A2   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000A5   78..         MOV     R0,#?V4
   \   0000A7   12....       LCALL   ?L_SUB_X
   \                     ??ZDO_ProcessParentAnnce_6:
   \   0000AA   85..82       MOV     DPL,?V10
   \   0000AD   85..83       MOV     DPH,?V11
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   78..         MOV     R0,#?V4
   \   0000BB   12....       LCALL   ?UL_GE_X
   \   0000BE   5003         JNC     $+5
   \   0000C0   02....       LJMP    ??ZDO_ProcessParentAnnce_2 & 0xFFFF
   \   0000C3                ; Setup parameters for call to function osal_mem_alloc
   \   0000C3   7A0E         MOV     R2,#0xe
   \   0000C5   7B00         MOV     R3,#0x0
   \   0000C7   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CA   8A..         MOV     ?V2,R2
   \   0000CC   8B..         MOV     ?V3,R3
   \   0000CE   8A..         MOV     ?V10,R2
   \   0000D0                ; Setup parameters for call to function sAddrExtCpy
   \   0000D0   AC..         MOV     R4,?V12
   \   0000D2   AD..         MOV     R5,?V13
   \   0000D4   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D7   85..82       MOV     DPL,?V2
   \   0000DA   85..83       MOV     DPH,?V3
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   78..         MOV     R0,#?V4
   \   0000E7   12....       LCALL   ?L_MOV_TO_X
   \   0000EA   E5..         MOV     A,?V2
   \   0000EC   240C         ADD     A,#0xc
   \   0000EE   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0000F1   E4           CLR     A
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   E5..         MOV     A,?V0
   \   0000F7   45..         ORL     A,?V1
   \   0000F9   700E         JNZ     ??ZDO_ProcessParentAnnce_7
   \   0000FB   85....       MOV     ?V8,?V2
   \   0000FE   85....       MOV     ?V9,?V3
   \   000101   85....       MOV     ?V0,?V8
   \   000104   85....       MOV     ?V1,?V9
   \   000107   800F         SJMP    ??ZDO_ProcessParentAnnce_8
   \                     ??ZDO_ProcessParentAnnce_7:
   \   000109   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00010C   E5..         MOV     A,?V2
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   E5..         MOV     A,?V3
   \   000112   F0           MOVX    @DPTR,A
   \   000113   85....       MOV     ?V8,?V10
   \   000116   F5..         MOV     ?V9,A
   \                     ??ZDO_ProcessParentAnnce_8:
   \   000118   0F           INC     R7
   \   000119   02....       LJMP    ??ZDO_ProcessParentAnnce_3 & 0xFFFF
   2127                  }
   2128                }
   2129              }
   2130          
   2131              // If the device has children that match some in the received list,
   2132              // it should send a unicast Parent_Annce_rsp message.
   2133              if ( childCount > 0 )
   \                     ??ZDO_ProcessParentAnnce_4:
   \   00011C   EF           MOV     A,R7
   \   00011D   7003         JNZ     $+5
   \   00011F   02....       LJMP    ??ZDO_ProcessParentAnnce_9 & 0xFFFF
   2134              {
   2135                ZDO_ChildInfo_t *childInfo;
   2136                zAddrType_t dstAddr;
   2137          
   2138                dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000122   740A         MOV     A,#0xa
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   7402         MOV     A,#0x2
   \   000129   12....       LCALL   ?Subroutine27 & 0xFFFF
   2139                dstAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_35:
   \   00012C   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00012F   A3           INC     DPTR
   \   000130   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000133   7402         MOV     A,#0x2
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   E8           MOV     A,R0
   \   000139   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   2140          
   2141                x = 0;
   \                     ??CrossCallReturnLabel_384:
   \   00013C   7E00         MOV     R6,#0x0
   2142          
   2143                childInfo = (ZDO_ChildInfo_t *)osal_mem_alloc( childCount * sizeof(ZDO_ChildInfo_t) );
   \   00013E                ; Setup parameters for call to function osal_mem_alloc
   \   00013E   EF           MOV     A,R7
   \   00013F   75F00C       MOV     B,#0xc
   \   000142   A4           MUL     AB
   \   000143   FA           MOV     R2,A
   \   000144   ABF0         MOV     R3,B
   \   000146   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000149   8A..         MOV     ?V4,R2
   \   00014B   8B..         MOV     ?V5,R3
   2144          
   2145                if ( childInfo != NULL )
   \   00014D   EA           MOV     A,R2
   \   00014E   45..         ORL     A,?V5
   \   000150   7003         JNZ     $+5
   \   000152   02....       LJMP    ??ZDO_ProcessParentAnnce_9 & 0xFFFF
   \   000155   8056         SJMP    ??ZDO_ProcessParentAnnce_10
   2146                {
   2147                  // Copy the content of the link list into this buffer
   2148                  while ( listHead != NULL )
   2149                  {
   2150                    listTail = listHead;
   \                     ??ZDO_ProcessParentAnnce_11:
   \   000157   85....       MOV     ?V8,?V0
   \   00015A   85....       MOV     ?V9,?V1
   2151          
   2152                    osal_cpyExtAddr( childInfo[x].extAddr,  listHead->child.extAddr );
   \   00015D   EE           MOV     A,R6
   \   00015E   75F00C       MOV     B,#0xc
   \   000161   A4           MUL     AB
   \   000162   F8           MOV     R0,A
   \   000163   A9F0         MOV     R1,B
   \   000165   E5..         MOV     A,?V4
   \   000167   28           ADD     A,R0
   \   000168   F5..         MOV     ?V2,A
   \   00016A   E5..         MOV     A,?V5
   \   00016C   39           ADDC    A,R1
   \   00016D   F5..         MOV     ?V3,A
   \   00016F                ; Setup parameters for call to function sAddrExtCpy
   \   00016F   AC..         MOV     R4,?V0
   \   000171   AD..         MOV     R5,?V1
   \   000173   AA..         MOV     R2,?V2
   \   000175   FB           MOV     R3,A
   \   000176   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2153                    childInfo[x].age = listHead->child.age;
   \   000179   85..82       MOV     DPL,?V0
   \   00017C   85..83       MOV     DPH,?V1
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   12....       LCALL   ?XLOAD_R0123
   \   00018A   85..82       MOV     DPL,?V2
   \   00018D   85..83       MOV     DPH,?V3
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   12....       LCALL   ?XSTORE_R0123
   2154          
   2155                    x++;
   \   00019B   0E           INC     R6
   2156          
   2157                    listHead = listTail->next;
   \   00019C   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F5..         MOV     ?V0,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F5..         MOV     ?V1,A
   2158          
   2159                    // Free this element of the link list
   2160                    osal_mem_free( listTail );
   \   0001A6                ; Setup parameters for call to function osal_mem_free
   \   0001A6   AA..         MOV     R2,?V8
   \   0001A8   AB..         MOV     R3,?V9
   \   0001AA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2161                  }
   \                     ??ZDO_ProcessParentAnnce_10:
   \   0001AD   E5..         MOV     A,?V0
   \   0001AF   45..         ORL     A,?V1
   \   0001B1   70A4         JNZ     ??ZDO_ProcessParentAnnce_11
   2162          
   2163                  ZDP_ParentAnnceRsp( (inMsg->TransSeq), dstAddr, childCount,
   2164                                      ((uint8 *)childInfo), 0 );
   \   0001B3                ; Setup parameters for call to function ZDP_ParentAnnce
   \   0001B3   75..00       MOV     ?V0,#0x0
   \   0001B6   78..         MOV     R0,#?V0
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001BB   75..1F       MOV     ?V0,#0x1f
   \   0001BE   75..80       MOV     ?V1,#-0x80
   \   0001C1   78..         MOV     R0,#?V0
   \   0001C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C6   78..         MOV     R0,#?V4
   \   0001C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CB   EF           MOV     A,R7
   \   0001CC   F9           MOV     R1,A
   \   0001CD   7407         MOV     A,#0x7
   \   0001CF   12....       LCALL   ?XSTACK_DISP102_8
   \   0001D2   7405         MOV     A,#0x5
   \   0001D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   240F         ADD     A,#0xf
   \   0001DA   FA           MOV     R2,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   3400         ADDC    A,#0x0
   \   0001DF   FB           MOV     R3,A
   \   0001E0   12....       LCALL   `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   0001E3   7405         MOV     A,#0x5
   \   0001E5   12....       LCALL   ?DEALLOC_XSTACK8
   2165                }
   2166              }
   2167          
   2168              // Free memory allocated by parsing function
   2169              osal_mem_free( parentAnnce );
   \                     ??ZDO_ProcessParentAnnce_9:
   \   0001E8                ; Setup parameters for call to function osal_mem_free
   \   0001E8   AA..         MOV     R2,?V14
   \   0001EA   AB..         MOV     R3,?V15
   \   0001EC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2170            }
   2171          }
   \                     ??ZDO_ProcessParentAnnce_0:
   \   0001EF   740B         MOV     A,#0xb
   \   0001F1   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E5..         MOV     A,?V8
   \   000002   240C         ADD     A,#0xc
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V9
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   EA           MOV     A,R2
   \   000001   2417         ADD     A,#0x17
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EA           MOV     A,R2
   \   000001   241B         ADD     A,#0x1b
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2172          
   2173          /*********************************************************************
   2174           * @fn          ZDO_ProcessParentAnnceRsp
   2175           *
   2176           * @brief       This function processes a Parent annouce response message.
   2177           *
   2178           * @param       inMsg - incoming message
   2179           *
   2180           * @return      none
   2181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2182          void ZDO_ProcessParentAnnceRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessParentAnnceRsp:
   2183          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   2184            ZDO_ParentAnnce_t *parentAnnce;
   2185            uint8 x;
   2186            uint32 localAge;
   2187          
   2188            // Parse incoming message, memory is allocated by the parse function,
   2189            // it should be free after processing the message
   2190            parentAnnce = ZDO_ParseParentAnnce( inMsg );
   \   000005                ; Setup parameters for call to function ZDO_ParseParentAnnce
   \   000005   12....       LCALL   `??ZDO_ParseParentAnnce::?relay`; Banked call to: ZDO_ParseParentAnnce
   \   000008   8A..         MOV     ?V0,R2
   \   00000A   8B..         MOV     ?V1,R3
   \   00000C   AE..         MOV     R6,?V0
   \   00000E   AF..         MOV     R7,?V1
   2191          
   2192            if ( parentAnnce != NULL )
   \   000010   EE           MOV     A,R6
   \   000011   4F           ORL     A,R7
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??ZDO_ProcessParentAnnceRsp_0 & 0xFFFF
   2193            {
   2194              for ( x = 0; x < parentAnnce->numOfChildren; x++ )
   \   000017   75..00       MOV     ?V4,#0x0
   \   00001A   807C         SJMP    ??ZDO_ProcessParentAnnceRsp_1
   2195              {
   2196                associated_devices_t *dev_ptr;
   2197                localAge = 0xFFFFFFFF;
   \                     ??ZDO_ProcessParentAnnceRsp_2:
   \   00001C   75..FF       MOV     ?V0,#-0x1
   \   00001F   75..FF       MOV     ?V1,#-0x1
   \   000022   75..FF       MOV     ?V2,#-0x1
   \   000025   75..FF       MOV     ?V3,#-0x1
   2198          
   2199                // If it's an End Device child
   2200                dev_ptr = AssocGetWithExt( parentAnnce->childInfo[x].extAddr );
   \   000028   E5..         MOV     A,?V4
   \   00002A   75F00C       MOV     B,#0xc
   \   00002D   A4           MUL     AB
   \   00002E   F8           MOV     R0,A
   \   00002F   A9F0         MOV     R1,B
   \   000031   EE           MOV     A,R6
   \   000032   28           ADD     A,R0
   \   000033   F5..         MOV     ?V8,A
   \   000035   EF           MOV     A,R7
   \   000036   39           ADDC    A,R1
   \   000037   F5..         MOV     ?V9,A
   \   000039   85..82       MOV     DPL,?V8
   \   00003C   F583         MOV     DPH,A
   \   00003E   A3           INC     DPTR
   \   00003F   8582..       MOV     ?V6,DPL
   \   000042   8583..       MOV     ?V7,DPH
   \   000045                ; Setup parameters for call to function AssocGetWithExt
   \   000045   AA..         MOV     R2,?V6
   \   000047   AB..         MOV     R3,?V7
   \   000049   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   2201          
   2202                if ( dev_ptr )
   \   00004C   EA           MOV     A,R2
   \   00004D   4B           ORL     A,R3
   \   00004E   6046         JZ      ??ZDO_ProcessParentAnnceRsp_3
   2203                {
   2204                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2205                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   000050   8A82         MOV     DPL,R2
   \   000052   8B83         MOV     DPH,R3
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   7401         MOV     A,#0x1
   \   00005C   68           XRL     A,R0
   \   00005D   6005         JZ      ??ZDO_ProcessParentAnnceRsp_4
   \   00005F   7402         MOV     A,#0x2
   \   000061   68           XRL     A,R0
   \   000062   7032         JNZ     ??ZDO_ProcessParentAnnceRsp_3
   2206                  {
   2207                    if ( dev_ptr->keepaliveRcv == TRUE )
   \                     ??ZDO_ProcessParentAnnceRsp_4:
   \   000064   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000067   7010         JNZ     ??ZDO_ProcessParentAnnceRsp_5
   2208                    {
   2209                      localAge = dev_ptr->endDev.deviceTimeout - dev_ptr->timeoutCounter;
   \   000069   12....       LCALL   ?Subroutine88 & 0xFFFF
   2210                    }
   \                     ??CrossCallReturnLabel_135:
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?L_MOV_X
   \   000071   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?L_SUB_X
   2211          
   2212                    if ( localAge >= parentAnnce->childInfo[x].age )
   \                     ??ZDO_ProcessParentAnnceRsp_5:
   \   000079   85..82       MOV     DPL,?V8
   \   00007C   85..83       MOV     DPH,?V9
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   78..         MOV     R0,#?V0
   \   00008A   12....       LCALL   ?UL_GE_X
   \   00008D   5007         JNC     ??ZDO_ProcessParentAnnceRsp_3
   2213                    {
   2214                      AssocRemove( parentAnnce->childInfo[x].extAddr );
   \   00008F                ; Setup parameters for call to function AssocRemove
   \   00008F   AA..         MOV     R2,?V6
   \   000091   AB..         MOV     R3,?V7
   \   000093   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   2215                    }
   2216                  }
   2217                }
   2218              }
   \                     ??ZDO_ProcessParentAnnceRsp_3:
   \   000096   05..         INC     ?V4
   \                     ??ZDO_ProcessParentAnnceRsp_1:
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F8           MOV     R0,A
   \   00009E   E5..         MOV     A,?V4
   \   0000A0   C3           CLR     C
   \   0000A1   98           SUBB    A,R0
   \   0000A2   5003         JNC     $+5
   \   0000A4   02....       LJMP    ??ZDO_ProcessParentAnnceRsp_2 & 0xFFFF
   2219          
   2220              // Free memory allocated by parsing function
   2221              osal_mem_free( parentAnnce );
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   EE           MOV     A,R6
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2222            }
   2223          }
   \                     ??ZDO_ProcessParentAnnceRsp_0:
   \   0000AE   7F0C         MOV     R7,#0xc
   \   0000B0   02....       LJMP    ?BANKED_LEAVE_XDATA
   2224          
   2225          /*********************************************************************
   2226           * @fn          ZDO_BuildSimpleDescBuf
   2227           *
   2228           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2229           *
   2230           * @param       buf  - pointer to a byte array big enough for data.
   2231           * @param       desc - SimpleDescriptionFormat_t *
   2232           *
   2233           * @return      none
   2234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2235          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2236          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2237            byte cnt;
   2238            uint16 *ptr;
   2239          
   2240            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   00000C   12....       LCALL   ?Subroutine117 & 0xFFFF
   2241            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_197:
   \   00000F   A3           INC     DPTR
   \   000010   A882         MOV     R0,DPL
   \   000012   A983         MOV     R1,DPH
   \   000014   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000017   12....       LCALL   ?Subroutine24 & 0xFFFF
   2242            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_29:
   \   00001A   F0           MOVX    @DPTR,A
   2243            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001B   EC           MOV     A,R4
   \   00001C   2403         ADD     A,#0x3
   \   00001E   F8           MOV     R0,A
   \   00001F   E4           CLR     A
   \   000020   3D           ADDC    A,R5
   \   000021   F9           MOV     R1,A
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine24 & 0xFFFF
   2244            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_30:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ?Subroutine117 & 0xFFFF
   2245          
   2246            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_198:
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C4           SWAP    A
   \   00003A   54F0         ANL     A,#0xf0
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
   2247          
   2248            *buf++ = desc->AppNumInClusters;
   \   000046   EC           MOV     A,R4
   \   000047   2406         ADD     A,#0x6
   \   000049   F8           MOV     R0,A
   \   00004A   E4           CLR     A
   \   00004B   3D           ADDC    A,R5
   \   00004C   F9           MOV     R1,A
   \   00004D   88..         MOV     ?V2,R0
   \   00004F   89..         MOV     ?V3,R1
   \   000051   8882         MOV     DPL,R0
   \   000053   F583         MOV     DPH,A
   \   000055   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   EA           MOV     A,R2
   \   000060   2407         ADD     A,#0x7
   \   000062   FA           MOV     R2,A
   \   000063   5001         JNC     ??ZDO_BuildSimpleDescBuf_0
   \   000065   0B           INC     R3
   2249            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000066   8C82         MOV     DPL,R4
   \   000068   8D83         MOV     DPH,R5
   \   00006A   12....       LCALL   ?Subroutine81 & 0xFFFF
   2250            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_124:
   \   00006D   8018         SJMP    ??ZDO_BuildSimpleDescBuf_1
   2251            {
   2252              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00006F   12....       LCALL   ?Subroutine43 & 0xFFFF
   2253              *buf++ = LO_UINT16( *ptr );
   2254            }
   \                     ??CrossCallReturnLabel_369:
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   F0           MOVX    @DPTR,A
   \   000077   EA           MOV     A,R2
   \   000078   2402         ADD     A,#0x2
   \   00007A   FA           MOV     R2,A
   \   00007B   5001         JNC     ??ZDO_BuildSimpleDescBuf_3
   \   00007D   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00007E   EE           MOV     A,R6
   \   00007F   2402         ADD     A,#0x2
   \   000081   FE           MOV     R6,A
   \   000082   5001         JNC     ??ZDO_BuildSimpleDescBuf_4
   \   000084   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000085   05..         INC     ?V0
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   A882         MOV     R0,DPL
   \   00008E   A983         MOV     R1,DPH
   \   000090   85..82       MOV     DPL,?V2
   \   000093   85..83       MOV     DPH,?V3
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F5..         MOV     ?V1,A
   \   000099   E5..         MOV     A,?V0
   \   00009B   C3           CLR     C
   \   00009C   95..         SUBB    A,?V1
   \   00009E   40CF         JC      ??ZDO_BuildSimpleDescBuf_2
   2255          
   2256            *buf++ = desc->AppNumOutClusters;
   \   0000A0   EC           MOV     A,R4
   \   0000A1   2409         ADD     A,#0x9
   \   0000A3   FE           MOV     R6,A
   \   0000A4   E4           CLR     A
   \   0000A5   3D           ADDC    A,R5
   \   0000A6   FF           MOV     R7,A
   \   0000A7   8E..         MOV     ?V2,R6
   \   0000A9   8F..         MOV     ?V3,R7
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   E8           MOV     A,R0
   \   0000B4   FA           MOV     R2,A
   \   0000B5   E9           MOV     A,R1
   \   0000B6   FB           MOV     R3,A
   2257            ptr = desc->pAppOutClusterList;
   \   0000B7   8C82         MOV     DPL,R4
   \   0000B9   8D83         MOV     DPH,R5
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   12....       LCALL   ?Subroutine81 & 0xFFFF
   2258            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_125:
   \   0000C1   8019         SJMP    ??ZDO_BuildSimpleDescBuf_5
   2259            {
   2260              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000C3   12....       LCALL   ?Subroutine43 & 0xFFFF
   2261              *buf++ = LO_UINT16( *ptr );
   2262            }
   \                     ??CrossCallReturnLabel_370:
   \   0000C6   8A82         MOV     DPL,R2
   \   0000C8   8B83         MOV     DPH,R3
   \   0000CA   A3           INC     DPTR
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   EA           MOV     A,R2
   \   0000CD   2402         ADD     A,#0x2
   \   0000CF   FA           MOV     R2,A
   \   0000D0   5001         JNC     ??ZDO_BuildSimpleDescBuf_7
   \   0000D2   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000D3   EE           MOV     A,R6
   \   0000D4   2402         ADD     A,#0x2
   \   0000D6   FE           MOV     R6,A
   \   0000D7   5001         JNC     ??ZDO_BuildSimpleDescBuf_8
   \   0000D9   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000DA   05..         INC     ?V0
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000DC   85..82       MOV     DPL,?V2
   \   0000DF   85..83       MOV     DPH,?V3
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   E5..         MOV     A,?V0
   \   0000E6   C3           CLR     C
   \   0000E7   98           SUBB    A,R0
   \   0000E8   40D9         JC      ??ZDO_BuildSimpleDescBuf_6
   2263          }
   \   0000EA   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A                REQUIRE ??Subroutine170_0
   \   00000A                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine178_0
   \   000001                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
   2264          
   2265          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2266          /*********************************************************************
   2267           * @fn      ZDO_MatchEndDeviceBind()
   2268           *
   2269           * @brief
   2270           *
   2271           *   Called to match end device binding requests
   2272           *
   2273           * @param  bindReq  - binding request information
   2274           * @param  SecurityUse - Security enable/disable
   2275           *
   2276           * @return  none
   2277           */
   2278          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   2279          {
   2280            zAddrType_t dstAddr;
   2281            uint8 sendRsp = FALSE;
   2282            uint8 status;
   2283          
   2284            // Is this the first request?
   2285            if ( matchED == NULL )
   2286            {
   2287              // Create match info structure
   2288              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   2289              if ( matchED )
   2290              {
   2291                // Clear the structure
   2292                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   2293          
   2294                // Copy the first request's information
   2295                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   2296                {
   2297                  status = ZDP_NO_ENTRY;
   2298                  sendRsp = TRUE;
   2299                }
   2300              }
   2301              else
   2302              {
   2303                status = ZDP_NO_ENTRY;
   2304                sendRsp = TRUE;
   2305              }
   2306          
   2307              if ( !sendRsp )
   2308              {
   2309                // Set into the correct state
   2310                matchED->state = ZDMATCH_WAIT_REQ;
   2311          
   2312                // Setup the timeout
   2313                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2314              }
   2315            }
   2316            else
   2317            {
   2318                matchED->state = ZDMATCH_SENDING_BINDS;
   2319          
   2320                // Copy the 2nd request's information
   2321                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   2322                {
   2323                  status = ZDP_NO_ENTRY;
   2324                  sendRsp = TRUE;
   2325                }
   2326          
   2327                // Make a source match for ed1
   2328                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2329                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2330                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   2331                if ( matchED->ed1numMatched )
   2332                {
   2333                  // Save the match list
   2334                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   2335                  if ( matchED->ed1Matched )
   2336                  {
   2337                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   2338                  }
   2339                  else
   2340                  {
   2341                    // Allocation error, stop
   2342                    status = ZDP_NO_ENTRY;
   2343                    sendRsp = TRUE;
   2344                  }
   2345                }
   2346          
   2347                // Make a source match for ed2
   2348                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2349                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2350                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   2351                if ( matchED->ed2numMatched )
   2352                {
   2353                  // Save the match list
   2354                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   2355                  if ( matchED->ed2Matched )
   2356                  {
   2357                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   2358                  }
   2359                  else
   2360                  {
   2361                    // Allocation error, stop
   2362                    status = ZDP_NO_ENTRY;
   2363                    sendRsp = TRUE;
   2364                  }
   2365                }
   2366          
   2367                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   2368                {
   2369                  // Do the first unbind/bind state
   2370                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   2371                }
   2372                else
   2373                {
   2374                  status = ZDP_NO_MATCH;
   2375                  sendRsp = TRUE;
   2376                }
   2377            }
   2378          
   2379            if ( sendRsp )
   2380            {
   2381              // send response to this requester
   2382              dstAddr.addrMode = Addr16Bit;
   2383              dstAddr.addr.shortAddr = bindReq->srcAddr;
   2384              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   2385          
   2386              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2387              {
   2388                // send response to first requester
   2389                dstAddr.addrMode = Addr16Bit;
   2390                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2391                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2392              }
   2393          
   2394              // Process ended - release memory used
   2395              ZDO_RemoveMatchMemory();
   2396            }
   2397          }
   2398          
   2399          /*********************************************************************
   2400           * @fn      ZDO_RemoveMatchMemory()
   2401           *
   2402           * @brief   Called to clear the memory used for the end device bind.
   2403           *
   2404           * @param  none
   2405           *
   2406           * @return  none
   2407           */
   2408          static void ZDO_RemoveMatchMemory( void )
   2409          {
   2410            if ( matchED != NULL )
   2411            {
   2412              if ( matchED->ed2Matched != NULL )
   2413              {
   2414                osal_mem_free( matchED->ed2Matched );
   2415              }
   2416              if ( matchED->ed1Matched != NULL )
   2417              {
   2418                osal_mem_free( matchED->ed1Matched );
   2419              }
   2420              if ( matchED->ed1.inClusters != NULL )
   2421              {
   2422                osal_mem_free( matchED->ed1.inClusters );
   2423              }
   2424              if ( matchED->ed1.outClusters != NULL )
   2425              {
   2426                osal_mem_free( matchED->ed1.outClusters );
   2427              }
   2428              if ( matchED->ed2.inClusters != NULL )
   2429              {
   2430                osal_mem_free( matchED->ed2.inClusters );
   2431              }
   2432              if ( matchED->ed2.outClusters != NULL )
   2433              {
   2434                osal_mem_free( matchED->ed2.outClusters );
   2435              }
   2436          
   2437              osal_mem_free( matchED );
   2438              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   2439            }
   2440          }
   2441          
   2442          /*********************************************************************
   2443           * @fn      ZDO_CopyMatchInfo()
   2444           *
   2445           * @brief   Called to copy memory used for the end device bind.
   2446           *
   2447           * @param  srcReq - source information
   2448           * @param  dstReq - destination location
   2449           *
   2450           * @return  TRUE if copy was successful.
   2451           */
   2452          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   2453          {
   2454            uint8 allOK = TRUE;
   2455          
   2456            // Copy bind information into the match info structure
   2457            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   2458          
   2459            // Initialize the destination cluster pointers
   2460            destReq->inClusters = NULL;
   2461            destReq->outClusters = NULL;
   2462          
   2463            // Copy input cluster IDs
   2464            if ( srcReq->numInClusters )
   2465            {
   2466              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   2467              if ( destReq->inClusters )
   2468              {
   2469                // Copy the clusters
   2470                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2471                                (srcReq->numInClusters * sizeof ( uint16 )) );
   2472              }
   2473              else
   2474              {
   2475                allOK = FALSE;
   2476              }
   2477            }
   2478          
   2479            // Copy output cluster IDs
   2480            if ( srcReq->numOutClusters )
   2481            {
   2482              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   2483              if ( destReq->outClusters )
   2484              {
   2485                // Copy the clusters
   2486                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2487                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   2488              }
   2489              else
   2490              {
   2491                allOK = FALSE;
   2492              }
   2493            }
   2494          
   2495            if ( allOK == FALSE )
   2496            {
   2497              if ( destReq->inClusters != NULL )
   2498              {
   2499                osal_mem_free( destReq->inClusters );
   2500              }
   2501              if ( destReq->outClusters != NULL )
   2502              {
   2503                osal_mem_free( destReq->outClusters );
   2504              }
   2505            }
   2506          
   2507            return ( allOK );
   2508          }
   2509          
   2510          /*********************************************************************
   2511           * @fn      ZDMatchSendState()
   2512           *
   2513           * @brief   State machine for the End device match message algorithm.
   2514           *
   2515           * @param  reason - state of algoritm
   2516           * @param  status - initial message status
   2517           * @param  TransSeq - next transaction sequence number
   2518           *
   2519           * @return  FALSE if error and we are not currently matching, TRUE
   2520           *          if success.
   2521           */
   2522          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   2523          {
   2524            uint8 *dstIEEEAddr = NULL;
   2525            uint8 dstEP = 0xFF;
   2526            zAddrType_t dstAddr;
   2527            zAddrType_t destinationAddr;
   2528            uint16 msgType;
   2529            uint16 clusterID = 0xFFFF;
   2530            ZDEndDeviceBind_t *ed = NULL;
   2531            uint8 rspStatus = ZDP_SUCCESS;
   2532          
   2533            if ( matchED == NULL )
   2534            {
   2535              return ( FALSE );
   2536            }
   2537          
   2538            // Check sequence number
   2539            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   2540            {
   2541              if ( TransSeq != matchED->transSeq )
   2542              {
   2543                return( FALSE ); // ignore the message
   2544              }
   2545            }
   2546          
   2547            // turn off timer
   2548            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   2549          
   2550            if ( reason == ZDMATCH_REASON_TIMEOUT )
   2551            {
   2552              rspStatus = ZDP_TIMEOUT;    // The process will stop
   2553            }
   2554          
   2555            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   2556            {
   2557              matchED->sending = ZDMATCH_SENDING_UNBIND;
   2558          
   2559              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   2560              {
   2561                rspStatus = status;
   2562              }
   2563            }
   2564            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   2565            {
   2566              if ( status == ZDP_SUCCESS )
   2567              {
   2568                matchED->sending = ZDMATCH_SENDING_UNBIND;
   2569              }
   2570              else
   2571              {
   2572                matchED->sending = ZDMATCH_SENDING_BIND;
   2573              }
   2574            }
   2575          
   2576            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   2577            {
   2578              // Move to the next cluster ID
   2579              if ( matchED->ed1numMatched )
   2580              {
   2581                matchED->ed1numMatched--;
   2582              }
   2583              else if ( matchED->ed2numMatched )
   2584              {
   2585                matchED->ed2numMatched--;
   2586              }
   2587            }
   2588          
   2589            // What message do we send now
   2590            if ( matchED->ed1numMatched )
   2591            {
   2592              ed = &(matchED->ed1);
   2593              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   2594              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2595              dstEP = matchED->ed2.endpoint;
   2596            }
   2597            else if ( matchED->ed2numMatched )
   2598            {
   2599              ed = &(matchED->ed2);
   2600              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   2601              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2602              dstEP = matchED->ed1.endpoint;
   2603            }
   2604          
   2605            dstAddr.addrMode = Addr16Bit;
   2606          
   2607            // Send the next message
   2608            if ( (rspStatus == ZDP_SUCCESS) && ed )
   2609            {
   2610              // Send unbind/bind message to source
   2611              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   2612              {
   2613                msgType = Unbind_req;
   2614              }
   2615              else
   2616              {
   2617                msgType = Bind_req;
   2618              }
   2619          
   2620              dstAddr.addr.shortAddr = ed->srcAddr;
   2621          
   2622              // Save off the transaction sequence number
   2623              matchED->transSeq = ZDP_TransID;
   2624          
   2625              destinationAddr.addrMode = Addr64Bit;
   2626              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   2627          
   2628              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2629                  &destinationAddr, dstEP, ed->SecurityUse );
   2630          
   2631              // Set timeout for response
   2632              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2633            }
   2634            else
   2635            {
   2636              // Send the response messages to requesting devices
   2637              // send response to first requester
   2638              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2639              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   2640          
   2641              // send response to second requester
   2642              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2643              {
   2644                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   2645                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2646              }
   2647          
   2648              // Process ended - release memory used
   2649              ZDO_RemoveMatchMemory();
   2650            }
   2651          
   2652            return ( TRUE );
   2653          }
   2654          
   2655          /*********************************************************************
   2656           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2657           *
   2658           * @brief   End device bind timeout.
   2659           *
   2660           * @param  none
   2661           *
   2662           * @return  none
   2663           */
   2664          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   2665          {
   2666            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   2667          }
   2668          #endif // ZG_BUILD_COORDINATOR_TYPE
   2669          
   2670          /*********************************************************************
   2671           * ZDO MESSAGE PARSING API FUNCTIONS
   2672           */
   2673          
   2674          /*********************************************************************
   2675           * @fn          ZDO_ParseEndDeviceBindReq
   2676           *
   2677           * @brief       This function parses the End_Device_Bind_req message.
   2678           *
   2679           *     NOTE:  The clusters lists in bindReq are allocated in this
   2680           *            function and must be freed by that calling function.
   2681           *
   2682           * @param       inMsg  - incoming message (request)
   2683           * @param       bindReq - pointer to place to parse message to
   2684           *
   2685           * @return      none
   2686           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2687          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2688          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2689            uint8 *msg;
   2690          
   2691            // Parse the message
   2692            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00000D   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000010   12....       LCALL   ?Subroutine29 & 0xFFFF
   2693            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_39:
   \   000013   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   12....       LCALL   ?Subroutine39 & 0xFFFF
   2694            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_436:
   \   00001D   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000020   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000023   A3           INC     DPTR
   \   000024   F0           MOVX    @DPTR,A
   2695            msg = inMsg->asdu;
   \   000025   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000028   12....       LCALL   ?Subroutine61 & 0xFFFF
   2696          
   2697            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_91:
   \   00002B   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine32 & 0xFFFF
   2698            msg += 2;
   \                     ??CrossCallReturnLabel_46:
   \   000039   5002         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   00003B   05..         INC     ?V3
   2699          
   2700            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   FC           MOV     R4,A
   \   00003E   AD..         MOV     R5,?V3
   \   000040   EE           MOV     A,R6
   \   000041   2406         ADD     A,#0x6
   \   000043   FA           MOV     R2,A
   \   000044   E4           CLR     A
   \   000045   3F           ADDC    A,R7
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2701            msg += Z_EXTADDR_LEN;
   2702          
   2703            bindReq->endpoint = *msg++;
   \   00004A   85..82       MOV     DPL,?V2
   \   00004D   85..83       MOV     DPH,?V3
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C0E0         PUSH    A
   \   00005B   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00005E   D0E0         POP     A
   \   000060   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000063   5002         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   000065   05..         INC     ?V3
   2704            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000067   F582         MOV     DPL,A
   \   000069   85..83       MOV     DPH,?V3
   \   00006C   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00006F   EE           MOV     A,R6
   \   000070   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000073   3F           ADDC    A,R7
   \   000074   F583         MOV     DPH,A
   \   000076   E8           MOV     A,R0
   \   000077   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   2705            msg += 2;
   2706          
   2707            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_385:
   \   00007A   EE           MOV     A,R6
   \   00007B   2412         ADD     A,#0x12
   \   00007D   F5..         MOV     ?V4,A
   \   00007F   E4           CLR     A
   \   000080   3F           ADDC    A,R7
   \   000081   F5..         MOV     ?V5,A
   \   000083   85..82       MOV     DPL,?V4
   \   000086   F583         MOV     DPH,A
   \   000088   E4           CLR     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   F0           MOVX    @DPTR,A
   2708            bindReq->outClusters = NULL;
   \   00008C   EE           MOV     A,R6
   \   00008D   2415         ADD     A,#0x15
   \   00008F   F5..         MOV     ?V6,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F5..         MOV     ?V7,A
   \   000095   85..82       MOV     DPL,?V6
   \   000098   F583         MOV     DPH,A
   \   00009A   E4           CLR     A
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   12....       LCALL   ?Subroutine37 & 0xFFFF
   2709          
   2710            if ((bindReq->numInClusters = *msg++) &&
   2711                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_57:
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EE           MOV     A,R6
   \   0000A2   2411         ADD     A,#0x11
   \   0000A4   F5..         MOV     ?V0,A
   \   0000A6   E4           CLR     A
   \   0000A7   3F           ADDC    A,R7
   \   0000A8   F5..         MOV     ?V1,A
   \   0000AA   EA           MOV     A,R2
   \   0000AB   85..82       MOV     DPL,?V0
   \   0000AE   85..83       MOV     DPH,?V1
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   E5..         MOV     A,?V2
   \   0000B4   2403         ADD     A,#0x3
   \   0000B6   F5..         MOV     ?V2,A
   \   0000B8   5002         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000BA   05..         INC     ?V3
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000BC   EA           MOV     A,R2
   \   0000BD   6034         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000BF                ; Setup parameters for call to function osal_mem_alloc
   \   0000BF   2A           ADD     A,R2
   \   0000C0   FA           MOV     R2,A
   \   0000C1   E4           CLR     A
   \   0000C2   33           RLC     A
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C7   8A..         MOV     ?V8,R2
   \   0000C9   8B..         MOV     ?V9,R3
   \   0000CB   AC..         MOV     R4,?V8
   \   0000CD   AD..         MOV     R5,?V9
   \   0000CF   85..82       MOV     DPL,?V4
   \   0000D2   85..83       MOV     DPH,?V5
   \   0000D5   EC           MOV     A,R4
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   ED           MOV     A,R5
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   EC           MOV     A,R4
   \   0000DB   4D           ORL     A,R5
   \   0000DC   6015         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2712            {
   2713              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000DE                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000DE   AA..         MOV     R2,?V2
   \   0000E0   AB..         MOV     R3,?V3
   \   0000E2   85..82       MOV     DPL,?V0
   \   0000E5   85..83       MOV     DPH,?V1
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   F9           MOV     R1,A
   \   0000EA   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000ED   8A..         MOV     ?V2,R2
   \   0000EF   8B..         MOV     ?V3,R3
   \   0000F1   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2714            }
   2715            else
   2716            {
   2717              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000F3   85..82       MOV     DPL,?V0
   \   0000F6   85..83       MOV     DPH,?V1
   \   0000F9   E4           CLR     A
   \   0000FA   F0           MOVX    @DPTR,A
   2718            }
   2719          
   2720            if ((bindReq->numOutClusters = *msg++) &&
   2721                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000FB   85..82       MOV     DPL,?V2
   \   0000FE   85..83       MOV     DPH,?V3
   \   000101   E0           MOVX    A,@DPTR
   \   000102   FA           MOV     R2,A
   \   000103   EE           MOV     A,R6
   \   000104   2414         ADD     A,#0x14
   \   000106   F8           MOV     R0,A
   \   000107   E4           CLR     A
   \   000108   3F           ADDC    A,R7
   \   000109   F9           MOV     R1,A
   \   00010A   E8           MOV     A,R0
   \   00010B   FE           MOV     R6,A
   \   00010C   E9           MOV     A,R1
   \   00010D   FF           MOV     R7,A
   \   00010E   EA           MOV     A,R2
   \   00010F   8E82         MOV     DPL,R6
   \   000111   8F83         MOV     DPH,R7
   \   000113   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000116   8582..       MOV     ?V2,DPL
   \   000119   8583..       MOV     ?V3,DPH
   \   00011C   602E         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   00011E                ; Setup parameters for call to function osal_mem_alloc
   \   00011E   2A           ADD     A,R2
   \   00011F   FA           MOV     R2,A
   \   000120   E4           CLR     A
   \   000121   33           RLC     A
   \   000122   FB           MOV     R3,A
   \   000123   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000126   8A..         MOV     ?V0,R2
   \   000128   8B..         MOV     ?V1,R3
   \   00012A   AC..         MOV     R4,?V0
   \   00012C   AD..         MOV     R5,?V1
   \   00012E   85..82       MOV     DPL,?V6
   \   000131   85..83       MOV     DPH,?V7
   \   000134   EC           MOV     A,R4
   \   000135   F0           MOVX    @DPTR,A
   \   000136   A3           INC     DPTR
   \   000137   ED           MOV     A,R5
   \   000138   F0           MOVX    @DPTR,A
   \   000139   EC           MOV     A,R4
   \   00013A   4D           ORL     A,R5
   \   00013B   600F         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2722            {
   2723              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00013D                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00013D   AA..         MOV     R2,?V2
   \   00013F   AB..         MOV     R3,?V3
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00014A   8006         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2724            }
   2725            else
   2726            {
   2727              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00014C   8E82         MOV     DPL,R6
   \   00014E   8F83         MOV     DPH,R7
   \   000150   E4           CLR     A
   \   000151   F0           MOVX    @DPTR,A
   2728            }
   2729          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000152   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   3B           ADDC    A,R3
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   3B           ADDC    A,R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V2
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V2,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5..         MOV     A,?V2
   \   000003   2409         ADD     A,#0x9
   \   000005   F5..         MOV     ?V2,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine181_0
   \   000002                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine182_0
   \   000001                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   EA           MOV     A,R2
   \   000005   22           RET
   2730          
   2731          /*********************************************************************
   2732           * @fn          ZDO_ParseBindUnbindReq
   2733           *
   2734           * @brief       This function parses the Bind_req or Unbind_req message.
   2735           *
   2736           * @param       inMsg  - incoming message (request)
   2737           * @param       pReq - place to put parsed information
   2738           *
   2739           * @return      none
   2740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2741          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2743            uint8 *msg;
   2744          
   2745            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V1,A
   2746            osal_cpyExtAddr( pReq->srcAddress, msg );
   \   000012                ; Setup parameters for call to function sAddrExtCpy
   \   000012   AC..         MOV     R4,?V0
   \   000014   FD           MOV     R5,A
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2747            msg += Z_EXTADDR_LEN;
   2748            pReq->srcEndpoint = *msg++;
   \   00001C   85..82       MOV     DPL,?V0
   \   00001F   85..83       MOV     DPH,?V1
   \   000022   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000025   F0           MOVX    @DPTR,A
   \   000026   E5..         MOV     A,?V0
   \   000028   2409         ADD     A,#0x9
   \   00002A   F5..         MOV     ?V0,A
   \   00002C   5002         JNC     ??ZDO_ParseBindUnbindReq_0
   \   00002E   05..         INC     ?V1
   2749            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000030   F582         MOV     DPL,A
   \   000032   85..83       MOV     DPH,?V1
   \   000035   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000038   12....       LCALL   ?Subroutine35 & 0xFFFF
   2750            msg += 2;
   2751            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_54:
   \   00003B   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00003E   E5..         MOV     A,?V0
   \   000040   2403         ADD     A,#0x3
   \   000042   F5..         MOV     ?V0,A
   \   000044   5002         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000046   05..         INC     ?V1
   2752            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000048   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00004B   701F         JNZ     ??ZDO_ParseBindUnbindReq_2
   2753            {
   2754              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00004D                ; Setup parameters for call to function sAddrExtCpy
   \   00004D   AC..         MOV     R4,?V0
   \   00004F   AD..         MOV     R5,?V1
   \   000051   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2755              msg += Z_EXTADDR_LEN;
   2756              pReq->dstEndpoint = *msg;
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   C0E0         PUSH    A
   \   000065   12....       LCALL   ?Subroutine107 & 0xFFFF
   2757            }
   \                     ??CrossCallReturnLabel_174:
   \   000068   D0E0         POP     A
   \   00006A   800C         SJMP    ??ZDO_ParseBindUnbindReq_3
   2758            else
   2759            {
   2760              // copy group address
   2761              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   00006C   85..82       MOV     DPL,?V0
   \   00006F   85..83       MOV     DPH,?V1
   \   000072   12....       LCALL   ?Subroutine69 & 0xFFFF
   2762            }
   \                     ??CrossCallReturnLabel_106:
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000078   F0           MOVX    @DPTR,A
   2763          }
   \   000079   02....       LJMP    ??Subroutine149_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   7403         MOV     A,#0x3
   \   000009   68           XRL     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F8           MOV     R0,A
   \   000001   EE           MOV     A,R6
   \   000002   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   E9           MOV     A,R1
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   2764          
   2765          /*********************************************************************
   2766           * @fn      ZDO_ParseAddrRsp
   2767           *
   2768           * @brief   Turns the inMsg (incoming message) into the out parsed
   2769           *          structure.
   2770           *
   2771           * @param   inMsg - incoming message
   2772           *
   2773           * @return  pointer to parsed structures.  This structure was
   2774           *          allocated using osal_mem_alloc, so it must be freed
   2775           *          by the calling function [osal_mem_free()].
   2776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine161_0
   \   000004                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2777          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2779            ZDO_NwkIEEEAddrResp_t *rsp;
   2780            uint8 *msg;
   2781            byte cnt = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   2782          
   2783            // Calculate the number of items in the list
   2784            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000008   EA           MOV     A,R2
   \   000009   2413         ADD     A,#0x13
   \   00000B   F8           MOV     R0,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   FE           MOV     R6,A
   \   000011   E9           MOV     A,R1
   \   000012   FF           MOV     R7,A
   \   000013   EA           MOV     A,R2
   \   000014   2410         ADD     A,#0x10
   \   000016   F582         MOV     DPL,A
   \   000018   E4           CLR     A
   \   000019   3B           ADDC    A,R3
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C3           CLR     C
   \   00001E   940C         SUBB    A,#0xc
   \   000020   4013         JC      ??ZDO_ParseAddrRsp_0
   2785            {
   2786              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   2787            }
   \                     ??CrossCallReturnLabel_363:
   \   000029   C8           XCH     A,R0
   \   00002A   240B         ADD     A,#0xb
   \   00002C   F582         MOV     DPL,A
   \   00002E   E4           CLR     A
   \   00002F   38           ADDC    A,R0
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V2,A
   2788            else
   2789            {
   2790              cnt = 0;
   2791            }
   2792          
   2793            // Make buffer
   2794            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   A8..         MOV     R0,?V2
   \   000037   E8           MOV     A,R0
   \   000038   28           ADD     A,R0
   \   000039   F8           MOV     R0,A
   \   00003A   E4           CLR     A
   \   00003B   33           RLC     A
   \   00003C   F9           MOV     R1,A
   \   00003D   E8           MOV     A,R0
   \   00003E   240D         ADD     A,#0xd
   \   000040   FA           MOV     R2,A
   \   000041   E4           CLR     A
   \   000042   39           ADDC    A,R1
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000047   8A..         MOV     ?V0,R2
   \   000049   8B..         MOV     ?V1,R3
   2795          
   2796            if ( rsp )
   \   00004B   EA           MOV     A,R2
   \   00004C   45..         ORL     A,?V1
   \   00004E   7003         JNZ     $+5
   \   000050   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2797            {
   2798              msg = inMsg->asdu;
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   2799          
   2800              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_399:
   \   00005A   F8           MOV     R0,A
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   12....       LCALL   ?Subroutine36 & 0xFFFF
   2801              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_55:
   \   000062   6003         JZ      $+5
   \   000064   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2802              {
   2803                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000067                ; Setup parameters for call to function sAddrExtCpy
   \   000067   EE           MOV     A,R6
   \   000068   FC           MOV     R4,A
   \   000069   EF           MOV     A,R7
   \   00006A   FD           MOV     R5,A
   \   00006B   EA           MOV     A,R2
   \   00006C   2403         ADD     A,#0x3
   \   00006E   FA           MOV     R2,A
   \   00006F   E4           CLR     A
   \   000070   35..         ADDC    A,?V1
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2804                msg += Z_EXTADDR_LEN;
   \   000076   EE           MOV     A,R6
   \   000077   2408         ADD     A,#0x8
   \   000079   FE           MOV     R6,A
   \   00007A   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   00007C   0F           INC     R7
   2805                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00007D   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000080   85..82       MOV     DPL,?V0
   \   000083   85..83       MOV     DPH,?V1
   \   000086   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   2806          
   2807                msg += 2;
   2808                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_386:
   \   000089   E5..         MOV     A,?V0
   \   00008B   240B         ADD     A,#0xb
   \   00008D   F8           MOV     R0,A
   \   00008E   E4           CLR     A
   \   00008F   35..         ADDC    A,?V1
   \   000091   F9           MOV     R1,A
   \   000092   E8           MOV     A,R0
   \   000093   FA           MOV     R2,A
   \   000094   E9           MOV     A,R1
   \   000095   FB           MOV     R3,A
   \   000096   8A82         MOV     DPL,R2
   \   000098   8B83         MOV     DPH,R3
   \   00009A   E4           CLR     A
   \   00009B   F0           MOVX    @DPTR,A
   2809          
   2810                // StartIndex field is only present if NumAssocDev field is non-zero.
   2811                if ( cnt > 0 )
   \   00009C   E5..         MOV     A,?V2
   \   00009E   604B         JZ      ??ZDO_ParseAddrRsp_1
   2812                {
   2813                  uint16 *pList = &(rsp->devList[0]);
   \   0000A0   E5..         MOV     A,?V0
   \   0000A2   240D         ADD     A,#0xd
   \   0000A4   F8           MOV     R0,A
   \   0000A5   E4           CLR     A
   \   0000A6   35..         ADDC    A,?V1
   \   0000A8   F9           MOV     R1,A
   2814                  byte n = cnt;
   2815          
   2816                  rsp->numAssocDevs = *msg++;
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   A3           INC     DPTR
   \   0000AE   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   0000B1   12....       LCALL   ?Subroutine15 & 0xFFFF
   2817                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_11:
   \   0000B4   C0E0         PUSH    A
   \   0000B6   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0000B9   D0E0         POP     A
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   EE           MOV     A,R6
   \   0000BD   2404         ADD     A,#0x4
   \   0000BF   FE           MOV     R6,A
   \   0000C0   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000C2   0F           INC     R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000C3   85....       MOV     ?V3,?V2
   2818          
   2819                  while ( n != 0 )
   2820                  {
   2821                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FC           MOV     R4,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FB           MOV     R3,A
   \   0000CF   EC           MOV     A,R4
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0000D7   E8           MOV     A,R0
   \   0000D8   2402         ADD     A,#0x2
   \   0000DA   F8           MOV     R0,A
   \   0000DB   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000DD   09           INC     R1
   2822                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   2402         ADD     A,#0x2
   \   0000E1   FE           MOV     R6,A
   \   0000E2   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000E4   0F           INC     R7
   2823                    n--;
   2824                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000E5   15..         DEC     ?V3
   \   0000E7   E5..         MOV     A,?V3
   \   0000E9   70DB         JNZ     ??ZDO_ParseAddrRsp_4
   2825                }
   2826              }
   2827            }
   2828          
   2829            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000EB   AA..         MOV     R2,?V0
   \   0000ED   AB..         MOV     R3,?V1
   \   0000EF                REQUIRE ?Subroutine4
   \   0000EF                ; // Fall through to label ?Subroutine4
   2830          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine171_0
   \   000004                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine173_0
   \   000001                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000003   FF           MOV     R7,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET
   2831          
   2832          /*********************************************************************
   2833           * @fn          ZDO_ParseNodeDescRsp
   2834           *
   2835           * @brief       This function parses the Node_Desc_rsp message.
   2836           *
   2837           * @param       inMsg - incoming message
   2838           * @param       pNDRsp - place to parse the message into
   2839           *
   2840           * @return      none
   2841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2842          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2843          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2844            uint8 *msg;
   2845          
   2846            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2847          
   2848            pNDRsp->status = *msg++;
   2849            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2850          
   2851            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2852            {
   2853              msg += 2;
   2854              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV     A,R0
   \   00000E   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000011   39           ADDC    A,R1
   \   000012   FB           MOV     R3,A
   \   000013   EC           MOV     A,R4
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   3D           ADDC    A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   5407         ANL     A,#0x7
   \   000021   F5..         MOV     ?V0,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   54F8         ANL     A,#0xf8
   \   00002A   45..         ORL     A,?V0
   \   00002C   12....       LCALL   ?Subroutine23 & 0xFFFF
   2855          
   2856              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_26:
   \   00002F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   F5..         MOV     ?V0,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   A2E3         MOV     C,0xE0 /* A   */.3
   \   000038   8F83         MOV     DPH,R7
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   92E3         MOV     0xE0 /* A   */.3,C
   \   00003F   12....       LCALL   ?Subroutine23 & 0xFFFF
   2857              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_27:
   \   000042   A2E4         MOV     C,0xE0 /* A   */.4
   \   000044   E4           CLR     A
   \   000045   33           RLC     A
   \   000046   F5..         MOV     ?V1,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   A2E4         MOV     C,0xE0 /* A   */.4
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   92E4         MOV     0xE0 /* A   */.4,C
   \   000052   F0           MOVX    @DPTR,A
   2858          
   2859              msg++;  // Reserved bits.
   2860              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000053   E8           MOV     A,R0
   \   000054   2403         ADD     A,#0x3
   \   000056   0A           INC     R2
   \   000057   E4           CLR     A
   \   000058   39           ADDC    A,R1
   \   000059   FB           MOV     R3,A
   \   00005A   EC           MOV     A,R4
   \   00005B   2404         ADD     A,#0x4
   \   00005D   0E           INC     R6
   \   00005E   E4           CLR     A
   \   00005F   3D           ADDC    A,R5
   \   000060   FF           MOV     R7,A
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   54F8         ANL     A,#0xf8
   \   000068   F5..         MOV     ?V2,A
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   5407         ANL     A,#0x7
   \   000071   45..         ORL     A,?V2
   \   000073   F5..         MOV     ?V2,A
   \   000075   12....       LCALL   ?Subroutine23 & 0xFFFF
   2861              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_28:
   \   000078   5407         ANL     A,#0x7
   \   00007A   FA           MOV     R2,A
   \   00007B   74F8         MOV     A,#-0x8
   \   00007D   55..         ANL     A,?V2
   \   00007F   4A           ORL     A,R2
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   12....       LCALL   ?Subroutine33 & 0xFFFF
   2862              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_48:
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   12....       LCALL   ?Subroutine34 & 0xFFFF
   2863              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_51:
   \   000093   A3           INC     DPTR
   \   000094   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000097   12....       LCALL   ?Subroutine30 & 0xFFFF
   2864              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_42:
   \   00009A   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00009D   12....       LCALL   ?Subroutine30 & 0xFFFF
   2865              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_43:
   \   0000A0   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   0000A3   12....       LCALL   ?Subroutine18 & 0xFFFF
   2866              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_19:
   \   0000A6   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000A9   12....       LCALL   ?Subroutine18 & 0xFFFF
   2867              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_20:
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   240A         ADD     A,#0xa
   \   0000BD   F8           MOV     R0,A
   \   0000BE   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   0000C0   09           INC     R1
   2868              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0000C8   FB           MOV     R3,A
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EC           MOV     A,R4
   \   0000CC   240B         ADD     A,#0xb
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   E4           CLR     A
   \   0000D1   3D           ADDC    A,R5
   \   0000D2   F583         MOV     DPH,A
   \   0000D4   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   2869              msg += 2;
   2870              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_299:
   \   0000D7   8882         MOV     DPL,R0
   \   0000D9   8983         MOV     DPH,R1
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C0E0         PUSH    A
   \   0000E0   EC           MOV     A,R4
   \   0000E1   240D         ADD     A,#0xd
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E4           CLR     A
   \   0000E6   3D           ADDC    A,R5
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   D0E0         POP     A
   \   0000EB   12....       LCALL   ?Subroutine34 & 0xFFFF
   2871              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2872              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2873            }
   \                     ??CrossCallReturnLabel_52:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   C0E0         PUSH    A
   \   0000F1   EC           MOV     A,R4
   \   0000F2   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   0000F5   3D           ADDC    A,R5
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   D0E0         POP     A
   \   0000FA   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000FD   C0E0         PUSH    A
   \   0000FF   EC           MOV     A,R4
   \   000100   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000103   3D           ADDC    A,R5
   \   000104   F583         MOV     DPH,A
   \   000106   D0E0         POP     A
   \   000108   F0           MOVX    @DPTR,A
   2874          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000109                REQUIRE ?Subroutine3
   \   000109                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000003   3B           ADDC    A,R3
   \   000004   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000018   FB           MOV     R3,A
   \   000019   EE           MOV     A,R6
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EB           MOV     A,R3
   \   000022   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000025   E0           MOVX    A,@DPTR
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine180_0
   \   000001                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET
   2875          
   2876          /*********************************************************************
   2877           * @fn          ZDO_ParsePowerDescRsp
   2878           *
   2879           * @brief       This function parses the Power_Desc_rsp message.
   2880           *
   2881           * @param       inMsg  - incoming message
   2882           * @param       pNPRsp - place to parse the message into
   2883           *
   2884           * @return      none
   2885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine172_0
   \   000004                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2886          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2887          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2888            uint8 *msg;
   2889          
   2890            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000008   12....       LCALL   ?Subroutine72 & 0xFFFF
   2891            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_113:
   \   00000B   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00000E   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   2892            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000018   F9           MOV     R1,A
   \   000019   EE           MOV     A,R6
   \   00001A   12....       LCALL   ?Subroutine40 & 0xFFFF
   2893          
   2894            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_389:
   \   00001D   8C82         MOV     DPL,R4
   \   00001F   8D83         MOV     DPH,R5
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2895            {
   2896              msg += 2;
   2897              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   000027   EA           MOV     A,R2
   \   000028   2402         ADD     A,#0x2
   \   00002A   F8           MOV     R0,A
   \   00002B   E4           CLR     A
   \   00002C   3B           ADDC    A,R3
   \   00002D   F9           MOV     R1,A
   \   00002E   E8           MOV     A,R0
   \   00002F   FE           MOV     R6,A
   \   000030   E9           MOV     A,R1
   \   000031   FF           MOV     R7,A
   \   000032   EC           MOV     A,R4
   \   000033   2403         ADD     A,#0x3
   \   000035   E4           CLR     A
   \   000036   3D           ADDC    A,R5
   \   000037   0C           INC     R4
   \   000038   0C           INC     R4
   \   000039   0C           INC     R4
   \   00003A   FD           MOV     R5,A
   \   00003B   8C82         MOV     DPL,R4
   \   00003D   8D83         MOV     DPH,R5
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   540F         ANL     A,#0xf
   \   000042   F5..         MOV     ?V2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V3,A
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C4           SWAP    A
   \   00004E   540F         ANL     A,#0xf
   \   000050   F5..         MOV     ?V0,A
   \   000052   75..00       MOV     ?V1,#0x0
   \   000055   7404         MOV     A,#0x4
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?S_SHL
   \   00005C   E5..         MOV     A,?V2
   \   00005E   45..         ORL     A,?V0
   \   000060   A9..         MOV     R1,?V3
   \   000062   8C82         MOV     DPL,R4
   \   000064   8D83         MOV     DPH,R5
   \   000066   12....       LCALL   ?Subroutine20 & 0xFFFF
   2898              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   2899              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   2900              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2901            }
   \                     ??CrossCallReturnLabel_21:
   \   000069   E5..         MOV     A,?V0
   \   00006B   48           ORL     A,R0
   \   00006C   F5..         MOV     ?V0,A
   \   00006E   8C82         MOV     DPL,R4
   \   000070   8D83         MOV     DPH,R5
   \   000072   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000075   2403         ADD     A,#0x3
   \   000077   E4           CLR     A
   \   000078   3B           ADDC    A,R3
   \   000079   0E           INC     R6
   \   00007A   FF           MOV     R7,A
   \   00007B   E5..         MOV     A,?V0
   \   00007D   F5..         MOV     ?V2,A
   \   00007F   E9           MOV     A,R1
   \   000080   540F         ANL     A,#0xf
   \   000082   F5..         MOV     ?V3,A
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C4           SWAP    A
   \   00008A   540F         ANL     A,#0xf
   \   00008C   F5..         MOV     ?V0,A
   \   00008E   740C         MOV     A,#0xc
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?S_SHL
   \   000095   E5..         MOV     A,?V3
   \   000097   45..         ORL     A,?V1
   \   000099   F9           MOV     R1,A
   \   00009A   8C82         MOV     DPL,R4
   \   00009C   8D83         MOV     DPH,R5
   \   00009E   E5..         MOV     A,?V2
   \   0000A0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A3   EA           MOV     A,R2
   \   0000A4   2404         ADD     A,#0x4
   \   0000A6   8C82         MOV     DPL,R4
   \   0000A8   8D83         MOV     DPH,R5
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   54F0         ANL     A,#0xf0
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   F9           MOV     R1,A
   \   0000B1   8C82         MOV     DPL,R4
   \   0000B3   8D83         MOV     DPH,R5
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   49           ORL     A,R1
   \   0000B8   F0           MOVX    @DPTR,A
   2902          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000B9   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   540F         ANL     A,#0xf
   \   000009   F8           MOV     R0,A
   \   00000A   22           RET
   2903          
   2904          /*********************************************************************
   2905           * @fn          ZDO_ParseSimpleDescRsp
   2906           *
   2907           * @brief       This function parse the Simple_Desc_rsp message.
   2908           *
   2909           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2910           *         in the SimpleDescriptionFormat_t structure are allocated
   2911           *         and the calling function needs to free [osal_msg_free()]
   2912           *         these buffers.
   2913           *
   2914           * @param       inMsg  - incoming message
   2915           * @param       pSimpleDescRsp - place to parse the message into
   2916           *
   2917           * @return      none
   2918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2919          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2920          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2921            uint8 *msg;
   2922          
   2923            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2924            pSimpleDescRsp->status = *msg++;
   2925            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2926            msg += sizeof ( uint16 );
   2927            msg++; // Skip past the length field.
   2928          
   2929            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2930            {
   2931              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FC           MOV     R4,A
   \   00000E   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV     A,R0
   \   000012   2403         ADD     A,#0x3
   \   000014   FA           MOV     R2,A
   \   000015   E4           CLR     A
   \   000016   39           ADDC    A,R1
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2932            }
   2933          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B   02....       LJMP    ?Subroutine2 & 0xFFFF
   2934          
   2935          /*********************************************************************
   2936           * @fn          ZDO_ParseEPListRsp
   2937           *
   2938           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2939           *
   2940           * @param       inMsg  - incoming message
   2941           *
   2942           * @return      none
   2943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2944          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2946            ZDO_ActiveEndpointRsp_t *pRsp;
   2947            uint8 *msg;
   2948            uint8 Status;
   2949            uint8 cnt;
   2950          
   2951            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine68 & 0xFFFF
   2952            Status = *msg++;
   \                     ??CrossCallReturnLabel_104:
   \   000008   F5..         MOV     ?V5,A
   \   00000A   A3           INC     DPTR
   \   00000B   8582..       MOV     ?V2,DPL
   \   00000E   8583..       MOV     ?V3,DPH
   2953            cnt = msg[2];
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V4,A
   2954          
   2955            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000016   F5..         MOV     ?V0,A
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   FB           MOV     R3,A
   \   00001E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV     ?V6,R2
   \   000023   8B..         MOV     ?V7,R3
   \   000025   AE..         MOV     R6,?V6
   \   000027   AF..         MOV     R7,?V7
   2956            if ( pRsp )
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   6048         JZ      ??ZDO_ParseEPListRsp_0
   2957            {
   2958              pRsp->status = Status;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   E5..         MOV     A,?V5
   \   000033   F0           MOVX    @DPTR,A
   2959              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000034   85..82       MOV     DPL,?V2
   \   000037   85..83       MOV     DPH,?V3
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FA           MOV     R2,A
   \   00003C   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00003F   EA           MOV     A,R2
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   2960              msg += sizeof( uint16 );
   2961              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_387:
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E5..         MOV     A,?V4
   \   000050   12....       LCALL   ?Subroutine38 & 0xFFFF
   2962              msg++; // pass cnt
   2963              osal_memcpy( pRsp->epList, msg, cnt );
   2964            }
   \                     ??CrossCallReturnLabel_59:
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A982         MOV     R1,DPL
   \   000057   AA83         MOV     R2,DPH
   \   000059   89..         MOV     ?V4,R1
   \   00005B   8A..         MOV     ?V5,R2
   \   00005D   88..         MOV     ?V6,R0
   \   00005F   78..         MOV     R0,#?V4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   AC..         MOV     R4,?V0
   \   000066   7D00         MOV     R5,#0x0
   \   000068   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   00006B   3F           ADDC    A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   2965          
   2966            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000075   EE           MOV     A,R6
   \   000076   FA           MOV     R2,A
   \   000077   EF           MOV     A,R7
   \   000078   FB           MOV     R3,A
   \   000079   02....       LJMP    ??Subroutine168_0 & 0xFFFF
   2967          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine177_0
   \   000001                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   F5..         MOV     ?V2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   85..82       MOV     DPL,?V2
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
   2968          
   2969          /*********************************************************************
   2970           * @fn          ZDO_ParseServerDiscRsp
   2971           *
   2972           * @brief       Parse the Server_Discovery_rsp message.
   2973           *
   2974           * @param       inMsg - incoming message.
   2975           * @param       pRsp - place to put the parsed information.
   2976           *
   2977           * @return      none
   2978           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2979          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2980          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2981            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000013   F583         MOV     DPH,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00001A   12....       LCALL   ?Subroutine42 & 0xFFFF
   2982            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_67:
   \   00001D   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   EA           MOV     A,R2
   \   00002C   12....       LCALL   ?Subroutine40 & 0xFFFF
   2983          }
   \                     ??CrossCallReturnLabel_390:
   \   00002F   02....       LJMP    ?Subroutine2 & 0xFFFF
   2984          
   2985          /*********************************************************************
   2986           * @fn          ZDO_ParseMgmtLqiRsp
   2987           *
   2988           * @brief       This function parses the incoming Management
   2989           *              LQI response
   2990           *
   2991           * @param       inMsg - incoming message
   2992           *
   2993           * @return      a pointer to parsed response structure (NULL if not allocated).
   2994           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2995           *          by the calling function [osal_mem_free()].
   2996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   FC           MOV     R4,A
   \   000001   EF           MOV     A,R7
   \   000002   FD           MOV     R5,A
   \   000003   E5..         MOV     A,?V0
   \   000005                REQUIRE ??Subroutine164_0
   \   000005                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004                REQUIRE ??Subroutine168_0
   \   000004                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2997          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2998          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2999            ZDO_MgmtLqiRsp_t *pRsp;
   3000            uint8 status;
   3001            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V5,#0x0
   3002            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V4,#0x0
   3003            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   3004            uint8 *msg;
   3005          
   3006            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine53 & 0xFFFF
   3007          
   3008            status = *msg++;
   \                     ??CrossCallReturnLabel_397:
   \   000011   F5..         MOV     ?V7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3009            if ( status == ZSuccess )
   \   000018   7017         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   3010            {
   3011              neighborLqiEntries = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V6,A
   3012              startIndex = *msg++;
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V5,A
   3013              neighborLqiCount = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V4,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2403         ADD     A,#0x3
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_0
   \   000030   0F           INC     R7
   3014            }
   3015          
   3016            // Allocate a buffer big enough to handle the list.
   3017            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   3018                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV     A,?V4
   \   000033   75F01A       MOV     B,#0x1a
   \   000036   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000039   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV     ?V2,R2
   \   00003E   8B..         MOV     ?V3,R3
   3019            if ( pRsp )
   \   000040   EA           MOV     A,R2
   \   000041   45..         ORL     A,?V3
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   3020            {
   3021              uint8 x;
   3022              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000048   12....       LCALL   ?Subroutine110 & 0xFFFF
   3023              pRsp->status = status;
   \                     ??CrossCallReturnLabel_181:
   \   00004B   12....       LCALL   ?Subroutine11 & 0xFFFF
   3024              pRsp->neighborLqiEntries = neighborLqiEntries;
   3025              pRsp->startIndex = startIndex;
   3026              pRsp->neighborLqiCount = neighborLqiCount;
   3027          
   3028              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_2:
   \   00004E   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   3029              {
   3030                uint8 tmp;
   3031          
   3032                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000051   85..82       MOV     DPL,?V0
   \   000054   85..83       MOV     DPH,?V1
   \   000057   E4           CLR     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   F0           MOVX    @DPTR,A
   3033                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   00005B                ; Setup parameters for call to function sAddrExtCpy
   \   00005B   EE           MOV     A,R6
   \   00005C   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00005F   35..         ADDC    A,?V1
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3034                msg += Z_EXTADDR_LEN;
   \   000065   EE           MOV     A,R6
   \   000066   2408         ADD     A,#0x8
   \   000068   FE           MOV     R6,A
   \   000069   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   00006B   0F           INC     R7
   3035          
   3036                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   00006C                ; Setup parameters for call to function sAddrExtCpy
   \   00006C   FC           MOV     R4,A
   \   00006D   EF           MOV     A,R7
   \   00006E   FD           MOV     R5,A
   \   00006F   E5..         MOV     A,?V0
   \   000071   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000074   35..         ADDC    A,?V1
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3037                msg += Z_EXTADDR_LEN;
   \   00007A   EE           MOV     A,R6
   \   00007B   2408         ADD     A,#0x8
   \   00007D   FE           MOV     R6,A
   \   00007E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000080   0F           INC     R7
   3038          
   3039                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000088   E5..         MOV     A,?V0
   \   00008A   2412         ADD     A,#0x12
   \   00008C   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   00008F   E8           MOV     A,R0
   \   000090   12....       LCALL   ?Subroutine19 & 0xFFFF
   3040                msg += 2;
   3041          
   3042                tmp = *msg++;
   \                     ??CrossCallReturnLabel_408:
   \   000093   F8           MOV     R0,A
   3043                pList->devType = tmp & 0x03;
   \   000094   7403         MOV     A,#0x3
   \   000096   58           ANL     A,R0
   \   000097   C0E0         PUSH    A
   \   000099   E5..         MOV     A,?V0
   \   00009B   2414         ADD     A,#0x14
   \   00009D   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   0000A0   D0E0         POP     A
   \   0000A2   F0           MOVX    @DPTR,A
   3044                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   0000A3   E8           MOV     A,R0
   \   0000A4   13           RRC     A
   \   0000A5   13           RRC     A
   \   0000A6   543F         ANL     A,#0x3f
   \   0000A8   5403         ANL     A,#0x3
   \   0000AA   C0E0         PUSH    A
   \   0000AC   E5..         MOV     A,?V0
   \   0000AE   2415         ADD     A,#0x15
   \   0000B0   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   3045                pList->relation = (tmp >> 4) & 0x07;
   \   0000B6   E8           MOV     A,R0
   \   0000B7   C4           SWAP    A
   \   0000B8   540F         ANL     A,#0xf
   \   0000BA   5407         ANL     A,#0x7
   \   0000BC   C0E0         PUSH    A
   \   0000BE   E5..         MOV     A,?V0
   \   0000C0   2416         ADD     A,#0x16
   \   0000C2   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   0000C5   D0E0         POP     A
   \   0000C7   12....       LCALL   ?Subroutine15 & 0xFFFF
   3046          
   3047                pList->permit = (*msg++) & 0x03;
   \                     ??CrossCallReturnLabel_12:
   \   0000CA   5403         ANL     A,#0x3
   \   0000CC   C0E0         PUSH    A
   \   0000CE   E5..         MOV     A,?V0
   \   0000D0   2417         ADD     A,#0x17
   \   0000D2   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   0000D5   D0E0         POP     A
   \   0000D7   12....       LCALL   ?Subroutine120 & 0xFFFF
   3048          
   3049                pList->depth = *msg++;
   \                     ??CrossCallReturnLabel_206:
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C0E0         PUSH    A
   \   0000DE   E5..         MOV     A,?V0
   \   0000E0   2418         ADD     A,#0x18
   \   0000E2   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0000E5   D0E0         POP     A
   \   0000E7   12....       LCALL   ?Subroutine31 & 0xFFFF
   3050          
   3051                pList->lqi = *msg++;
   \                     ??CrossCallReturnLabel_45:
   \   0000EA   C0E0         PUSH    A
   \   0000EC   E5..         MOV     A,?V0
   \   0000EE   2419         ADD     A,#0x19
   \   0000F0   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   0000F3   D0E0         POP     A
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   EE           MOV     A,R6
   \   0000F7   2406         ADD     A,#0x6
   \   0000F9   FE           MOV     R6,A
   \   0000FA   5001         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   0000FC   0F           INC     R7
   3052                pList++;
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   0000FD   E5..         MOV     A,?V0
   \   0000FF   241A         ADD     A,#0x1a
   \   000101   F5..         MOV     ?V0,A
   \   000103   5002         JNC     ??ZDO_ParseMgmtLqiRsp_7
   \   000105   05..         INC     ?V1
   3053              }
   \                     ??ZDO_ParseMgmtLqiRsp_7:
   \   000107   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000109   E5..         MOV     A,?V5
   \   00010B   C3           CLR     C
   \   00010C   95..         SUBB    A,?V4
   \   00010E   5003         JNC     $+5
   \   000110   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
   3054            }
   3055          
   3056            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000113   02....       LJMP    ?Subroutine6 & 0xFFFF
   3057          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003                REQUIRE ??Subroutine175_0
   \   000003                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine176_0
   \   000003                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V6
   \   00000A   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V5
   \   000010   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000013   E5..         MOV     A,?V4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   75..00       MOV     ?V5,#0x0
   \   000019   22           RET
   3058          
   3059          /*********************************************************************
   3060           * @fn          ZDO_ParseMgmNwkDiscRsp
   3061           *
   3062           * @brief       This function parses the incoming Management
   3063           *              Network Discover response.
   3064           *
   3065           * @param       inMsg - incoming message
   3066           *
   3067           * @return      pointer to parsed response.  This structure was
   3068           *          allocated using osal_mem_alloc, so it must be freed
   3069           *          by the calling function [osal_mem_free()].
   3070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3071          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   3072          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3073            ZDO_MgmNwkDiscRsp_t *pRsp;
   3074            uint8 status;
   3075            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   3076            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0,#0x0
   3077            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   3078            uint8 *msg;
   3079          
   3080            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine53 & 0xFFFF
   3081            status = *msg++;
   \                     ??CrossCallReturnLabel_398:
   \   000011   F5..         MOV     ?V5,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3082          
   3083            if ( status == ZSuccess )
   \   000018   7017         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   3084            {
   3085              networkCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V1,A
   3086              startIndex = *msg++;
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0,A
   3087              networkListCount = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V4,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2403         ADD     A,#0x3
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_0
   \   000030   0F           INC     R7
   3088            }
   3089          
   3090            // Allocate a buffer big enough to handle the list.
   3091            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   3092                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   85....       MOV     ?V2,?V4
   \   000034   75..00       MOV     ?V3,#0x0
   \   000037   7404         MOV     A,#0x4
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?S_SHL
   \   00003E   E5..         MOV     A,?V2
   \   000040   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000043   35..         ADDC    A,?V3
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV     ?V2,R2
   \   00004B   8B..         MOV     ?V3,R3
   3093            if ( pRsp )
   \   00004D   EA           MOV     A,R2
   \   00004E   45..         ORL     A,?V3
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   3094            {
   3095              uint8 x;
   3096              mgmtNwkDiscItem_t *pList;
   3097          
   3098              pRsp->status = status;
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E5..         MOV     A,?V5
   \   00005B   F0           MOVX    @DPTR,A
   3099              pRsp->networkCount = networkCount;
   \   00005C   A3           INC     DPTR
   \   00005D   E5..         MOV     A,?V1
   \   00005F   12....       LCALL   ?Subroutine29 & 0xFFFF
   3100              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_40:
   \   000062   E5..         MOV     A,?V0
   \   000064   12....       LCALL   ?Subroutine17 & 0xFFFF
   3101              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_17:
   \   000067   E5..         MOV     A,?V4
   \   000069   F0           MOVX    @DPTR,A
   3102              pList = pRsp->list;
   \   00006A   12....       LCALL   ?Subroutine110 & 0xFFFF
   3103          
   3104              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_182:
   \   00006D   75..00       MOV     ?V5,#0x0
   \   000070   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   3105              {
   3106                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000073                ; Setup parameters for call to function sAddrExtCpy
   \   000073   EE           MOV     A,R6
   \   000074   FC           MOV     R4,A
   \   000075   EF           MOV     A,R7
   \   000076   FD           MOV     R5,A
   \   000077   AA..         MOV     R2,?V0
   \   000079   AB..         MOV     R3,?V1
   \   00007B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3107                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00007E   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E9           MOV     A,R1
   \   000085   12....       LCALL   ?Subroutine16 & 0xFFFF
   3108                msg += Z_EXTADDR_LEN;
   3109          
   3110                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_15:
   \   000088   85..82       MOV     DPL,?V0
   \   00008B   85..83       MOV     DPH,?V1
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   F0           MOVX    @DPTR,A
   3111                pList->stackProfile = (*msg) & 0x0F;
   \   000099   EE           MOV     A,R6
   \   00009A   2409         ADD     A,#0x9
   \   00009C   F8           MOV     R0,A
   \   00009D   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   E5..         MOV     A,?V0
   \   0000A4   240B         ADD     A,#0xb
   \   0000A6   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   0000A9   D0E0         POP     A
   \   0000AB   12....       LCALL   ?Subroutine41 & 0xFFFF
   3112                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_62:
   \   0000AE   C0E0         PUSH    A
   \   0000B0   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   3113                pList->beaconOrder = (*msg) & 0x0F;
   \   0000B6   EE           MOV     A,R6
   \   0000B7   240A         ADD     A,#0xa
   \   0000B9   08           INC     R0
   \   0000BA   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000BD   C0E0         PUSH    A
   \   0000BF   E5..         MOV     A,?V0
   \   0000C1   240D         ADD     A,#0xd
   \   0000C3   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   0000C6   D0E0         POP     A
   \   0000C8   12....       LCALL   ?Subroutine41 & 0xFFFF
   3114                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_63:
   \   0000CB   C0E0         PUSH    A
   \   0000CD   E5..         MOV     A,?V0
   \   0000CF   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0000D2   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   0000D5   D0E0         POP     A
   \   0000D7   12....       LCALL   ?Subroutine25 & 0xFFFF
   3115                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_32:
   \   0000DA   C0E0         PUSH    A
   \   0000DC   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0000DF   D0E0         POP     A
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   EE           MOV     A,R6
   \   0000E3   240C         ADD     A,#0xc
   \   0000E5   FE           MOV     R6,A
   \   0000E6   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000E8   0F           INC     R7
   3116                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   2410         ADD     A,#0x10
   \   0000ED   F5..         MOV     ?V0,A
   \   0000EF   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000F1   05..         INC     ?V1
   3117              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000F3   05..         INC     ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000F5   E5..         MOV     A,?V5
   \   0000F7   C3           CLR     C
   \   0000F8   95..         SUBB    A,?V4
   \   0000FA   5003         JNC     $+5
   \   0000FC   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   3118            }
   3119          
   3120            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000FF   02....       LJMP    ?Subroutine6 & 0xFFFF
   3121          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   C4           SWAP    A
   \   000004   540F         ANL     A,#0xf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000007   85..82       MOV     DPL,?V0
   \   00000A   85..83       MOV     DPH,?V1
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   22           RET
   3122          
   3123          /*********************************************************************
   3124           * @fn          ZDO_ParseMgmtRtgRsp
   3125           *
   3126           * @brief       This function parses the incoming Management
   3127           *              Routing response.
   3128           *
   3129           * @param       inMsg - incoming message
   3130           *
   3131           * @return      a pointer to parsed response structure (NULL if not allocated).
   3132           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3133           *          by the calling function [osal_mem_free()].
   3134           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3135          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3136          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3137            ZDO_MgmtRtgRsp_t *pRsp;
   3138            uint8 status;
   3139            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3140            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   3141            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   3142            uint8 *msg;
   3143          
   3144            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine52 & 0xFFFF
   3145          
   3146            status = *msg++;
   3147            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_80:
   \   000011   7017         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3148            {
   3149              rtgCount = *msg++;
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V2,A
   3150              startIndex = *msg++;
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V1,A
   3151              rtgListCount = *msg++;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   EE           MOV     A,R6
   \   000024   2403         ADD     A,#0x3
   \   000026   FE           MOV     R6,A
   \   000027   5001         JNC     ??ZDO_ParseMgmtRtgRsp_0
   \   000029   0F           INC     R7
   3152            }
   3153          
   3154            // Allocate a buffer big enough to handle the list
   3155            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3156                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   E5..         MOV     A,?V0
   \   00002C   75F007       MOV     B,#0x7
   \   00002F   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000032   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3157            if ( pRsp )
   \   000035   EA           MOV     A,R2
   \   000036   4B           ORL     A,R3
   \   000037   6077         JZ      ??ZDO_ParseMgmtRtgRsp_1
   3158            {
   3159              uint8 x;
   3160              rtgItem_t *pList = pRsp->list;
   \   000039   EA           MOV     A,R2
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   E4           CLR     A
   \   00003E   3B           ADDC    A,R3
   \   00003F   F9           MOV     R1,A
   3161              pRsp->status = status;
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   E5..         MOV     A,?V3
   \   000046   F0           MOVX    @DPTR,A
   3162              pRsp->rtgCount = rtgCount;
   \   000047   A3           INC     DPTR
   \   000048   E5..         MOV     A,?V2
   \   00004A   12....       LCALL   ?Subroutine29 & 0xFFFF
   3163              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_41:
   \   00004D   E5..         MOV     A,?V1
   \   00004F   12....       LCALL   ?Subroutine17 & 0xFFFF
   3164              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_18:
   \   000052   E5..         MOV     A,?V0
   \   000054   F0           MOVX    @DPTR,A
   3165          
   3166              for ( x = 0; x < rtgListCount; x++ )
   \   000055   75..00       MOV     ?V1,#0x0
   \   000058   804F         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   3167              {
   3168                uint8 statOpt;
   3169          
   3170                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   ED           MOV     A,R5
   \   000065   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   3171                msg += 2;
   3172                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_410:
   \   000068   FC           MOV     R4,A
   \   000069   EE           MOV     A,R6
   \   00006A   2403         ADD     A,#0x3
   \   00006C   FE           MOV     R6,A
   \   00006D   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   00006F   0F           INC     R7
   3173                pList->status = (statOpt & 0x07);
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000070   7407         MOV     A,#0x7
   \   000072   5C           ANL     A,R4
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   F0           MOVX    @DPTR,A
   3174                pList->options = ((statOpt >> 3) & 0x07);
   \   00007D   EC           MOV     A,R4
   \   00007E   13           RRC     A
   \   00007F   13           RRC     A
   \   000080   13           RRC     A
   \   000081   541F         ANL     A,#0x1f
   \   000083   5407         ANL     A,#0x7
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   3175                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_371:
   \   000092   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   ED           MOV     A,R5
   \   00009A   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   3176                msg += 2;
   \                     ??CrossCallReturnLabel_442:
   \   00009D   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   00009F   0F           INC     R7
   3177                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   0000A0   E8           MOV     A,R0
   \   0000A1   2407         ADD     A,#0x7
   \   0000A3   F8           MOV     R0,A
   \   0000A4   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   0000A6   09           INC     R1
   3178              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   0000A7   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000A9   E5..         MOV     A,?V1
   \   0000AB   C3           CLR     C
   \   0000AC   95..         SUBB    A,?V0
   \   0000AE   40AA         JC      ??ZDO_ParseMgmtRtgRsp_3
   3179            }
   3180          
   3181            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000B0   02....       LJMP    ?Subroutine4 & 0xFFFF
   3182          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F5..         MOV     ?V2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   E5..         MOV     A,?V2
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2402         ADD     A,#0x2
   \   000004   FE           MOV     R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000006   F5..         MOV     ?V3,A
   \   000008   A3           INC     DPTR
   \   000009   AE82         MOV     R6,DPL
   \   00000B   AF83         MOV     R7,DPH
   \   00000D   22           RET
   3183          
   3184          /*********************************************************************
   3185           * @fn          ZDO_ParseMgmtBindRsp
   3186           *
   3187           * @brief       This function parses the incoming Management
   3188           *              Binding response.
   3189           *
   3190           * @param       inMsg - pointer to message to parse
   3191           *
   3192           * @return      a pointer to parsed response structure (NULL if not allocated).
   3193           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3194           *          by the calling function [osal_mem_free()].
   3195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3196          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3197          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3198            ZDO_MgmtBindRsp_t *pRsp;
   3199            uint8 status;
   3200            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   3201            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   3202            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   3203            uint8 *msg;
   3204          
   3205            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine68 & 0xFFFF
   3206          
   3207            status = *msg++;
   \                     ??CrossCallReturnLabel_105:
   \   000011   F5..         MOV     ?V7,A
   \   000013   A3           INC     DPTR
   \   000014   8582..       MOV     ?V2,DPL
   \   000017   8583..       MOV     ?V3,DPH
   3208            if ( status == ZSuccess )
   \   00001A   701C         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3209            {
   3210              bindingCount = *msg++;
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V6,A
   3211              startIndex = *msg++;
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V5,A
   3212              bindingListCount = *msg++;
   \   000023   85..82       MOV     DPL,?V2
   \   000026   85..83       MOV     DPH,?V3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V4,A
   \   00002E   E5..         MOV     A,?V2
   \   000030   2403         ADD     A,#0x3
   \   000032   F5..         MOV     ?V2,A
   \   000034   5002         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000036   05..         INC     ?V3
   3213            }
   3214          
   3215            // Allocate a buffer big enough to handle the list
   3216            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3217                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   E5..         MOV     A,?V4
   \   00003A   75F015       MOV     B,#0x15
   \   00003D   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000040   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000043   8A..         MOV     ?V0,R2
   \   000045   8B..         MOV     ?V1,R3
   3218            if ( pRsp )
   \   000047   EA           MOV     A,R2
   \   000048   45..         ORL     A,?V1
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3219            {
   3220              uint8 x;
   3221              apsBindingItem_t *pList = pRsp->list;
   \   00004F   EA           MOV     A,R2
   \   000050   2404         ADD     A,#0x4
   \   000052   FE           MOV     R6,A
   \   000053   E4           CLR     A
   \   000054   35..         ADDC    A,?V1
   \   000056   FF           MOV     R7,A
   3222              pRsp->status = status;
   \   000057   12....       LCALL   ?Subroutine11 & 0xFFFF
   3223              pRsp->bindingCount = bindingCount;
   3224              pRsp->startIndex = startIndex;
   3225              pRsp->bindingListCount = bindingListCount;
   3226          
   3227              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   00005A   8019         SJMP    ??ZDO_ParseMgmtBindRsp_2
   3228              {
   3229                osal_cpyExtAddr( pList->srcAddr, msg );
   3230                msg += Z_EXTADDR_LEN;
   3231                pList->srcEP = *msg++;
   3232          
   3233                // Get the Cluster ID
   3234          
   3235                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3236                msg += 2;
   3237                pList->dstAddr.addrMode = *msg++;
   3238                if ( pList->dstAddr.addrMode == Addr64Bit )
   3239                {
   3240                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3241                  msg += Z_EXTADDR_LEN;
   3242                  pList->dstEP = *msg++;
   3243                }
   3244                else
   3245                {
   3246                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00005C   85..82       MOV     DPL,?V2
   \   00005F   85..83       MOV     DPH,?V3
   \   000062   12....       LCALL   ?Subroutine69 & 0xFFFF
   3247                  msg += 2;
   3248                }
   \                     ??CrossCallReturnLabel_107:
   \   000065   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000068   5002         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   00006A   05..         INC     ?V3
   3249          
   3250                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   00006C   EE           MOV     A,R6
   \   00006D   2415         ADD     A,#0x15
   \   00006F   FE           MOV     R6,A
   \   000070   5001         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   000072   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   000073   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000075   E5..         MOV     A,?V5
   \   000077   C3           CLR     C
   \   000078   95..         SUBB    A,?V4
   \   00007A   505E         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   00007C                ; Setup parameters for call to function sAddrExtCpy
   \   00007C   AC..         MOV     R4,?V2
   \   00007E   AD..         MOV     R5,?V3
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000087   85..82       MOV     DPL,?V2
   \   00008A   85..83       MOV     DPH,?V3
   \   00008D   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000090   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000093   5002         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   000095   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000097   F582         MOV     DPL,A
   \   000099   85..83       MOV     DPH,?V3
   \   00009C   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00009F   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000A2   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000A5   E5..         MOV     A,?V2
   \   0000A7   2403         ADD     A,#0x3
   \   0000A9   F5..         MOV     ?V2,A
   \   0000AB   5002         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   0000AD   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   0000AF   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0000B2   70A8         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   0000B4                ; Setup parameters for call to function sAddrExtCpy
   \   0000B4   AC..         MOV     R4,?V2
   \   0000B6   AD..         MOV     R5,?V3
   \   0000B8   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000BB   85..82       MOV     DPL,?V2
   \   0000BE   85..83       MOV     DPH,?V3
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   C0E0         PUSH    A
   \   0000CC   12....       LCALL   ?Subroutine107 & 0xFFFF
   3251              }
   3252            }
   \                     ??CrossCallReturnLabel_175:
   \   0000CF   D0E0         POP     A
   \   0000D1   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000D4   5096         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   0000D6   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000D8   8092         SJMP    ??ZDO_ParseMgmtBindRsp_4
   3253          
   3254            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000DA   AA..         MOV     R2,?V0
   \   0000DC   AB..         MOV     R3,?V1
   \   0000DE   02....       LJMP    ?Subroutine7 & 0xFFFF
   3255          }
   3256          
   3257          /*********************************************************************
   3258           * @fn          ZDO_ParseUserDescRsp
   3259           *
   3260           * @brief       This function parses the incoming User
   3261           *              Descriptor Response.
   3262           *
   3263           * @param       inMsg - incoming response message
   3264           *
   3265           * @return      a pointer to parsed response structure (NULL if not allocated).
   3266           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3267           *          by the calling function [osal_mem_free()].
   3268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3269          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3271            ZDO_UserDescRsp_t *pRsp;
   3272            uint8 *msg;
   3273            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   3274          
   3275            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00000B   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00000E   88..         MOV     ?V2,R0
   \   000010   89..         MOV     ?V3,R1
   3276          
   3277            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3278            {
   3279              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V4,A
   3280            }
   3281          
   3282            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F   AE..         MOV     R6,?V4
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V0,R2
   \   00002C   8B..         MOV     ?V1,R3
   3283            if ( pRsp )
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V1
   \   000031   604D         JZ      ??ZDO_ParseUserDescRsp_1
   3284            {
   3285              pRsp->status = msg[0];
   \   000033   85..82       MOV     DPL,?V2
   \   000036   85..83       MOV     DPH,?V3
   \   000039   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   00003C   12....       LCALL   ?Subroutine38 & 0xFFFF
   3286              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_60:
   \   00003F   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000042   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000045   EA           MOV     A,R2
   \   000046   85..82       MOV     DPL,?V0
   \   000049   8B83         MOV     DPH,R3
   \   00004B   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   3287              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_388:
   \   00004E   85..82       MOV     DPL,?V0
   \   000051   8B83         MOV     DPH,R3
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   EE           MOV     A,R6
   \   000057   F0           MOVX    @DPTR,A
   3288              if ( descLen )
   \   000058   6026         JZ      ??ZDO_ParseUserDescRsp_1
   3289              {
   3290                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   E5..         MOV     A,?V2
   \   00005C   2404         ADD     A,#0x4
   \   00005E   F5..         MOV     ?V4,A
   \   000060   E4           CLR     A
   \   000061   35..         ADDC    A,?V3
   \   000063   F5..         MOV     ?V5,A
   \   000065   88..         MOV     ?V6,R0
   \   000067   78..         MOV     R0,#?V4
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   EE           MOV     A,R6
   \   00006D   FC           MOV     R4,A
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   E5..         MOV     A,?V0
   \   000072   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   3291              }
   3292            }
   \                     ??CrossCallReturnLabel_417:
   \   000075   35..         ADDC    A,?V1
   \   000077   FB           MOV     R3,A
   \   000078   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   3293          
   3294            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000080   AA..         MOV     R2,?V0
   \   000082   AB..         MOV     R3,?V1
   \   000084   02....       LJMP    ??Subroutine168_0 & 0xFFFF
   3295          }
   3296          
   3297          /*********************************************************************
   3298           * @fn          ZDO_ParseSimpleDescBuf
   3299           *
   3300           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3301           *
   3302           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3303           * @param       desc - SimpleDescriptionFormat_t *
   3304           *
   3305           *              This routine allocates storage for the cluster IDs because
   3306           *              they are 16-bit and need to be aligned to be properly processed.
   3307           *              This routine returns non-zero if an allocation fails.
   3308           *
   3309           *              NOTE: This means that the caller or user of the input structure
   3310           *                    is responsible for freeing the memory
   3311           *
   3312           * @return      0: success
   3313           *              1: failure due to malloc failure.
   3314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3315          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3316          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3317            uint8 num, i;
   3318          
   3319            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000014   12....       LCALL   ?Subroutine36 & 0xFFFF
   3320            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_56:
   \   000017   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00001A   12....       LCALL   ?Subroutine26 & 0xFFFF
   3321            buf += 2;
   \                     ??CrossCallReturnLabel_440:
   \   00001D   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   00001F   0F           INC     R7
   3322            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine19 & 0xFFFF
   3323            buf += 2;
   3324            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_409:
   \   00002C   C4           SWAP    A
   \   00002D   540F         ANL     A,#0xf
   3325          
   3326            desc->Reserved = 0;
   \   00002F   8C82         MOV     DPL,R4
   \   000031   8D83         MOV     DPH,R5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   12....       LCALL   ?Subroutine15 & 0xFFFF
   3327            buf++;
   3328          
   3329            // move in input cluster list (if any). allocate aligned memory.
   3330            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_13:
   \   00003B   F5..         MOV     ?V4,A
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   FE           MOV     R6,A
   \   000041   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000043   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000044   8C82         MOV     DPL,R4
   \   000046   8D83         MOV     DPH,R5
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E5..         MOV     A,?V4
   \   000050   F0           MOVX    @DPTR,A
   3331            if ( num )
   \   000051   EC           MOV     A,R4
   \   000052   2407         ADD     A,#0x7
   \   000054   F5..         MOV     ?V2,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V1
   \   000059   F5..         MOV     ?V3,A
   \   00005B   E5..         MOV     A,?V4
   \   00005D   6041         JZ      ??ZDO_ParseSimpleDescBuf_2
   3332            {
   3333              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000062   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000065   EA           MOV     A,R2
   \   000066   F8           MOV     R0,A
   \   000067   EB           MOV     A,R3
   \   000068   F9           MOV     R1,A
   \   000069   85..82       MOV     DPL,?V2
   \   00006C   85..83       MOV     DPH,?V3
   \   00006F   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000072   4B           ORL     A,R3
   \   000073   607F         JZ      ??ZDO_ParseSimpleDescBuf_3
   3334              {
   3335                // malloc failed. we're done.
   3336                return 1;
   3337              }
   3338              for (i=0; i<num; ++i)
   \   000075   7C00         MOV     R4,#0x0
   \   000077   8021         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3339              {
   3340                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V6,A
   \   000080   12....       LCALL   ?Subroutine62 & 0xFFFF
   3341                buf += 2;
   3342              }
   \                     ??CrossCallReturnLabel_95:
   \   000083   E5..         MOV     A,?V6
   \   000085   28           ADD     A,R0
   \   000086   E4           CLR     A
   \   000087   39           ADDC    A,R1
   \   000088   F5..         MOV     ?V7,A
   \   00008A   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00008D   E5..         MOV     A,?V6
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E5..         MOV     A,?V7
   \   000093   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000096   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   000098   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000099   0C           INC     R4
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00009A   EC           MOV     A,R4
   \   00009B   C3           CLR     C
   \   00009C   95..         SUBB    A,?V4
   \   00009E   40D9         JC      ??ZDO_ParseSimpleDescBuf_5
   3343            }
   3344          
   3345            // move in output cluster list (if any). allocate aligned memory.
   3346            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V4,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   AE82         MOV     R6,DPL
   \   0000AA   AF83         MOV     R7,DPH
   \   0000AC   85..82       MOV     DPL,?V0
   \   0000AF   85..83       MOV     DPH,?V1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   F0           MOVX    @DPTR,A
   3347            if (num)
   \   0000BC   6065         JZ      ??ZDO_ParseSimpleDescBuf_7
   3348            {
   3349              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000BE                ; Setup parameters for call to function osal_mem_alloc
   \   0000BE   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000C1   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C4   EA           MOV     A,R2
   \   0000C5   F8           MOV     R0,A
   \   0000C6   EB           MOV     A,R3
   \   0000C7   F9           MOV     R1,A
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0000D9   4B           ORL     A,R3
   \   0000DA   701C         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3350              {
   3351                // malloc failed. free input cluster list memory if there is any
   3352                if ( desc->pAppInClusterList != NULL )
   \   0000DC   85..82       MOV     DPL,?V2
   \   0000DF   85..83       MOV     DPH,?V3
   \   0000E2   12....       LCALL   ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   0000E5   600D         JZ      ??ZDO_ParseSimpleDescBuf_3
   3353                {
   3354                  osal_mem_free(desc->pAppInClusterList);
   \   0000E7                ; Setup parameters for call to function osal_mem_free
   \   0000E7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3355          
   3356                  desc->pAppInClusterList = NULL;
   \   0000EA   85..82       MOV     DPL,?V2
   \   0000ED   85..83       MOV     DPH,?V3
   \   0000F0   E4           CLR     A
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   F0           MOVX    @DPTR,A
   3357                }
   3358                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000F4   7901         MOV     R1,#0x1
   \   0000F6   802D         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3359              }
   3360              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   0000F8   7C00         MOV     R4,#0x0
   \   0000FA   8021         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3361              {
   3362                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F5..         MOV     ?V0,A
   \   000103   12....       LCALL   ?Subroutine62 & 0xFFFF
   3363                buf += 2;
   3364              }
   \                     ??CrossCallReturnLabel_96:
   \   000106   E5..         MOV     A,?V0
   \   000108   28           ADD     A,R0
   \   000109   E4           CLR     A
   \   00010A   39           ADDC    A,R1
   \   00010B   F5..         MOV     ?V1,A
   \   00010D   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   000110   E5..         MOV     A,?V0
   \   000112   F0           MOVX    @DPTR,A
   \   000113   A3           INC     DPTR
   \   000114   E5..         MOV     A,?V1
   \   000116   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000119   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   00011B   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   00011C   0C           INC     R4
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00011D   EC           MOV     A,R4
   \   00011E   C3           CLR     C
   \   00011F   95..         SUBB    A,?V4
   \   000121   40D9         JC      ??ZDO_ParseSimpleDescBuf_11
   3365            }
   3366            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000123   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000125   02....       LJMP    ??Subroutine168_0 & 0xFFFF
   3367          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   EC           MOV     A,R4
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003                REQUIRE ??Subroutine179_0
   \   000003                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0
   3368          
   3369          /*********************************************************************
   3370           * @fn          ZDO_ParseDeviceAnnce
   3371           *
   3372           * @brief       Parse a Device Announce message.
   3373           *
   3374           * @param       inMsg - Incoming message
   3375           * @param       pAnnce - place to put the parsed information
   3376           *
   3377           * @return      none
   3378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3379          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3381            uint8 *msg;
   3382          
   3383            // Parse incoming message
   3384            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00000C   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00000F   FF           MOV     R7,A
   3385            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000010   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000013   8C82         MOV     DPL,R4
   \   000015   8D83         MOV     DPH,R5
   \   000017   12....       LCALL   ?Subroutine26 & 0xFFFF
   3386            msg += 2;
   \                     ??CrossCallReturnLabel_441:
   \   00001A   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   00001C   0F           INC     R7
   3387            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000020   35..         ADDC    A,?V1
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3388            msg += Z_EXTADDR_LEN;
   3389            pAnnce->capabilities = *msg;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
   3390          }
   \   000035   02....       LJMP    ??Subroutine149_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?V0
   \   000009   85..83       MOV     DPH,?V1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET
   3391          
   3392          /*********************************************************************
   3393           * @fn          ZDO_ParseParentAnnce
   3394           *
   3395           * @brief       Parse Parent Announce and Parent Announce Rsp messages,
   3396           *              both messages have the same payload.
   3397           *
   3398           * @param       inMsg - Incoming message
   3399           *
   3400           * @return      a pointer to parsed response structure (NULL if not allocated).
   3401           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3402           *          by the calling function [osal_mem_free()].
   3403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3404          ZDO_ParentAnnce_t *ZDO_ParseParentAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseParentAnnce:
   3405          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3406            ZDO_ParentAnnce_t *pRcvdMsg;
   3407            uint8 *msg;
   3408            uint8 numChildren;
   3409          
   3410            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine52 & 0xFFFF
   3411            numChildren = *msg++;
   3412          
   3413            // Allocate a buffer big enough to handle the list
   3414            pRcvdMsg = (ZDO_ParentAnnce_t *)osal_mem_alloc(
   3415                       (sizeof(ZDO_ParentAnnce_t) + (numChildren * sizeof(ZDO_ChildInfo_t))));
   \                     ??CrossCallReturnLabel_81:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   75F00C       MOV     B,#0xc
   \   00000B   A4           MUL     AB
   \   00000C   A9F0         MOV     R1,B
   \   00000E   2401         ADD     A,#0x1
   \   000010   FA           MOV     R2,A
   \   000011   E4           CLR     A
   \   000012   39           ADDC    A,R1
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000017   8A..         MOV     ?V4,R2
   \   000019   8B..         MOV     ?V5,R3
   3416          
   3417            if ( pRcvdMsg )
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V5
   \   00001E   6064         JZ      ??ZDO_ParseParentAnnce_0
   3418            {
   3419              uint8 x;
   3420              ZDO_ChildInfo_t *pList = pRcvdMsg->childInfo;
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   8582..       MOV     ?V0,DPL
   \   000028   8583..       MOV     ?V1,DPH
   3421          
   3422              pRcvdMsg->numOfChildren = numChildren;
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   E5..         MOV     A,?V3
   \   000031   F0           MOVX    @DPTR,A
   3423          
   3424              for ( x = 0; x < numChildren; x++ )
   \   000032   75..00       MOV     ?V2,#0x0
   \   000035   8046         SJMP    ??ZDO_ParseParentAnnce_1
   3425              {
   3426                osal_cpyExtAddr( pList->extAddr, msg );
   \                     ??ZDO_ParseParentAnnce_2:
   \   000037                ; Setup parameters for call to function sAddrExtCpy
   \   000037   EE           MOV     A,R6
   \   000038   FC           MOV     R4,A
   \   000039   EF           MOV     A,R7
   \   00003A   FD           MOV     R5,A
   \   00003B   AA..         MOV     R2,?V0
   \   00003D   AB..         MOV     R3,?V1
   \   00003F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3427                msg += Z_EXTADDR_LEN;
   \   000042   EE           MOV     A,R6
   \   000043   2408         ADD     A,#0x8
   \   000045   FE           MOV     R6,A
   \   000046   5001         JNC     ??ZDO_ParseParentAnnce_3
   \   000048   0F           INC     R7
   3428          
   3429                pList->age = osal_build_uint32( msg, 4 );
   \                     ??ZDO_ParseParentAnnce_3:
   \   000049                ; Setup parameters for call to function osal_build_uint32
   \   000049   7904         MOV     R1,#0x4
   \   00004B   FA           MOV     R2,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FB           MOV     R3,A
   \   00004E   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000051   EA           MOV     A,R2
   \   000052   F8           MOV     R0,A
   \   000053   EB           MOV     A,R3
   \   000054   F9           MOV     R1,A
   \   000055   EC           MOV     A,R4
   \   000056   FA           MOV     R2,A
   \   000057   ED           MOV     A,R5
   \   000058   FB           MOV     R3,A
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   12....       LCALL   ?XSTORE_R0123
   3430                msg += 4;
   \   00006A   EE           MOV     A,R6
   \   00006B   2404         ADD     A,#0x4
   \   00006D   FE           MOV     R6,A
   \   00006E   5001         JNC     ??ZDO_ParseParentAnnce_4
   \   000070   0F           INC     R7
   3431          
   3432                pList++;
   \                     ??ZDO_ParseParentAnnce_4:
   \   000071   E5..         MOV     A,?V0
   \   000073   240C         ADD     A,#0xc
   \   000075   F5..         MOV     ?V0,A
   \   000077   5002         JNC     ??ZDO_ParseParentAnnce_5
   \   000079   05..         INC     ?V1
   3433              }
   \                     ??ZDO_ParseParentAnnce_5:
   \   00007B   05..         INC     ?V2
   \                     ??ZDO_ParseParentAnnce_1:
   \   00007D   E5..         MOV     A,?V2
   \   00007F   C3           CLR     C
   \   000080   95..         SUBB    A,?V3
   \   000082   40B3         JC      ??ZDO_ParseParentAnnce_2
   3434            }
   3435          
   3436            return ( pRcvdMsg );
   \                     ??ZDO_ParseParentAnnce_0:
   \   000084   AA..         MOV     R2,?V4
   \   000086   AB..         MOV     R3,?V5
   \   000088   02....       LJMP    ?Subroutine4 & 0xFFFF
   3437          }
   3438          
   3439          /*********************************************************************
   3440           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3441           *
   3442           * @brief       This function handles parsing of the incoming Management
   3443           *              Network Update notify.
   3444           *
   3445           * @param       inMsg - incoming message (request)
   3446           *
   3447           * @return      a pointer to parsed response structure (NULL if not allocated).
   3448           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3449           *          by the calling function [osal_mem_free()].
   3450           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3451          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3452          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3453            uint8 status;
   3454            uint32 scannedChannels = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   \   000008   75..00       MOV     ?V5,#0x0
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   75..00       MOV     ?V7,#0x0
   3455            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV     ?V0,#0x0
   \   000014   75..00       MOV     ?V1,#0x0
   3456            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   3457            uint8 listCount = 0;
   \   00001D   75..00       MOV     ?V10,#0x0
   3458            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000023   F5..         MOV     ?V8,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   3459            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3460          
   3461            status = *msg++;
   \   000027   85..82       MOV     DPL,?V8
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V11,A
   \   00002F   A3           INC     DPTR
   \   000030   8582..       MOV     ?V8,DPL
   \   000033   8583..       MOV     ?V9,DPH
   3462            if ( status == ZSuccess )
   \   000036   704C         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3463            {
   3464              scannedChannels = osal_build_uint32( msg, 4 );
   \   000038                ; Setup parameters for call to function osal_build_uint32
   \   000038   7904         MOV     R1,#0x4
   \   00003A   AA..         MOV     R2,?V8
   \   00003C   AB..         MOV     R3,?V9
   \   00003E   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000041   8A..         MOV     ?V4,R2
   \   000043   8B..         MOV     ?V5,R3
   \   000045   8C..         MOV     ?V6,R4
   \   000047   8D..         MOV     ?V7,R5
   3465              msg += 4;
   \   000049   E5..         MOV     A,?V8
   \   00004B   2404         ADD     A,#0x4
   \   00004D   F5..         MOV     ?V8,A
   \   00004F   5002         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000051   05..         INC     ?V9
   3466              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000053   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000056   F5..         MOV     ?V0,A
   \   000058   E4           CLR     A
   \   000059   39           ADDC    A,R1
   \   00005A   F5..         MOV     ?V1,A
   3467              msg += 2;
   \   00005C   E5..         MOV     A,?V8
   \   00005E   2402         ADD     A,#0x2
   \   000060   F5..         MOV     ?V8,A
   \   000062   5002         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   000064   05..         INC     ?V9
   3468              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   000066   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000069   F5..         MOV     ?V2,A
   \   00006B   E4           CLR     A
   \   00006C   39           ADDC    A,R1
   \   00006D   F5..         MOV     ?V3,A
   3469              msg += 2;
   3470              listCount = *msg++;
   \   00006F   85..82       MOV     DPL,?V8
   \   000072   85..83       MOV     DPH,?V9
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V10,A
   \   00007A   E5..         MOV     A,?V8
   \   00007C   2403         ADD     A,#0x3
   \   00007E   F5..         MOV     ?V8,A
   \   000080   5002         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_0
   \   000082   05..         INC     ?V9
   3471            }
   3472          
   3473            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000084   AE..         MOV     R6,?V10
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   EE           MOV     A,R6
   \   000087   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   FB           MOV     R3,A
   \   00008D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000090   8A..         MOV     ?V14,R2
   \   000092   8B..         MOV     ?V15,R3
   3474          
   3475            if ( pRsp )
   \   000094   EA           MOV     A,R2
   \   000095   45..         ORL     A,?V15
   \   000097   6048         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3476            {
   3477              pRsp->status = status;
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   E5..         MOV     A,?V11
   \   00009F   F0           MOVX    @DPTR,A
   3478              pRsp->scannedChannels = scannedChannels;
   \   0000A0   A3           INC     DPTR
   \   0000A1   78..         MOV     R0,#?V4
   \   0000A3   12....       LCALL   ?L_MOV_TO_X
   3479              pRsp->totalTransmissions = totalTransmissions;
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E5..         MOV     A,?V0
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E5..         MOV     A,?V1
   \   0000B5   12....       LCALL   ?Subroutine12 & 0xFFFF
   3480              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_5:
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E5..         MOV     A,?V3
   \   0000BE   12....       LCALL   ?Subroutine12 & 0xFFFF
   3481              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_6:
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F0           MOVX    @DPTR,A
   3482          
   3483              // Allocate a buffer big enough to handle the list.
   3484              if ( listCount > 0 )
   \   0000C5   601A         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3485              {
   3486                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000C7                ; Setup parameters for call to function osal_memcpy
   \   0000C7   75..00       MOV     ?V10,#0x0
   \   0000CA   78..         MOV     R0,#?V8
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CF   EE           MOV     A,R6
   \   0000D0   FC           MOV     R4,A
   \   0000D1   7D00         MOV     R5,#0x0
   \   0000D3   12....       LCALL   ?Subroutine105 & 0xFFFF
   3487              }
   3488            }
   \                     ??CrossCallReturnLabel_396:
   \   0000D6   35..         ADDC    A,?V15
   \   0000D8   FB           MOV     R3,A
   \   0000D9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000DC   7403         MOV     A,#0x3
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   3489          
   3490            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000E1   AA..         MOV     R2,?V14
   \   0000E3   AB..         MOV     R3,?V15
   \   0000E5   02....       LJMP    ??Subroutine156_0 & 0xFFFF
   3491          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F582         MOV     DPL,A
   \   000002   85..83       MOV     DPH,?V9
   \   000005                REQUIRE ??Subroutine184_0
   \   000005                ; // Fall through to label ??Subroutine184_0
   3492          
   3493          /*********************************************************************
   3494           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3495           *
   3496           * @brief       This function handles parsing the incoming Management
   3497           *              Network Update request and starts the request (if needed).
   3498           *
   3499           * @param       inMsg - incoming message (request)
   3500           * @param       pReq - pointer to place to parse message to
   3501           *
   3502           * @return      none
   3503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3504          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3505          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3506            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00000C   12....       LCALL   ?Subroutine63 & 0xFFFF
   3507          
   3508            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_98:
   \   00000F   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000012   EA           MOV     A,R2
   \   000013   F8           MOV     R0,A
   \   000014   EB           MOV     A,R3
   \   000015   F9           MOV     R1,A
   \   000016   EC           MOV     A,R4
   \   000017   FA           MOV     R2,A
   \   000018   ED           MOV     A,R5
   \   000019   FB           MOV     R3,A
   \   00001A   85..82       MOV     DPL,?V0
   \   00001D   85..83       MOV     DPH,?V1
   \   000020   12....       LCALL   ?XSTORE_R0123
   3509            msg += 4;
   3510            pReq->scanDuration = *msg++;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FA           MOV     R2,A
   \   00002D   E5..         MOV     A,?V0
   \   00002F   2404         ADD     A,#0x4
   \   000031   F8           MOV     R0,A
   \   000032   E4           CLR     A
   \   000033   35..         ADDC    A,?V1
   \   000035   F9           MOV     R1,A
   \   000036   EA           MOV     A,R2
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   F0           MOVX    @DPTR,A
   3511          
   3512            if ( pReq->scanDuration <= 0x05 )
   \   00003C   C3           CLR     C
   \   00003D   9406         SUBB    A,#0x6
   \   00003F   5009         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3513            {
   3514              // Request is to scan over channelMask
   3515              pReq->scanCount = *msg;
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ?Subroutine126 & 0xFFFF
   3516            }
   \                     ??CrossCallReturnLabel_214:
   \   000048   8027         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3517            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00004A   74FE         MOV     A,#-0x2
   \   00004C   6A           XRL     A,R2
   \   00004D   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   6A           XRL     A,R2
   \   000052   701E         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3518            {
   3519              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3520              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   EE           MOV     A,R6
   \   00005D   2406         ADD     A,#0x6
   \   00005F   FE           MOV     R6,A
   \   000060   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000062   0F           INC     R7
   3521          
   3522              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F4           CPL     A
   \   000069   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3523              {
   3524                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00006B   12....       LCALL   ?Subroutine50 & 0xFFFF
   3525              }
   3526            }
   \                     ??CrossCallReturnLabel_79:
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000071   F0           MOVX    @DPTR,A
   3527          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000072   02....       LJMP    ??Subroutine149_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessParentAnnceRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessParentAnnceRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Non Matched">`:
   \   000000   52737020     DB "Rsp Non Matched"
   \            4E6F6E20
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
   3528          
   3529          /*********************************************************************
   3530          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      0     42   ZDO_AnyClusterMatches
      1     14   ZDO_BuildSimpleDescBuf
      0     38   ZDO_ConvertOTAClusters
      1     17   ZDO_EndDeviceTimeoutCB
        0     12   -> HalLcdWriteString
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     19   ZDO_ParseEPListRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      1     18   ZDO_ParseEndDeviceBindReq
        0     18   -> ZDO_ConvertOTAClusters
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     27   ZDO_ParseMgmtNwkUpdateNotify
        0     24   -> osal_build_uint32
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     12   ZDO_ParseNodeDescRsp
      1     49   ZDO_ParseParentAnnce
        0     14   -> osal_build_uint32
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     25   ZDO_ParseSimpleDescBuf
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     41   ZDO_ProcessBindUnbindReq
        0     37   -> APSME_BindRequest
        0     36   -> APSME_LookupNwkAddr
        0     37   -> APSME_UnBindRequest
        0     36   -> NLME_GetExtAddr
        0     36   -> ZDApp_GetEmptyPendingBindReq
        0     36   -> ZDApp_NVUpdate
        0     36   -> ZDP_NwkAddrReq
        0     41   -> ZDP_SendData
        0     36   -> bindAddrIndexGet
        0     39   -> osal_memcpy
        0     40   -> osal_start_timerEx
        0     36   -> sAddrExtCmp
        0     36   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemove
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      1     35   ZDO_ProcessMatchDescReq
        0     28   -> HalLcdWriteScreen
        0     28   -> NLME_IsAddressBroadcast
        0     30   -> ZDO_AnyClusterMatches
        0     28   -> ZDO_ConvertOTAClusters
        0     35   -> ZDP_EPRsp
        0     28   -> osal_mem_alloc
        0     28   -> osal_mem_free
        0     31   -> osal_memcpy
        0     28   -> osal_msg_allocate
        0     28   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     18   -> NLME_SetPollRate
        0     18   -> NLME_SetQueuedPollRate
        0     18   -> NLME_SetResponseRate
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     66   ZDO_ProcessMgmtLqiReq
        0     61   -> AddrMgrEntryLookupNwk
        0     61   -> AssocCount
        0     61   -> AssocFindDevice
        0     61   -> NLME_GetRequest
        0     66   -> ZDP_MgmtLqiRsp
        0     61   -> osal_mem_alloc
        0     61   -> osal_mem_free
        0     61   -> osal_memset
        0     61   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     40   ZDO_ProcessParentAnnce
        0     35   -> AssocGetWithExt
        0     35   -> AssocRemove
        0     35   -> ZDO_ParseParentAnnce
        0     40   -> ZDP_ParentAnnce
        0     35   -> osal_mem_alloc
        0     35   -> osal_mem_free
        0     35   -> sAddrExtCpy
      0     20   ZDO_ProcessParentAnnceRsp
        0     20   -> AssocGetWithExt
        0     20   -> AssocRemove
        0     20   -> ZDO_ParseParentAnnce
        0     20   -> osal_mem_free
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     37   ZDO_ProcessUserDescReq
        0     37   -> ZDP_GenericRsp
        0     36   -> ZDP_UserDescRsp
        0     37   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      0     25   ZDO_StartDevice
        0     21   -> HalLcdWriteScreen
        0     21   -> NLME_NetworkDiscoveryRequest
        0     21   -> NLME_OrphanJoinRequest
        0     21   -> ZDApp_ChangeState
        0     21   -> nwk_ScanJoiningOrphan
        0     25   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0      9   ZDO_UpdateNwkStatus
        0      9   -> NLME_GetExtAddr
        0      9   -> NLME_GetShortAddr
        0      9   -> zdoSendStateChangeMsg
      1     19   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "End Device Bind">
      13  ?<Constant "MODE unknown">
      15  ?<Constant "Match Desc Req">
      12  ?<Constant "Non Matched">
      16  ?<Constant "Rsp Non Matched">
       9  ?<Constant "Rsp Sent">
      16  ?<Constant "StartDevice ERR">
      13  ?<Constant "Success Sent">
       8  ?<Constant "Timeout">
       2  ?<Initializer for zdpExternalStateTaskID>
       3  ??Subroutine148_0
       5  ??Subroutine149_0
       1  ??Subroutine150_0
       9  ??Subroutine151_0
       5  ??Subroutine152_0
       6  ??Subroutine153_0
       7  ??Subroutine154_0
       5  ??Subroutine155_0
       5  ??Subroutine156_0
       5  ??Subroutine157_0
       6  ??Subroutine158_0
       1  ??Subroutine159_0
       5  ??Subroutine160_0
       3  ??Subroutine161_0
       5  ??Subroutine162_0
       5  ??Subroutine163_0
       5  ??Subroutine164_0
       4  ??Subroutine165_0
       6  ??Subroutine166_0
       6  ??Subroutine167_0
       5  ??Subroutine168_0
       4  ??Subroutine169_0
       5  ??Subroutine170_0
       4  ??Subroutine171_0
       1  ??Subroutine172_0
       5  ??Subroutine173_0
       5  ??Subroutine174_0
       4  ??Subroutine175_0
       7  ??Subroutine176_0
       5  ??Subroutine177_0
       6  ??Subroutine178_0
      13  ??Subroutine179_0
       6  ??Subroutine180_0
       1  ??Subroutine181_0
       6  ??Subroutine182_0
       6  ??Subroutine183_0
      10  ??Subroutine184_0
       7  ?Subroutine0
       2  ?Subroutine1
      39  ?Subroutine10
       4  ?Subroutine100
       4  ?Subroutine101
       7  ?Subroutine102
       3  ?Subroutine103
      12  ?Subroutine104
       1  ?Subroutine105
      11  ?Subroutine106
      10  ?Subroutine107
      13  ?Subroutine108
       9  ?Subroutine109
      26  ?Subroutine11
      11  ?Subroutine110
      10  ?Subroutine111
      10  ?Subroutine112
       9  ?Subroutine113
       7  ?Subroutine114
      13  ?Subroutine115
       6  ?Subroutine116
       6  ?Subroutine117
       5  ?Subroutine118
       7  ?Subroutine119
       8  ?Subroutine12
       4  ?Subroutine120
       6  ?Subroutine121
       4  ?Subroutine122
       9  ?Subroutine123
      20  ?Subroutine124
       6  ?Subroutine125
      18  ?Subroutine126
       4  ?Subroutine127
       5  ?Subroutine128
      10  ?Subroutine129
      17  ?Subroutine13
       5  ?Subroutine130
       8  ?Subroutine131
       6  ?Subroutine132
      10  ?Subroutine133
       5  ?Subroutine134
       4  ?Subroutine135
       1  ?Subroutine136
       1  ?Subroutine137
       6  ?Subroutine138
       9  ?Subroutine139
      24  ?Subroutine14
       9  ?Subroutine140
      12  ?Subroutine141
       5  ?Subroutine142
       5  ?Subroutine143
       6  ?Subroutine144
      10  ?Subroutine145
      10  ?Subroutine146
       3  ?Subroutine147
       5  ?Subroutine15
       8  ?Subroutine16
       4  ?Subroutine17
       8  ?Subroutine18
       3  ?Subroutine19
       5  ?Subroutine2
      11  ?Subroutine20
      11  ?Subroutine21
       1  ?Subroutine22
       5  ?Subroutine23
      11  ?Subroutine24
      12  ?Subroutine25
       3  ?Subroutine26
       8  ?Subroutine27
       8  ?Subroutine28
       5  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
       5  ?Subroutine31
      11  ?Subroutine32
       6  ?Subroutine33
       4  ?Subroutine34
      11  ?Subroutine35
       9  ?Subroutine36
       6  ?Subroutine37
       4  ?Subroutine38
       2  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
       7  ?Subroutine41
       4  ?Subroutine42
      10  ?Subroutine43
       5  ?Subroutine44
       6  ?Subroutine45
      17  ?Subroutine46
      20  ?Subroutine47
      16  ?Subroutine48
       4  ?Subroutine49
       3  ?Subroutine5
      21  ?Subroutine50
       2  ?Subroutine51
      14  ?Subroutine52
       3  ?Subroutine53
       5  ?Subroutine54
       1  ?Subroutine55
       7  ?Subroutine56
      22  ?Subroutine57
       5  ?Subroutine58
       2  ?Subroutine59
       4  ?Subroutine6
      13  ?Subroutine60
      15  ?Subroutine61
       7  ?Subroutine62
      12  ?Subroutine63
       6  ?Subroutine64
       5  ?Subroutine65
       9  ?Subroutine66
       6  ?Subroutine67
      14  ?Subroutine68
      11  ?Subroutine69
       5  ?Subroutine7
      25  ?Subroutine70
       5  ?Subroutine71
      11  ?Subroutine72
       6  ?Subroutine73
      10  ?Subroutine74
       4  ?Subroutine75
      10  ?Subroutine76
       7  ?Subroutine77
       1  ?Subroutine78
       7  ?Subroutine79
       5  ?Subroutine8
       6  ?Subroutine80
      14  ?Subroutine81
      12  ?Subroutine82
      15  ?Subroutine83
       3  ?Subroutine84
      11  ?Subroutine85
       4  ?Subroutine86
       4  ?Subroutine87
       4  ?Subroutine88
       5  ?Subroutine89
       6  ?Subroutine9
       4  ?Subroutine90
      17  ?Subroutine91
       4  ?Subroutine92
      17  ?Subroutine93
      11  ?Subroutine94
       4  ?Subroutine95
       6  ?Subroutine96
       4  ?Subroutine97
       5  ?Subroutine98
      10  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
      52  ZDOBuildBuf
      82  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     237  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
      55  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
       2  ZDO_EDBind
     210  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      28  ZDO_Init
       6  ZDO_Init::?relay
     239  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     124  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      56  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     124  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     341  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
     258  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     225  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     278  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     232  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     117  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     179  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     265  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     139  ZDO_ParseParentAnnce
       6  ZDO_ParseParentAnnce::?relay
     188  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      50  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     296  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      30  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     135  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     124  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     583  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     369  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     993  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     264  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      81  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     214  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     729  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     128  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
      79  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     244  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      72  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
     500  ZDO_ProcessParentAnnce
       6  ZDO_ProcessParentAnnce::?relay
     179  ZDO_ProcessParentAnnceRsp
       6  ZDO_ProcessParentAnnceRsp::?relay
      72  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      70  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     133  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     192  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     297  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     247  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      51  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
      81  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_0
       4  __Constant_3e8
       4  apsChannelMask
       2  matchED
       1  scanCnt
      72  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 11 059 bytes in segment BANKED_CODE
    282 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
    126 bytes in segment XDATA_ROM_C
     61 bytes in segment XDATA_Z
 
 11 343 bytes of CODE  memory
    118 bytes of CONST memory (+ 8 bytes shared)
     63 bytes of XDATA memory

Errors: none
Warnings: none
