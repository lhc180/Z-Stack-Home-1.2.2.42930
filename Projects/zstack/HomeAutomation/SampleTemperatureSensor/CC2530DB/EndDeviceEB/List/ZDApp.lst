###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                08/Aug/2015  13:35:05
# Copyright 2004-2015 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=10000 -DQUEUED_POLL_RATE=1000 -DRESPONSE_POLL_RATE=1000
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Components\stack\zdo\ZDApp.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D ZTOOL_P1 -D
#        MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -lC
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\
#        -lA
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-02-18 17:35:22 -0800 (Wed, 18 Feb 2015) $
      4            Revision:       $Revision: 42773 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    191          
    192          /*********************************************************************
    193           * EXTERNAL VARIABLES
    194           */
    195          
    196          /*********************************************************************
    197           * EXTERNAL FUNCTIONS
    198           */
    199          
    200          /*********************************************************************
    201           * LOCAL FUNCTIONS
    202           */
    203          
    204          void ZDApp_NetworkStartEvt( void );
    205          void ZDApp_DeviceAuthEvt( void );
    206          void ZDApp_SaveNetworkStateEvt( void );
    207          
    208          uint8 ZDApp_ReadNetworkRestoreState( void );
    209          uint8 ZDApp_RestoreNetworkState( void );
    210          void ZDAppDetermineDeviceType( void );
    211          void ZDApp_InitUserDesc( void );
    212          void ZDAppCheckForHoldKey( void );
    213          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    214          void ZDApp_ProcessNetworkJoin( void );
    215          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    216          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    217          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    218          
    219          void ZDApp_SecInit( uint8 state );
    220          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    221          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    222          
    223          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    224          
    225          void ZDApp_ResetTimerStart( uint16 delay );
    226          void ZDApp_ResetTimerCancel( void );
    227          void ZDApp_LeaveCtrlInit( void );
    228          void ZDApp_LeaveCtrlSet( uint8 ra );
    229          uint8 ZDApp_LeaveCtrlBypass( void );
    230          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    231          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    232                                  uint8 removeChildren );
    233          void ZDApp_NodeProfileSync( uint8 stackProfile );
    234          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    235          void ZDApp_RegisterCBs( void );
    236          void ZDApp_InitZdoCBFunc(void);
    237          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    238          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    239          void ZDApp_InitPendingBind( void );
    240          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    241          void ZDApp_AgeOutPendingBindEntry( void );
    242          #endif
    243          
    244          void ZDApp_SetParentAnnceTimer( void );
    245          
    246          /*********************************************************************
    247           * LOCAL VARIABLES
    248           */
    249          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    250          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    251          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    252          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    253          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    254          
    255          #if defined( HOLD_AUTO_START )
    256            devStates_t devState = DEV_HOLD;
    257          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    258            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    259          #endif
    260          
    261          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    262            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    263          
    264          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    265            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    266            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    267                                  // to parent. Set to make the device do an Orphan scan.
    268          #else
    269            // Set the default to coodinator
    270            devStartModes_t devStartMode = MODE_HARD;
    271          #endif
    272          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    273          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    274          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    275          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    276          {
    277            ZDO_EP,
    278            &ZDAppTaskID,
    279            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    280            (afNetworkLatencyReq_t)0            // No Network Latency req
    281          };
    282          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    283          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    284          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    285          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    286          
    287          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    288          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    289          
    290          /*********************************************************************
    291           * @fn      ZDApp_Init
    292           *
    293           * @brief   ZDApp Initialization function.
    294           *
    295           * @param   task_id - ZDApp Task ID
    296           *
    297           * @return  None
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    300          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    301            // Save the task ID
    302            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    303          
    304            // Initialize the ZDO global device short address storage
    305            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    306            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    307            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    308          
    309            // Check for manual "Hold Auto Start"
    310            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    311          
    312            // Initialize ZDO items and setup the device - type of device to create.
    313            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    314          
    315            // Register the endpoint description with the AF
    316            // This task doesn't have a Simple description, but we still need
    317            // to register the endpoint.
    318            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    319          
    320          #if defined( ZDO_USERDESC_RESPONSE )
    321            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL   `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    322          #endif // ZDO_USERDESC_RESPONSE
    323          
    324            // Start the device?
    325            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV     DPTR,#devState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6009         JZ      ??ZDApp_Init_0
    326            {
    327              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000039   8014         SJMP    ??ZDApp_Init_1
    328            }
    329            else
    330            {
    331              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function ZDOInitDevice
   \   00003B   7AFF         MOV     R2,#-0x1
   \   00003D   7BFF         MOV     R3,#-0x1
   \   00003F   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    332              // Blink LED to indicate HOLD_START
    333              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   000042                ; Setup parameters for call to function HalLedBlink
   \   000042   7CF4         MOV     R4,#-0xc
   \   000044   7D01         MOV     R5,#0x1
   \   000046   7B32         MOV     R3,#0x32
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7908         MOV     R1,#0x8
   \   00004C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    334            }
    335          
    336            // Initialize the ZDO callback function pointers zdoCBFunc[]
    337            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004F                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004F   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    338          
    339            ZDApp_RegisterCBs();
   \   000052                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000052   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    340          
    341          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    342          #if defined ( REFLECTOR )
    343            ZDApp_InitPendingBind();
   \   000055                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000055   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    344          #endif
    345          #endif
    346          } /* ZDApp_Init() */
   \   000058   02....       LJMP    ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    347          
    348          /*********************************************************************
    349           * @fn          ZDApp_SecInit
    350           *
    351           * @brief       ZDApp initialize security.
    352           *
    353           * @param       state - device initialization state
    354           *
    355           * @return      none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    358          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    359            uint8 zgPreConfigKey[SEC_KEY_LEN];
    360          
    361            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    362            {
    363              // Set the Trust Center bit
    364              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    365            }
    366          
    367            // Initialize ZigBee Device Security Manager
    368            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    369          
    370            if ( ZG_SECURE_ENABLED )
    371            {
    372              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV     A,?V0
   \   000011   6045         JZ      ??ZDApp_SecInit_0
    373              {
    374                nwkFrameCounter = 0;
   \   000013   90....       MOV     DPTR,#nwkFrameCounter
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    375          
    376                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001E   90....       MOV     DPTR,#_NIB + 61
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7034         JNZ     ??ZDApp_SecInit_0
    377                {
    378                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    379                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000024   90....       MOV     DPTR,#zgSecurityMode
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   702C         JNZ     ??ZDApp_SecInit_0
   \   00002C   90....       MOV     DPTR,#zgPreConfigKeys
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6026         JZ      ??ZDApp_SecInit_0
    380                  {
    381                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000032                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000032   AC..         MOV     R4,?XSP + 0
   \   000034   AD..         MOV     R5,?XSP + 1
   \   000036   7A62         MOV     R2,#0x62
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    382                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   00003D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    383                      SSP_SwitchNwkKey( 0 );
   \   000046                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000046   7900         MOV     R1,#0x0
   \   000048   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    384          
    385                      // clear local copy of key
    386                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00004B                ; Setup parameters for call to function osal_memset
   \   00004B   7C10         MOV     R4,#0x10
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7900         MOV     R1,#0x0
   \   000051   AA..         MOV     R2,?XSP + 0
   \   000053   AB..         MOV     R3,?XSP + 1
   \   000055   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    387                  }
    388                }
    389              }
    390          
    391              // clean the new devices list when Security module is initialized
    392              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000058   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005B   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00005E   6021         JZ      ??ZDApp_SecInit_1
    393              {
    394                ZDAppNewDevice_t *pNewDeviceNext;
    395          
    396                while ( ZDApp_NewDeviceList )
    397                {
    398                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000060   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000063   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000066   FE           MOV     R6,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FF           MOV     R7,A
    399                  osal_mem_free( ZDApp_NewDeviceList );
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006D   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000070   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    400                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000073   EE           MOV     A,R6
   \   000074   F8           MOV     R0,A
   \   000075   EF           MOV     A,R7
   \   000076   F9           MOV     R1,A
   \   000077   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00007A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    401                }
   \                     ??CrossCallReturnLabel_58:
   \   00007D   E8           MOV     A,R0
   \   00007E   49           ORL     A,R1
   \   00007F   70DF         JNZ     ??ZDApp_SecInit_2
    402              }
    403            }
    404          }
   \                     ??ZDApp_SecInit_1:
   \   000081   7410         MOV     A,#0x10
   \   000083   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine42_0
   \   000002                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   80..         SJMP    ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET
    405          
    406          /*********************************************************************
    407           * @fn      ZDApp_event_loop()
    408           *
    409           * @brief   Main event loop for Zigbee device objects task. This function
    410           *          should be called at periodic intervals.
    411           *
    412           * @param   task_id - Task ID
    413           * @param   events  - Bitmap of events
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    419            uint8 *msg_ptr;
    420          
    421            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   702D         JNZ     ??ZDApp_event_loop_0
    422            {
    423              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    424              {
    425                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    426          
    427                // Release the memory
    428                osal_msg_deallocate( msg_ptr );
    429              }
    430          
    431              // Return unprocessed events
    432              return (events ^ SYS_EVENT_MSG);
    433            }
    434          
    435            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5041         JNC     ??ZDApp_event_loop_1
    436            {
    437              // Initialize apps and start the network
    438              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    439          
    440              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    441                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV     R4,#0xf
   \   00001B   7B0F         MOV     R3,#0xf
   \   00001D   90....       MOV     DPTR,#devStartMode
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX    A,@DPTR
   \   000026   5407         ANL     A,#0x7
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    442          
    443              // Return unprocessed events
    444              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV     A,R6
   \   00002D   6401         XRL     A,#0x1
   \   00002F   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    445            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV     R2,?V0
   \   000037   AB..         MOV     R3,?V1
   \   000039   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV     DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV     ?V0,R2
   \   000046   8B..         MOV     ?V1,R3
   \   000048   EA           MOV     A,R2
   \   000049   45..         ORL     A,?V1
   \   00004B   70E5         JNZ     ??ZDApp_event_loop_3
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   6480         XRL     A,#0x80
   \   000052   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    446          
    447            if ( ZSTACK_ROUTER_BUILD )
    448            {
    449              if ( events & ZDO_NETWORK_START )
    450              {
    451                ZDApp_NetworkStartEvt();
    452          
    453                // Return unprocessed events
    454                return (events ^ ZDO_NETWORK_START);
    455              }
    456          
    457              if ( events & ZDO_ROUTER_START )
    458              {
    459                if ( nwkStatus == ZSuccess )
    460                {
    461                  if ( devState == DEV_END_DEVICE )
    462                  {
    463                    ZDApp_ChangeState( DEV_ROUTER );
    464                  }
    465          
    466                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    467          
    468                  if ( zgChildAgingEnable == TRUE )
    469                  {
    470                    // Once the device has changed its state to a ROUTER set the timer to send
    471                    // Parent annce
    472                    ZDApp_SetParentAnnceTimer();
    473                  }
    474                }
    475                else
    476                {
    477                  // remain as end device
    478                }
    479                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    480          
    481                // Return unprocessed events
    482                return (events ^ ZDO_ROUTER_START);
    483              }
    484          
    485              if ( events & ZDO_PARENT_ANNCE_EVT )
    486              {
    487                ZDApp_SendParentAnnce();
    488          
    489                // Return unprocessed events
    490                return (events ^ ZDO_PARENT_ANNCE_EVT);
    491              }
    492            }
    493          
    494            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_1:
   \   000055   EF           MOV     A,R7
   \   000056   5420         ANL     A,#0x20
   \   000058   603B         JZ      ??ZDApp_event_loop_5
    495            {
    496              if( devState == DEV_NWK_BACKOFF )
   \   00005A   90....       MOV     DPTR,#devState
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   640C         XRL     A,#0xc
   \   000060   700D         JNZ     ??ZDApp_event_loop_6
    497              {
    498                ZDApp_ChangeState(DEV_NWK_DISC);
   \   000062                ; Setup parameters for call to function ZDApp_ChangeState
   \   000062   7902         MOV     R1,#0x2
   \   000064   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    499                // Restart scan for rejoin
    500                ZDApp_StartJoiningCycle();
   \   000067                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   000067   12....       LCALL   `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    501                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   00006A                ; Setup parameters for call to function osal_start_timerEx
   \   00006A   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   00006D   800B         SJMP    ??ZDApp_event_loop_7
    502              }
    503              else
    504              {
    505                // Rejoin backoff, silent period
    506                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_6:
   \   00006F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006F   790C         MOV     R1,#0xc
   \   000071   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    507                ZDApp_StopJoiningCycle();
   \   000074                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000074   12....       LCALL   `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    508                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   000077                ; Setup parameters for call to function osal_start_timerEx
   \   000077   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_7:
   \   00007A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00007D   7A00         MOV     R2,#0x0
   \   00007F   7B20         MOV     R3,#0x20
   \   000081   90....       MOV     DPTR,#ZDAppTaskID
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
    509              }
    510          
    511              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   00008E   EE           MOV     A,R6
   \   00008F   FA           MOV     R2,A
   \   000090   EF           MOV     A,R7
   \   000091   6420         XRL     A,#0x20
   \   000093   8064         SJMP    ??ZDApp_event_loop_4
    512            }
    513          
    514            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_5:
   \   000095   EE           MOV     A,R6
   \   000096   5410         ANL     A,#0x10
   \   000098   602E         JZ      ??ZDApp_event_loop_8
    515            {
    516              ZDO_UpdateNwkStatus( devState );
   \   00009A                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00009A   90....       MOV     DPTR,#devState
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    517          
    518              // At start up, do one MTO route discovery if the device is a concentrator
    519              if ( zgConcentratorEnable == TRUE )
   \   0000A2   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   7017         JNZ     ??ZDApp_event_loop_9
    520              {
    521                // Start next event
    522                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000AA                ; Setup parameters for call to function osal_start_timerEx
   \   0000AA   90....       MOV     DPTR,#__Constant_64
   \   0000AD   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B0   7A00         MOV     R2,#0x0
   \   0000B2   7B08         MOV     R3,#0x8
   \   0000B4   90....       MOV     DPTR,#NWK_TaskID
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
    523              }
    524          
    525              // Return unprocessed events
    526              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_9:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   8031         SJMP    ??ZDApp_event_loop_4
    527            }
    528          
    529            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_8:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   5408         ANL     A,#0x8
   \   0000CB   6006         JZ      ??ZDApp_event_loop_10
    530            {
    531              // User defined logic
    532          
    533              // Return unprocessed events
    534              return (events ^ ZDO_COMMAND_CNF);
   \   0000CD   EE           MOV     A,R6
   \   0000CE   6408         XRL     A,#0x8
   \   0000D0   FA           MOV     R2,A
   \   0000D1   8032         SJMP    ??ZDApp_event_loop_11
    535            }
    536          
    537            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_10:
   \   0000D3   EF           MOV     A,R7
   \   0000D4   5401         ANL     A,#0x1
   \   0000D6   6005         JZ      ??ZDApp_event_loop_12
    538            {
    539              // Save only in valid state
    540              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
    541              {
    542                ZDApp_SaveNetworkStateEvt();
    543              }
    544          
    545              // Return unprocessed events
    546              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000D8   EF           MOV     A,R7
   \   0000D9   6401         XRL     A,#0x1
   \   0000DB   801C         SJMP    ??ZDApp_event_loop_4
    547            }
    548          
    549            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   0000DD   EE           MOV     A,R6
   \   0000DE   5404         ANL     A,#0x4
   \   0000E0   600A         JZ      ??ZDApp_event_loop_13
    550            {
    551          #ifdef ZBA_FALLBACK_NWKKEY
    552              if ( devState == DEV_END_DEVICE_UNAUTH )
    553              {
    554                ZDSecMgrFallbackNwkKey();
    555              }
    556              else
    557          #endif
    558              {
    559                // Set the NV startup option to force a "new" join.
    560                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000E2                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000E2   7A02         MOV     R2,#0x2
   \   0000E4   79FF         MOV     R1,#-0x1
   \   0000E6   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    561          
    562                // The device has been in the UNAUTH state, so reset
    563                // Note: there will be no return from this call
    564                SystemResetSoft();
   \   0000E9                ; Setup parameters for call to function Onboard_soft_reset
   \   0000E9   12....       LCALL   Onboard_soft_reset & 0xFFFF
    565              }
    566            }
    567          
    568          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    569            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_13:
   \   0000EC   EF           MOV     A,R7
   \   0000ED   5410         ANL     A,#0x10
   \   0000EF   600B         JZ      ??ZDApp_event_loop_14
    570            {
    571          #if defined ( REFLECTOR )
    572              ZDApp_AgeOutPendingBindEntry();
   \   0000F1                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000F1   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    573          #endif
    574              // Return unprocessed events
    575              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   0000F4   EE           MOV     A,R6
   \   0000F5   FA           MOV     R2,A
   \   0000F6   EF           MOV     A,R7
   \   0000F7   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   0000F9   FB           MOV     R3,A
   \   0000FA   8009         SJMP    ??ZDApp_event_loop_11
    576            }
    577          #endif
    578          
    579            if ( ZG_SECURE_ENABLED )
    580            {
    581              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_14:
   \   0000FC                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   0000FC   EE           MOV     A,R6
   \   0000FD   FA           MOV     R2,A
   \   0000FE   EF           MOV     A,R7
   \   0000FF   FB           MOV     R3,A
   \   000100   A9..         MOV     R1,?V2
   \   000102   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    582            }
   \                     ??ZDApp_event_loop_11:
   \   000105   02....       LJMP    ?Subroutine1 & 0xFFFF
    583            else
    584            {
    585              // Discard or make more handlers
    586              return 0;
    587            }
    588          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    589          
    590          /*********************************************************************
    591           * @fn      ZDApp_ProcessSecEvent()
    592           *
    593           * @brief   Process incoming security events.
    594           *
    595           * @param   task_id - Task ID
    596           * @param   events  - Bitmap of events
    597           *
    598           * @return  none
    599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    601          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    602            (void)task_id;  // Intentionally unreferenced parameter
    603          
    604            if ( ZSTACK_ROUTER_BUILD )
    605            {
    606              if ( events & ZDO_NEW_DEVICE )
    607              {
    608                // process the new device event
    609                if ( ZDApp_NewDeviceList )
    610                {
    611                  ZDAppNewDevice_t *pNewDevice;
    612                  uint16 timeDelta;
    613          
    614                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    615          
    616                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    617                  osal_mem_free( ZDApp_NewDeviceList );
    618                  ZDApp_NewDeviceList = pNewDevice;
    619          
    620                  if ( pNewDevice )
    621                  {
    622                    timeDelta = pNewDevice->timeDelta;
    623                    pNewDevice = pNewDevice->next;
    624          
    625                    while ( pNewDevice )
    626                    {
    627                      pNewDevice->timeDelta -= timeDelta;
    628                      pNewDevice = pNewDevice->next;
    629                    }
    630          
    631                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    632                  }
    633                }
    634          
    635                // Return unprocessed events
    636                return (events ^ ZDO_NEW_DEVICE);
    637              }
    638            }
    639          
    640            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV     A,R6
   \   00000A   5480         ANL     A,#0x80
   \   00000C   600A         JZ      ??ZDApp_ProcessSecEvent_0
    641            {
    642              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    643          
    644              // Return unprocessed events
    645              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   EE           MOV     A,R6
   \   000012   6480         XRL     A,#0x80
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   8026         SJMP    ??ZDApp_ProcessSecEvent_1
    646            }
    647          
    648            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000018   EF           MOV     A,R7
   \   000019   5402         ANL     A,#0x2
   \   00001B   600A         JZ      ??ZDApp_ProcessSecEvent_2
    649            {
    650              ZDApp_SaveNwkKey();
   \   00001D                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001D   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    651          
    652              // Return unprocessed events
    653              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   6402         XRL     A,#0x2
   \   000025   8017         SJMP    ??ZDApp_ProcessSecEvent_1
    654            }
    655          
    656            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000027   EF           MOV     A,R7
   \   000028   5408         ANL     A,#0x8
   \   00002A   6005         JZ      ??ZDApp_ProcessSecEvent_3
    657            {
    658          #if defined (NV_RESTORE)
    659              ZDSecMgrSaveApsLinkKey();
    660          #endif // (NV_RESTORE)
    661          
    662              // Return unprocessed events
    663              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00002C   EF           MOV     A,R7
   \   00002D   6408         XRL     A,#0x8
   \   00002F   800D         SJMP    ??ZDApp_ProcessSecEvent_1
    664            }
    665          
    666            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000031   EF           MOV     A,R7
   \   000032   5404         ANL     A,#0x4
   \   000034   600B         JZ      ??ZDApp_ProcessSecEvent_4
    667            {
    668              ZDSecMgrSaveTCLinkKey();
   \   000036                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000036   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    669          
    670              // Return unprocessed events
    671              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00003E   FB           MOV     R3,A
   \   00003F   8004         SJMP    ??ZDApp_ProcessSecEvent_5
    672            }
    673          
    674            // Discard or make more handlers
    675            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000045   02....       LJMP    ??Subroutine46_0 & 0xFFFF
    676          }
    677          
    678          /*********************************************************************
    679           * Application Functions
    680           */
    681          
    682          /*********************************************************************
    683           * @fn      ZDOInitDevice
    684           *
    685           * @brief   Start the device in the network.  This function will read
    686           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    687           *   restore the network state of the device.
    688           *
    689           * @param   startDelay - timeDelay to start device (in milliseconds).
    690           *                       There is a jitter added to this delay:
    691           *                       ((NWK_START_DELAY + startDelay)
    692           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    693           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    694           *                       this function will hold the network init. Application
    695           *                       can start the device.
    696           *
    697           * NOTE:    If the application would like to force a "new" join, the
    698           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    699           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    700           *          this function. "new" join means to not restore the network
    701           *          state of the device. Use zgWriteStartupOptions() to set these
    702           *          options.
    703           *
    704           * @return
    705           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    706           *          restored.
    707           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    708           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    709           *          it could mean that there was no network state to restore.
    710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    712          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    713            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    714            uint16 extendedDelay = 0;
    715          
    716            if ( devState == DEV_HOLD )
   \   000009   90....       MOV     DPTR,#devState
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7005         JNZ     ??ZDOInitDevice_0
    717            {
    718              // Initialize the RAM items table, in case an NV item has been updated.
    719              zgInitItems( FALSE );
   \   00000F                ; Setup parameters for call to function zgInitItems
   \   00000F   7900         MOV     R1,#0x0
   \   000011   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    720            }
    721          
    722            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000014                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000014   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    723            //devtag.071807.todo - fix this temporary solution
    724            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000017   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   90....       MOV     DPTR,#_NIB + 14
   \   00001E   F0           MOVX    @DPTR,A
    725          
    726          #if defined ( NV_RESTORE )
    727            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    728            // while booting to skip past NV Restore.
    729            if ( zdappHoldKeys == SW_BYPASS_NV )
    730            {
    731              zdappHoldKeys = 0;   // Only once
    732              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    733            }
    734            else
    735            {
    736              // Determine if NV should be restored
    737              networkStateNV = ZDApp_ReadNetworkRestoreState();
    738            }
    739          
    740            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    741            {
    742              networkStateNV = ZDApp_RestoreNetworkState();
    743              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    744            }
    745            else
    746            {
    747              // Wipe out the network state in NV
    748              NLME_InitNV();
    749              NLME_SetDefaultNV();
    750              // clear NWK key values
    751              ZDSecMgrClearNVKeyValues();
    752            }
    753          #endif
    754          
    755            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    756            {
    757              ZDAppDetermineDeviceType();
   \   00001F                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00001F   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    758          
    759              // Only delay if joining network - not restoring network state
    760              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    761                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000022                ; Setup parameters for call to function osal_rand
   \   000022   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000025   EA           MOV     A,R2
   \   000026   547F         ANL     A,#0x7f
   \   000028   F8           MOV     R0,A
   \   000029   E5..         MOV     A,?V0
   \   00002B   28           ADD     A,R0
   \   00002C   F8           MOV     R0,A
   \   00002D   E4           CLR     A
   \   00002E   35..         ADDC    A,?V1
   \   000030   F9           MOV     R1,A
   \   000031   E8           MOV     A,R0
   \   000032   2464         ADD     A,#0x64
   \   000034   FE           MOV     R6,A
   \   000035   E4           CLR     A
   \   000036   39           ADDC    A,R1
   \   000037   FF           MOV     R7,A
    762          
    763              runtimeChannel = zgDefaultChannelList;
   \   000038   90....       MOV     DPTR,#zgDefaultChannelList
   \   00003B   12....       LCALL   ?XLOAD_R0123
   \   00003E   90....       MOV     DPTR,#runtimeChannel
   \   000041   12....       LCALL   ?XSTORE_R0123
    764            }
    765          
    766            // Initialize the security for type of device
    767            ZDApp_SecInit( networkStateNV );
   \   000044                ; Setup parameters for call to function ZDApp_SecInit
   \   000044   7901         MOV     R1,#0x1
   \   000046   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    768          
    769            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000049   74FF         MOV     A,#-0x1
   \   00004B   65..         XRL     A,?V0
   \   00004D   7004         JNZ     ??ZDOInitDevice_1
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   65..         XRL     A,?V1
   \                     ??ZDOInitDevice_1:
   \   000053   6010         JZ      ??ZDOInitDevice_2
    770            {
    771              devState = DEV_INIT;    // Remove the Hold state
   \   000055   90....       MOV     DPTR,#devState
   \   000058   7401         MOV     A,#0x1
   \   00005A   F0           MOVX    @DPTR,A
    772          
    773              // Initialize leave control logic
    774              ZDApp_LeaveCtrlInit();
   \   00005B                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00005B   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    775          
    776              // Trigger the network start
    777              ZDApp_NetworkInit( extendedDelay );
   \   00005E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    778            }
    779          
    780            // set broadcast address mask to support broadcast filtering
    781            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_2:
   \   000065                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000065   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    782          
    783            return ( networkStateNV );
   \   00006D   7901         MOV     R1,#0x1
   \   00006F   02....       LJMP    ??Subroutine54_0 & 0xFFFF
    784          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    785          
    786          /*********************************************************************
    787           * @fn      ZDApp_ReadNetworkRestoreState
    788           *
    789           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    790           *          or not to restore the network state.
    791           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    792           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    793           *
    794           * @param   none
    795           *
    796           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    797           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    798           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    799           *          ZCD_NV_STARTUP_OPTION
    800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    801          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    802          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    803            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    804          
    805            // Look for the New Network State option.
    806            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    807            {
    808              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    809            }
    810          
    811            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   02....       LJMP    ??Subroutine46_0 & 0xFFFF
    812          }
    813          
    814          /*********************************************************************
    815           * @fn      ZDAppDetermineDeviceType()
    816           *
    817           * @brief   Determines the type of device to start.
    818           *
    819           *          Looks at zgDeviceLogicalType and determines what type of
    820           *          device to start.  The types are:
    821           *            ZG_DEVICETYPE_COORDINATOR
    822           *            ZG_DEVICETYPE_ROUTER
    823           *            ZG_DEVICETYPE_ENDDEVICE
    824           *
    825           * @param   none
    826           *
    827           * @return  none
    828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    829          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    830          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    831            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    832            {
    833              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    834              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8035         SJMP    ??ZDAppDetermineDeviceType_1
    835            }
    836            else
    837            {
    838              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700B         JNZ     ??ZDAppDetermineDeviceType_2
    839                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   4401         ORL     A,#0x1
   \   000025   800E         SJMP    ??ZDAppDetermineDeviceType_3
    840              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6402         XRL     A,#0x2
   \   00002A   700A         JNZ     ??ZDAppDetermineDeviceType_4
    841                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000035   F0           MOVX    @DPTR,A
    842          
    843              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    844              // The device shall do rejoin the network. Otherwise, do normal join
    845              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000038   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003A   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003D   E9           MOV     A,R1
   \   00003E   90....       MOV     DPTR,#devStartMode
   \   000041   7003         JNZ     ??ZDAppDetermineDeviceType_5
    846              {
    847                devStartMode = MODE_JOIN;     // Assume joining
   \   000043   E4           CLR     A
   \   000044   8007         SJMP    ??ZDAppDetermineDeviceType_1
    848              }
    849              else
    850              {
    851                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000046   7403         MOV     A,#0x3
   \   000048   F0           MOVX    @DPTR,A
    852                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000049   90....       MOV     DPTR,#prevDevState
   \   00004C   04           INC     A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004D   F0           MOVX    @DPTR,A
    853              }
    854            }
    855          }
   \   00004E   02....       LJMP    ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    856          
    857          /*********************************************************************
    858           * @fn      ZDApp_NetworkStartEvt()
    859           *
    860           * @brief   Process the Network Start Event
    861           *
    862           * @param   none
    863           *
    864           * @return  none
    865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    866          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    867          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    868            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   702D         JNZ     ??ZDApp_NetworkStartEvt_0
    869            {
    870              // Successfully started a ZigBee network
    871              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7012         JNZ     ??ZDApp_NetworkStartEvt_1
    872              {
    873                //save NIB to NV before child joins if NV_RESTORE is defined
    874                ZDApp_NwkWriteNVRequest();
    875                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7909         MOV     R1,#0x9
   \   000014   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    876          
    877                if ( zgChildAgingEnable == TRUE )
   \   000017   90....       MOV     DPTR,#zgChildAgingEnable
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   7011         JNZ     ??ZDApp_NetworkStartEvt_2
    878                {
    879                  // Once the device has changed its state to a COORDINATOR set the timer to send
    880                  // Parent annce
    881                  ZDApp_SetParentAnnceTimer();
   \   00001F                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   00001F   12....       LCALL   `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000022   800C         SJMP    ??ZDApp_NetworkStartEvt_2
    882                }
    883              }
    884              else
    885              {
    886                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV     R2,#0x10
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    887              }
    888          
    889              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000030                ; Setup parameters for call to function osal_pwrmgr_device
   \   000030   7900         MOV     R1,#0x0
   \   000032   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   000035   8037         SJMP    ??ZDApp_NetworkStartEvt_3
    890            }
    891            else
    892            {
    893              // Try again with a higher energy threshold
    894              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   000037                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000037   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00003A   E9           MOV     A,R1
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   2410         ADD     A,#0x10
   \   00003F   5001         JNC     ??ZDApp_NetworkStartEvt_4
   \   000041   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000042   C3           CLR     C
   \   000043   94FF         SUBB    A,#-0x1
   \   000045   E9           MOV     A,R1
   \   000046   9400         SUBB    A,#0x0
   \   000048   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004A   65D0         XRL     A,PSW
   \   00004C   33           RLC     A
   \   00004D   501A         JNC     ??ZDApp_NetworkStartEvt_5
    895              {
    896                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   00004F                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00004F   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000052   E9           MOV     A,R1
   \   000053   F8           MOV     R0,A
   \   000054                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000054   7410         MOV     A,#0x10
   \   000056   29           ADD     A,R1
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    897                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00005B                ; Setup parameters for call to function osal_set_event
   \   00005B   7A01         MOV     R2,#0x1
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   90....       MOV     DPTR,#ZDAppTaskID
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000067   8005         SJMP    ??ZDApp_NetworkStartEvt_3
    898              }
    899              else
    900              {
    901                // Failed to start network. Enter a dormant state (until user intervenes)
    902                ZDApp_ChangeState( DEV_INIT );
   \                     ??ZDApp_NetworkStartEvt_5:
   \   000069                ; Setup parameters for call to function ZDApp_ChangeState
   \   000069   7901         MOV     R1,#0x1
   \   00006B   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    903              }
    904            }
    905          }
   \                     ??ZDApp_NetworkStartEvt_3:
   \   00006E   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    906          
    907          /*********************************************************************
    908           * @fn      ZDApp_DeviceAuthEvt()
    909           *
    910           * @brief   Process the Device Authentic Event
    911           *
    912           * @param   none
    913           *
    914           * @return  none
    915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    916          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    917          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    918            // received authentication from trust center
    919            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   702C         JNZ     ??ZDApp_DeviceAuthEvt_0
    920            {
    921              // Stop the reset timer so it doesn't reset
    922              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    923          
    924              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV     R1,#0x6
   \   000011   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    925          
    926              // Set the Power Manager Device
    927          #if defined ( POWER_SAVING )
    928              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000014                ; Setup parameters for call to function osal_pwrmgr_device
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    929          #endif
    930          
    931              if ( ZSTACK_ROUTER_BUILD )
    932              {
    933                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    934                {
    935                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    936                  NLME_StartRouterRequest( 0, 0, false );
    937                }
    938              }
    939          
    940              // Notify to save info into NV
    941              ZDApp_NVUpdate();
    942          
    943              // Save off the security
    944              ZDApp_SaveNwkKey();
   \   000019                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000019   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    945          
    946              ZDApp_AnnounceNewAddress();
   \   00001C                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00001C   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    947          
    948              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    949                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    950                    && (zgChildAgingEnable == TRUE) ) )
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   E0           MOVX    A,@DPTR
   \   000023   A2E3         MOV     C,0xE0 /* A   */.3
   \   000025   5008         JNC     ??ZDApp_DeviceAuthEvt_1
   \   000027   90....       MOV     DPTR,#zgChildAgingEnable
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6401         XRL     A,#0x1
   \   00002D   7009         JNZ     ??ZDApp_DeviceAuthEvt_0
    951              {
    952                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00002F                ; Setup parameters for call to function NLME_SetPollRate
   \   00002F   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000032   12....       LCALL   ?XLOAD_R2345
   \   000035   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    953              }
    954            }
    955            else
    956            {
    957              ZDApp_NVUpdate();
    958            }
    959          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000038   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    960          
    961          /*********************************************************************
    962           * @fn      ZDApp_SaveNetworkStateEvt()
    963           *
    964           * @brief   Process the Save the Network State Event
    965           *
    966           * @param   none
    967           *
    968           * @return  none
    969           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    970          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    971          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    972          #if defined ( NV_RESTORE )
    973           #if defined ( NV_TURN_OFF_RADIO )
    974            // Turn off the radio's receiver during an NV update
    975            uint8 RxOnIdle;
    976            uint8 x = false;
    977            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    978            ZMacSetReq( ZMacRxOnIdle, &x );
    979           #endif
    980          
    981            // Update the Network State in NV
    982            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    983                           NWK_NV_DEVICELIST_ENABLE |
    984                           NWK_NV_BINDING_ENABLE    |
    985                           NWK_NV_ADDRMGR_ENABLE );
    986          
    987            // Reset the NV startup option to resume from NV by
    988            // clearing the "New" join option.
    989            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    990          
    991           #if defined ( NV_TURN_OFF_RADIO )
    992            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    993           #endif
    994          #endif // NV_RESTORE
    995          }
   \   000000   02....       LJMP    ?BRET
    996          
    997          #if defined ( NV_RESTORE )
    998          /*********************************************************************
    999           * @fn      ZDApp_RestoreNetworkState()
   1000           *
   1001           * @brief   This function will restore the network state of the
   1002           *          device if the network state is stored in NV.
   1003           *
   1004           * @param   none
   1005           *
   1006           * @return
   1007           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1008           *          restored.
   1009           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1010           *          This could mean that zgStartupOption said to not restore, or
   1011           *          it could mean that there was no network state to restore.
   1012           *
   1013           */
   1014          uint8 ZDApp_RestoreNetworkState( void )
   1015          {
   1016            uint8 nvStat;
   1017          
   1018            // Initialize NWK NV items
   1019            nvStat = NLME_InitNV();
   1020          
   1021            if ( nvStat != NV_OPER_FAILED )
   1022            {
   1023              if ( NLME_RestoreFromNV() )
   1024              {
   1025                // Are we a coordinator
   1026                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   1027                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   1028                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   1029                devStartMode = MODE_RESUME;
   1030                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1031              }
   1032              else
   1033                nvStat = NV_ITEM_UNINIT;
   1034          
   1035              if ( ZG_SECURE_ENABLED )
   1036              {
   1037                nwkFrameCounterChanges = 0;
   1038          
   1039                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1040                {
   1041                  ZDApp_RestoreNwkKey( TRUE );
   1042                }
   1043              }
   1044          
   1045              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1046              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1047              // other than default.
   1048            }
   1049          
   1050            if ( nvStat == ZSUCCESS )
   1051              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   1052            else
   1053              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   1054          }
   1055          #endif // NV_RESTORE
   1056          
   1057          /*********************************************************************
   1058           * @fn      ZDApp_InitUserDesc()
   1059           *
   1060           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1061           *          when needed.  If you want to initialize the User descriptor to
   1062           *          something other than all zero, do it here.
   1063           *
   1064           * @param   none
   1065           *
   1066           * @return  none
   1067           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1068          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1069          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1070            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1071          
   1072            // Initialize the User Descriptor, the descriptor is read from NV
   1073            // when needed.  If you want to initialize the User descriptor to something
   1074            // other than all zero, do it here.
   1075            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1076            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1077                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1078            {
   1079              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1080                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1081              {
   1082                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1083                {
   1084                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1085                }
   1086              }
   1087            }
   1088          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1089          
   1090          /*********************************************************************
   1091           * @fn      ZDAppCheckForHoldKey()
   1092           *
   1093           * @brief   Check for key to set the device into Hold Auto Start
   1094           *
   1095           * @param   none
   1096           *
   1097           * @return  none
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1101          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1102          
   1103            // Get Keypad directly to see if a HOLD is needed
   1104            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1105          
   1106            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1107            // while booting to avoid starting up the device.
   1108            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1109            {
   1110              // Change the device state to HOLD on start up
   1111              devState = DEV_HOLD;
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1112            }
   1113          #endif // HAL_KEY
   1114          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1115          
   1116          /*********************************************************************
   1117           * @fn      ZDApp_ProcessOSALMsg()
   1118           *
   1119           * @brief   Process the incoming task message.
   1120           *
   1121           * @param   msgPtr - message to process
   1122           *
   1123           * @return  none
   1124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1125          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1126          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1127            // Data Confirmation message fields
   1128            uint8 sentEP;       // This should always be 0
   1129            uint8 sentStatus;
   1130            afDataConfirm_t *afDataConfirm;
   1131            uint8 tmp;
   1132          
   1133            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   602A         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   600E         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   6010         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD     A,#-0x2a
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   \   00002D   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1134            {
   1135              // Incoming ZDO Message
   1136              case AF_INCOMING_MSG_CMD:
   1137                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000030                ; Setup parameters for call to function ZDP_IncomingData
   \   000030   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1138                break;
   \   000033   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1139          
   1140              case ZDO_CB_MSG:
   1141                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000036                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000036   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1142                break;
   \   000039   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1143          
   1144              case AF_DATA_CONFIRM_CMD:
   1145                // This message is received as a confirmation of a data packet sent.
   1146                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1147                // The message fields are defined in AF.h
   1148                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1149                sentEP = afDataConfirm->endpoint;
   1150                sentStatus = afDataConfirm->hdr.status;
   1151          
   1152                // Action taken when confirmation is received.
   1153          #if defined ( ZIGBEE_FREQ_AGILITY )
   1154                if ( pZDNwkMgr_ProcessDataConfirm )
   1155                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1156          #endif
   1157                (void)sentEP;
   1158                (void)sentStatus;
   1159                break;
   1160          
   1161              case ZDO_NWK_DISC_CNF:
   1162                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00003C   90....       MOV     DPTR,#devState
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6402         XRL     A,#0x2
   \   000042   6003         JZ      $+5
   \   000044   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1163                  break;
   1164          
   1165                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000047   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6008         JZ      ??ZDApp_ProcessOSALMsg_7
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6402         XRL     A,#0x2
   \   000052   6003         JZ      $+5
   \   000054   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1166                {
   1167                  // Process the network discovery scan results and choose a parent
   1168                  // device to join/rejoin itself
   1169                  networkDesc_t *pChosenNwk;
   1170                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000057                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000057   12....       LCALL   `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   00005A   8A..         MOV     ?V0,R2
   \   00005C   8B..         MOV     ?V1,R3
   \   00005E   EA           MOV     A,R2
   \   00005F   45..         ORL     A,?V1
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   \   000066   90....       MOV     DPTR,#zdoDiscCounter
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C3           CLR     C
   \   00006B   9403         SUBB    A,#0x3
   \   00006D   5003         JNC     $+5
   \   00006F   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   1171                  {
   1172                    if ( devStartMode == MODE_JOIN )
   \   000072   EA           MOV     A,R2
   \   000073   2402         ADD     A,#0x2
   \   000075   F8           MOV     R0,A
   \   000076   E4           CLR     A
   \   000077   35..         ADDC    A,?V1
   \   000079   F9           MOV     R1,A
   \   00007A   E8           MOV     A,R0
   \   00007B   FE           MOV     R6,A
   \   00007C   E9           MOV     A,R1
   \   00007D   FF           MOV     R7,A
   \   00007E   90....       MOV     DPTR,#devStartMode
   \   000081   E0           MOVX    A,@DPTR
   \   000082   706E         JNZ     ??ZDApp_ProcessOSALMsg_9
   1173                    {
   1174                      ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000084                ; Setup parameters for call to function ZDApp_ChangeState
   \   000084   7903         MOV     R1,#0x3
   \   000086   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1175          
   1176                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   000089                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000089   85..82       MOV     DPL,?V0
   \   00008C   85..83       MOV     DPH,?V1
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1177          
   1178                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1179                                            pChosenNwk->logicalChannel,
   1180                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1181                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   00009A                ; Setup parameters for call to function NLME_JoinRequest
   \   00009A   85..82       MOV     DPL,?V0
   \   00009D   85..83       MOV     DPH,?V1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F5..         MOV     ?V2,A
   \   0000AD   78..         MOV     R0,#?V2
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   85..82       MOV     DPL,?V0
   \   0000B5   85..83       MOV     DPH,?V1
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F5..         MOV     ?V2,A
   \   0000C8   78..         MOV     R0,#?V2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F9           MOV     R1,A
   \   0000D3   85..82       MOV     DPL,?V0
   \   0000D6   85..83       MOV     DPH,?V1
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   FC           MOV     R4,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FD           MOV     R5,A
   \   0000DE   E5..         MOV     A,?V0
   \   0000E0   240B         ADD     A,#0xb
   \   0000E2   FA           MOV     R2,A
   \   0000E3   E4           CLR     A
   \   0000E4   35..         ADDC    A,?V1
   \   0000E6   FB           MOV     R3,A
   \   0000E7   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000EA   7404         MOV     A,#0x4
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   02....       LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   1182                      {
   1183                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1184                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1185                      }
   1186                    } // if ( devStartMode == MODE_JOIN )
   1187                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   0000F2   6403         XRL     A,#0x3
   \   0000F4   6003         JZ      $+5
   \   0000F6   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1188                    {
   1189                      ZStatus_t rejoinStatus;
   1190          
   1191                      // Transition state machine to correct rejoin state based on previous state before network discovery
   1192                      if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   0000F9                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000F9   7900         MOV     R1,#0x0
   \   0000FB   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000FE   E9           MOV     A,R1
   \   0000FF   6401         XRL     A,#0x1
   \   000101   90....       MOV     DPTR,#prevDevState
   \   000104   700D         JNZ     ??ZDApp_ProcessOSALMsg_12
   1193                      {
   1194                        if ( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   000106   E0           MOVX    A,@DPTR
   \   000107   6404         XRL     A,#0x4
   \   000109   7004         JNZ     ??ZDApp_ProcessOSALMsg_13
   1195                        {
   1196                          ZDApp_ChangeState(DEV_NWK_SEC_REJOIN_ALL_CHANNEL);
   \   00010B                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010B   790D         MOV     R1,#0xd
   \   00010D   800F         SJMP    ??ZDApp_ProcessOSALMsg_14
   1197                        }
   1198                        else
   1199                        {
   1200                          ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00010F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010F   7904         MOV     R1,#0x4
   \   000111   800B         SJMP    ??ZDApp_ProcessOSALMsg_14
   1201                        }
   1202                      }
   1203                      else
   1204                      {
   1205                        if( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000113   E0           MOVX    A,@DPTR
   \   000114   640D         XRL     A,#0xd
   \   000116   7004         JNZ     ??ZDApp_ProcessOSALMsg_15
   1206                        {
   1207                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \   000118                ; Setup parameters for call to function ZDApp_ChangeState
   \   000118   790E         MOV     R1,#0xe
   \   00011A   8002         SJMP    ??ZDApp_ProcessOSALMsg_14
   1208                        }
   1209                        else
   1210                        {
   1211                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_ALL_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00011C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00011C   790F         MOV     R1,#0xf
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00011E   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1212                        }
   1213                      }
   1214          
   1215                      // Before trying to do rejoin, check if the device has a valid short address
   1216                      // If not, generate a random short address for itself
   1217                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000121   90....       MOV     DPTR,#_NIB + 20
   \   000124   E0           MOVX    A,@DPTR
   \   000125   64FE         XRL     A,#0xfe
   \   000127   7003         JNZ     ??ZDApp_ProcessOSALMsg_16
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00012C   7065         JNZ     ??ZDApp_ProcessOSALMsg_17
   1218                      {
   1219                        uint16 commNwkAddr;
   1220          
   1221                        // Verify if the Network address has been commissioned by external tool
   1222                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1223                                           sizeof(commNwkAddr),
   1224                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1225                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   00012E                ; Setup parameters for call to function osal_nv_read
   \   00012E   7401         MOV     A,#0x1
   \   000130   12....       LCALL   ?XSTACK_DISP100_8
   \   000133   88..         MOV     ?V2,R0
   \   000135   89..         MOV     ?V3,R1
   \   000137   78..         MOV     R0,#?V2
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013C   75..02       MOV     ?V2,#0x2
   \   00013F   75..00       MOV     ?V3,#0x0
   \   000142   78..         MOV     R0,#?V2
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   7C00         MOV     R4,#0x0
   \   000149   7D00         MOV     R5,#0x0
   \   00014B   7A49         MOV     R2,#0x49
   \   00014D   7B00         MOV     R3,#0x0
   \   00014F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000152   7404         MOV     A,#0x4
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
   \   000157   E9           MOV     A,R1
   \   000158   7025         JNZ     ??ZDApp_ProcessOSALMsg_18
   \   00015A   7401         MOV     A,#0x1
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   64FE         XRL     A,#0xfe
   \   000162   7003         JNZ     ??ZDApp_ProcessOSALMsg_19
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   000167   6016         JZ      ??ZDApp_ProcessOSALMsg_18
   1226                        {
   1227                          _NIB.nwkDevAddress = commNwkAddr;
   \   000169   7401         MOV     A,#0x1
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000171   90....       MOV     DPTR,#_NIB + 20
   \   000174   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   1228          
   1229                          // clear Allocate address bit because device has a commissioned address
   1230                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \                     ??CrossCallReturnLabel_59:
   \   000177   90....       MOV     DPTR,#_NIB + 14
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   C2E7         CLR     0xE0 /* A   */.7
   \   00017D   800A         SJMP    ??ZDApp_ProcessOSALMsg_20
   1231                        }
   1232                        else
   1233                        {
   1234                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   00017F                ; Setup parameters for call to function osal_rand
   \   00017F   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000182   90....       MOV     DPTR,#_NIB + 20
   \   000185   EA           MOV     A,R2
   \   000186   F0           MOVX    @DPTR,A
   \   000187   A3           INC     DPTR
   \   000188   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   000189   F0           MOVX    @DPTR,A
   1235                        }
   1236          
   1237                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   00018A                ; Setup parameters for call to function ZMacSetReq
   \   00018A   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   00018C   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   00018E   7953         MOV     R1,#0x53
   \   000190   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1238                      }
   1239          
   1240                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1241                      if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   000193   90....       MOV     DPTR,#_NIB + 33
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F4           CPL     A
   \   000198   7003         JNZ     ??ZDApp_ProcessOSALMsg_21
   \   00019A   A3           INC     DPTR
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   00019D   7018         JNZ     ??ZDApp_ProcessOSALMsg_22
   1242                      {
   1243                        _NIB.nwkPanId = pChosenNwk->panId;
   \   00019F   85..82       MOV     DPL,?V0
   \   0001A2   85..83       MOV     DPH,?V1
   \   0001A5   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001A8   90....       MOV     DPTR,#_NIB + 33
   \   0001AB   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   1244                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \                     ??CrossCallReturnLabel_60:
   \   0001AE                ; Setup parameters for call to function ZMacSetReq
   \   0001AE   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   0001B0   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   0001B2   7950         MOV     R1,#0x50
   \   0001B4   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1245                      }
   1246          
   1247                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   0001B7   85..82       MOV     DPL,?XSP + 0
   \   0001BA   85..83       MOV     DPH,?XSP + 1
   \   0001BD   7401         MOV     A,#0x1
   \   0001BF   F0           MOVX    @DPTR,A
   1248                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   0001C0                ; Setup parameters for call to function ZMacSetReq
   \   0001C0   AA..         MOV     R2,?XSP + 0
   \   0001C2   AB..         MOV     R3,?XSP + 1
   \   0001C4   7952         MOV     R1,#0x52
   \   0001C6   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1249          
   1250                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1251                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( FALSE ) == TRUE ) )
   \   0001C9                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0001C9   7900         MOV     R1,#0x0
   \   0001CB   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0001CE   E9           MOV     A,R1
   \   0001CF   6401         XRL     A,#0x1
   \   0001D1   8E82         MOV     DPL,R6
   \   0001D3   8F83         MOV     DPH,R7
   \   0001D5   700B         JNZ     ??ZDApp_ProcessOSALMsg_23
   1252                      {
   1253                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   0001D7                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F9           MOV     R1,A
   \   0001D9   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001DB   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001DD   12....       LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   0001E0   8009         SJMP    ??ZDApp_ProcessOSALMsg_10
   1254                      }
   1255                      else
   1256                      {
   1257                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   0001E2                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F9           MOV     R1,A
   \   0001E4   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001E6   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001E8   12....       LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0001EB   E9           MOV     A,R1
   1258                      }
   1259          
   1260                      if ( rejoinStatus != ZSuccess )
   \   0001EC   6009         JZ      ??ZDApp_ProcessOSALMsg_11
   1261                      {
   1262                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1263                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001EE                ; Setup parameters for call to function osal_rand
   \   0001EE   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001F1                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001F1   12....       LCALL   ?Subroutine29 & 0xFFFF
   1264                      }
   1265                    } // else if ( devStartMode == MODE_REJOIN )
   \                     ??CrossCallReturnLabel_33:
   \   0001F4   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1266          
   1267                    // The receiver is on, turn network layer polling off.
   1268                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001F7   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001FD   502C         JNC     ??ZDApp_ProcessOSALMsg_24
   1269                    {
   1270                      // for an End Device with NO Child Table Management process or for a Router
   1271                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1272                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001FF   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000202   E0           MOVX    A,@DPTR
   \   000203   600D         JZ      ??ZDApp_ProcessOSALMsg_25
   \   000205   6401         XRL     A,#0x1
   \   000207   6009         JZ      ??ZDApp_ProcessOSALMsg_25
   \   000209   90....       MOV     DPTR,#zgChildAgingEnable
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   6003         JZ      $+5
   \   00020F   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1273                      {
   1274                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000212                ; Setup parameters for call to function NLME_SetPollRate
   \   000212   90....       MOV     DPTR,#__Constant_0
   \   000215   12....       LCALL   ?XLOAD_R2345
   \   000218   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1275                        NLME_SetQueuedPollRate( 0 );
   \   00021B                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00021B   7A00         MOV     R2,#0x0
   \   00021D   7B00         MOV     R3,#0x0
   \   00021F   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1276                        NLME_SetResponseRate( 0 );
   \   000222                ; Setup parameters for call to function NLME_SetResponseRate
   \   000222   7A00         MOV     R2,#0x0
   \   000224   7B00         MOV     R3,#0x0
   \   000226   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000229   807C         SJMP    ??ZDApp_ProcessOSALMsg_5
   1277                      }
   1278                    }
   1279                    else
   1280                    {
   1281                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   00022B   90....       MOV     DPTR,#devStartMode
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   7076         JNZ     ??ZDApp_ProcessOSALMsg_5
   1282                      {
   1283                        ZDApp_SavedPollRate = zgPollRate;
   \   000231   90....       MOV     DPTR,#zgPollRate
   \   000234   12....       LCALL   ?XLOAD_R0123
   \   000237   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00023A   12....       LCALL   ?XSTORE_R0123
   1284                        NLME_SetPollRate( zgRejoinPollRate );
   \   00023D                ; Setup parameters for call to function NLME_SetPollRate
   \   00023D   90....       MOV     DPTR,#zgRejoinPollRate
   \   000240   E0           MOVX    A,@DPTR
   \   000241   F5..         MOV     ?V0,A
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   AA..         MOV     R2,?V0
   \   000247   FB           MOV     R3,A
   \   000248   E4           CLR     A
   \   000249   FC           MOV     R4,A
   \   00024A   FD           MOV     R5,A
   \   00024B   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   00024E   8057         SJMP    ??ZDApp_ProcessOSALMsg_5
   1285                      }
   1286                    }
   1287                  }
   1288                  else
   1289                  {
   1290                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000250   90....       MOV     DPTR,#continueJoining
   \   000253   E0           MOVX    A,@DPTR
   \   000254   6051         JZ      ??ZDApp_ProcessOSALMsg_5
   1291                    {
   1292          #if defined ( MANAGED_SCAN )
   1293                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1294          #else
   1295                      zdoDiscCounter++;
   \   000256   90....       MOV     DPTR,#zdoDiscCounter
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   04           INC     A
   \   00025B   F0           MOVX    @DPTR,A
   1296                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1297                                                  + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00025C                ; Setup parameters for call to function osal_rand
   \   00025C   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00025F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00025F   EA           MOV     A,R2
   \   000260   2464         ADD     A,#0x64
   \   000262   FA           MOV     R2,A
   \   000263   E4           CLR     A
   \   000264   3400         ADDC    A,#0x0
   \   000266   FB           MOV     R3,A
   \   000267   8036         SJMP    ??ZDApp_ProcessOSALMsg_26
   1298          #endif
   1299                    }
   1300                  }
   1301                }
   1302                break;
   1303          
   1304              case ZDO_NWK_JOIN_IND:
   1305                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000269   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   6401         XRL     A,#0x1
   \   00026F   6005         JZ      ??ZDApp_ProcessOSALMsg_27
   \   000271   E0           MOVX    A,@DPTR
   \   000272   6402         XRL     A,#0x2
   \   000274   7031         JNZ     ??ZDApp_ProcessOSALMsg_5
   1306                {
   1307                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_27:
   \   000276                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000276   12....       LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000279   802C         SJMP    ??ZDApp_ProcessOSALMsg_5
   1308                }
   1309                break;
   1310          
   1311              case ZDO_NWK_JOIN_REQ:
   1312                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00027B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   6401         XRL     A,#0x1
   \   000281   6005         JZ      ??ZDApp_ProcessOSALMsg_28
   \   000283   E0           MOVX    A,@DPTR
   \   000284   6402         XRL     A,#0x2
   \   000286   701F         JNZ     ??ZDApp_ProcessOSALMsg_5
   1313                {
   1314                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_28:
   \   000288   90....       MOV     DPTR,#retryCnt
   \   00028B   E4           CLR     A
   \   00028C   12....       LCALL   ?Subroutine14 & 0xFFFF
   1315                  devStartMode = MODE_RESUME;
   1316                  _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_8:
   \   00028F   12....       LCALL   ?Subroutine15 & 0xFFFF
   1317                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_10:
   \   000292   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1318                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000295   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000298   7402         MOV     A,#0x2
   \   00029A   F0           MOVX    @DPTR,A
   1319                  ZDApp_NetworkInit( 0 );
   \   00029B                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00029B   7A00         MOV     R2,#0x0
   \   00029D   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_26:
   \   00029F   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0002A2   8003         SJMP    ??ZDApp_ProcessOSALMsg_5
   1320                }
   1321                break;
   1322          
   1323              default:
   1324                if ( ZG_SECURE_ENABLED )
   1325                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0002A4                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   0002A4   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1326                break;
   1327            }
   1328          
   1329          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0002A7   7403         MOV     A,#0x3
   \   0002A9   02....       LJMP    ??Subroutine53_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EA           MOV     A,R2
   \   000001   547F         ANL     A,#0x7f
   \   000003   2464         ADD     A,#0x64
   \   000005   FA           MOV     R2,A
   \   000006   7B00         MOV     R3,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#devStartMode
   \   000004   04           INC     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#_tmpRejoinState
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0
   1330          
   1331          /*********************************************************************
   1332           * @fn      ZDApp_ProcessMsgCBs()
   1333           *
   1334           * @brief   Process response messages
   1335           *
   1336           * @param   none
   1337           *
   1338           * @return  none
   1339           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1340          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1341          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1342            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F5..         MOV     ?V1,A
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000028   0200         DW        2
   \   00002A   2100         DW        33
   \   00002C   2200         DW        34
   \   00002E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000030   0080         DW        32768
   \   000032   0180         DW        32769
   \   000034   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000036   0000         DW        0
   \   000038   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1343            {
   1344          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1345              case NWK_addr_rsp:
   1346              case IEEE_addr_rsp:
   1347                {
   1348                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1349          
   1350                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003A   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00003D   8A..         MOV     ?V2,R2
   \   00003F   8B..         MOV     ?V3,R3
   1351                  if ( pAddrRsp )
   \   000041   EA           MOV     A,R2
   \   000042   45..         ORL     A,?V3
   \   000044   604A         JZ      ??ZDApp_ProcessMsgCBs_2
   1352                  {
   1353                    if ( pAddrRsp->status == ZSuccess )
   \   000046   EA           MOV     A,R2
   \   000047   2403         ADD     A,#0x3
   \   000049   FE           MOV     R6,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V3
   \   00004D   FF           MOV     R7,A
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   700A         JNZ     ??ZDApp_ProcessMsgCBs_3
   1354                    {
   1355                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000055                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   12....       LCALL   ?Subroutine22 & 0xFFFF
   1356                    }
   \                     ??CrossCallReturnLabel_75:
   \   00005C   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1357          
   1358          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1359                    // look for pending bind entry for NWK_addr_rsp Only
   1360                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00005F   85..82       MOV     DPL,?V0
   \   000062   85..83       MOV     DPH,?V1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   7004         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00006C   7007         JNZ     ??ZDApp_ProcessMsgCBs_5
   1361                    {
   1362          #if defined ( REFLECTOR )
   1363                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00006E                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1364          #endif
   1365                    }
   1366          #endif
   1367          
   1368                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000075                ; Setup parameters for call to function osal_mem_free
   \   000075   AA..         MOV     R2,?V2
   \   000077   AB..         MOV     R3,?V3
   \   000079   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00007C   8012         SJMP    ??ZDApp_ProcessMsgCBs_2
   1369                  }
   1370                }
   1371                break;
   1372          #endif
   1373          
   1374          #if defined ( REFLECTOR )
   1375              case Bind_req:
   1376              case Unbind_req:
   1377                {
   1378                  ZDO_BindUnbindReq_t bindReq;
   1379                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00007E                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00007E   AC..         MOV     R4,?XSP + 0
   \   000080   AD..         MOV     R5,?XSP + 1
   \   000082   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1380                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000085                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000085   AC..         MOV     R4,?XSP + 0
   \   000087   AD..         MOV     R5,?XSP + 1
   \   000089   EE           MOV     A,R6
   \   00008A   FA           MOV     R2,A
   \   00008B   EF           MOV     A,R7
   \   00008C   FB           MOV     R3,A
   \   00008D   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1381                }
   1382                break;
   1383          #endif
   1384          
   1385          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1386              case Bind_rsp:
   1387              case Unbind_rsp:
   1388                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1389                {
   1390                  ZDMatchSendState(
   1391                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1392                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1393                }
   1394                break;
   1395          
   1396              case End_Device_Bind_req:
   1397                if (ZG_DEVICE_COORDINATOR_TYPE)
   1398                {
   1399                  ZDEndDeviceBind_t bindReq;
   1400                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1401                  ZDO_MatchEndDeviceBind( &bindReq );
   1402          
   1403                  // Freeing the cluster lists - if allocated.
   1404                  if ( bindReq.numInClusters )
   1405                    osal_mem_free( bindReq.inClusters );
   1406                  if ( bindReq.numOutClusters )
   1407                    osal_mem_free( bindReq.outClusters );
   1408                }
   1409                break;
   1410          #endif
   1411            }
   1412          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000090   7415         MOV     A,#0x15
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   \   000095   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0
   1413          
   1414          /*********************************************************************
   1415           * @fn      ZDApp_RegisterCBs()
   1416           *
   1417           * @brief   Process response messages
   1418           *
   1419           * @param   none
   1420           *
   1421           * @return  none
   1422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1423          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1424          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1425          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1426            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1427          #endif
   1428          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1429            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1430          #endif
   1431          #if ZG_BUILD_COORDINATOR_TYPE
   1432            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1433            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1434            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1435          #endif
   1436          #if defined ( REFLECTOR )
   1437            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1438            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1439          #endif
   1440          }
   \   000034   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1441          
   1442          /*********************************************************************
   1443           * @fn      ZDApp_ProcessSecMsg()
   1444           *
   1445           * @brief   Process the incoming security message.
   1446           *
   1447           * @param   msgPtr - message to process
   1448           *
   1449           * @return  none
   1450           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1451          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1452          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1453            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1454            {
   1455              case ZDO_TRANSPORT_KEY_IND:
   1456                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1457                {
   1458                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1459                }
   1460                break;
   1461          
   1462              case ZDO_UPDATE_DEVICE_IND:
   1463                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1464                {
   1465                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1466                }
   1467                break;
   1468          
   1469              case ZDO_REMOVE_DEVICE_IND:
   1470                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1471                {
   1472                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1473                }
   1474                break;
   1475          
   1476              case ZDO_REQUEST_KEY_IND:
   1477                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1478                {
   1479                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1480                  {
   1481                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1482                  }
   1483                }
   1484                break;
   1485          
   1486              case ZDO_SWITCH_KEY_IND:
   1487                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1488                {
   1489                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1490                }
   1491                break;
   1492          
   1493              default:
   1494                // Unsupported messages
   1495                break;
   1496            }
   1497          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1498          
   1499          /*********************************************************************
   1500           * @fn      ZDApp_ProcessNetworkJoin()
   1501           *
   1502           * @brief
   1503           *
   1504           *   Save off the Network key information.
   1505           *
   1506           * @param   none
   1507           *
   1508           * @return  none
   1509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1510          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1511          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1512            if ( (devState == DEV_NWK_JOINING) ||
   1513                ((devState == DEV_NWK_ORPHAN)  &&
   1514                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1515            {
   1516              // Result of a Join attempt by this device.
   1517              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   702F         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1518              {
   1519                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1520          
   1521          #if defined ( POWER_SAVING )
   1522                osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000039                ; Setup parameters for call to function osal_pwrmgr_device
   \   000039   7901         MOV     R1,#0x1
   \   00003B   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1523          #endif
   1524          
   1525                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00003E                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000043   E9           MOV     A,R1
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1526                {
   1527                  // wait for auth from trust center
   1528                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   1529          
   1530                  // Start the reset timer for MAX UNAUTH time
   1531                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1532                }
   1533                else
   1534                {
   1535                  if ( ZSTACK_ROUTER_BUILD )
   1536                  {
   1537                    if ( devState == DEV_NWK_ORPHAN
   1538                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1539                    {
   1540                      // Change NIB state to router for restore
   1541                      _NIB.nwkState = NWK_ROUTER;
   1542                    }
   1543                  }
   1544          
   1545                  if ( devState == DEV_NWK_JOINING )
   \   000049   90....       MOV     DPTR,#devState
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6403         XRL     A,#0x3
   \   00004F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1546                  {
   1547                    ZDApp_AnnounceNewAddress();
   \   000051                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000051   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1548                  }
   1549          
   1550                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000054                ; Setup parameters for call to function ZDApp_ChangeState
   \   000054   7906         MOV     R1,#0x6
   \   000056   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1551          
   1552                  if ( ZSTACK_ROUTER_BUILD )
   \   000059   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1553                  {
   1554                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1555                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1556                    {
   1557                      NLME_StartRouterRequest( 0, 0, false );
   1558                    }
   1559                  }
   1560                }
   1561              }
   1562              else
   1563              {
   1564                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00005C   90....       MOV     DPTR,#devStartMode
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6401         XRL     A,#0x1
   \   000062   7026         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   000064   90....       MOV     DPTR,#retryCnt
   \   000067   E0           MOVX    A,@DPTR
   \   000068   04           INC     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   C3           CLR     C
   \   00006B   9403         SUBB    A,#0x3
   \   00006D   401B         JC      ??ZDApp_ProcessNetworkJoin_7
   1565                {
   1566                  if ( _NIB.nwkPanId == 0xFFFF )
   \   00006F   90....       MOV     DPTR,#_NIB + 33
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F4           CPL     A
   \   000074   7003         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000079   90....       MOV     DPTR,#devStartMode
   \   00007C   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   1567                    devStartMode = MODE_JOIN;
   \   00007E   E4           CLR     A
   \   00007F   8008         SJMP    ??ZDApp_ProcessNetworkJoin_10
   1568                  else
   1569                  {
   1570                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000081   7403         MOV     A,#0x3
   \   000083   F0           MOVX    @DPTR,A
   1571                    _tmpRejoinState = true;
   \   000084   90....       MOV     DPTR,#_tmpRejoinState
   \   000087   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   000089   F0           MOVX    @DPTR,A
   1572                  }
   1573                }
   1574          
   1575                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1576                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00008A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008A   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00008D   8A..         MOV     ?V0,R2
   \   00008F   8B..         MOV     ?V1,R3
   \   000091   74FE         MOV     A,#-0x2
   \   000093   65..         XRL     A,?V0
   \   000095   7004         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   000097   74FF         MOV     A,#-0x1
   \   000099   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00009B   700D         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   00009D   90....       MOV     DPTR,#_NIB + 20
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   64FE         XRL     A,#0xfe
   \   0000A3   7003         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000A8   601D         JZ      ??ZDApp_ProcessNetworkJoin_14
   1577                {
   1578                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   74FE         MOV     A,#-0x2
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   04           INC     A
   \   0000B5   F0           MOVX    @DPTR,A
   1579                  // Invalidate nwk addr so end device does not use in its data reqs.
   1580                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000B6   90....       MOV     DPTR,#_NIB + 20
   \   0000B9   14           DEC     A
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   04           INC     A
   \   0000BD   F0           MOVX    @DPTR,A
   1581                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000BE                ; Setup parameters for call to function ZMacSetReq
   \   0000BE   AA..         MOV     R2,?XSP + 0
   \   0000C0   AB..         MOV     R3,?XSP + 1
   \   0000C2   7953         MOV     R1,#0x53
   \   0000C4   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1582                }
   1583          
   1584                // Clear the neighbor Table and network discovery tables.
   1585                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C7                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000C7   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1586                NLME_NwkDiscTerm();
   \   0000CA                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000CA   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1587          
   1588                zdoDiscCounter = 1;
   \   0000CD   90....       MOV     DPTR,#zdoDiscCounter
   \   0000D0   7401         MOV     A,#0x1
   \   0000D2   F0           MOVX    @DPTR,A
   1589          
   1590                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1591                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000D3                ; Setup parameters for call to function osal_rand
   \   0000D3   02....       LJMP    ??ZDApp_ProcessNetworkJoin_15 & 0xFFFF
   1592              }
   1593            }
   1594            else if ( devState == DEV_NWK_ORPHAN ||
   1595                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1596                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1597                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1598                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   6404         XRL     A,#0x4
   \   0000D9   6012         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   640E         XRL     A,#0xe
   \   0000DE   600D         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   640F         XRL     A,#0xf
   \   0000E3   6008         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   640D         XRL     A,#0xd
   \   0000E8   6003         JZ      $+5
   \   0000EA   02....       LJMP    ??ZDApp_ProcessNetworkJoin_16 & 0xFFFF
   1599            {
   1600              // results of an orphaning attempt by this device
   1601              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000ED   90....       MOV     DPTR,#nwkStatus
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   7074         JNZ     ??ZDApp_ProcessNetworkJoin_17
   1602              {
   1603                // Verify NWK key is available before sending Device_annce
   1604                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   0000F3                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000F3   7901         MOV     R1,#0x1
   \   0000F5   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000F8   E9           MOV     A,R1
   \   0000F9   700F         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1605                {
   1606                  // wait for auth from trust center
   1607                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   0000FB                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000FB   7905         MOV     R1,#0x5
   \   0000FD   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1608          
   1609                  // Start the reset timer for MAX UNAUTH time
   1610                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000100                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000100   7A10         MOV     R2,#0x10
   \   000102   7B27         MOV     R3,#0x27
   \   000104   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   000107   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1611                }
   1612                else
   1613                {
   1614                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00010A                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010A   7906         MOV     R1,#0x6
   \   00010C   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1615          
   1616                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   00010F                ; Setup parameters for call to function osal_stop_timerEx
   \   00010F   7A00         MOV     R2,#0x0
   \   000111   7B20         MOV     R3,#0x20
   \   000113   90....       MOV     DPTR,#ZDAppTaskID
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F9           MOV     R1,A
   \   000118   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1617          
   1618                  // setup Power Manager Device
   1619          #if defined ( POWER_SAVING )
   1620                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \   00011B                ; Setup parameters for call to function osal_pwrmgr_device
   \   00011B   7901         MOV     R1,#0x1
   \   00011D   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1621          #endif
   1622          
   1623                  // The receiver is on, turn network layer polling off.
   1624                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000120   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000123   E0           MOVX    A,@DPTR
   \   000124   A2E3         MOV     C,0xE0 /* A   */.3
   \   000126   501D         JNC     ??ZDApp_ProcessNetworkJoin_19
   1625                  {
   1626                    // if Child Table Management process is not enabled
   1627                    if ( zgChildAgingEnable == FALSE )
   \   000128   90....       MOV     DPTR,#zgChildAgingEnable
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   7017         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1628                    {
   1629                      NLME_SetPollRate( 0 );
   \   00012E                ; Setup parameters for call to function NLME_SetPollRate
   \   00012E   90....       MOV     DPTR,#__Constant_0
   \   000131   12....       LCALL   ?XLOAD_R2345
   \   000134   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1630                      NLME_SetQueuedPollRate( 0 );
   \   000137                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000137   7A00         MOV     R2,#0x0
   \   000139   7B00         MOV     R3,#0x0
   \   00013B   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1631                      NLME_SetResponseRate( 0 );
   \   00013E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00013E   7A00         MOV     R2,#0x0
   \   000140   7B00         MOV     R3,#0x0
   \   000142   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1632                    }
   1633                  }
   1634          
   1635                  if ( ZSTACK_ROUTER_BUILD )
   1636                  {
   1637                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1638                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1639                    {
   1640                      NLME_StartRouterRequest( 0, 0, false );
   1641                    }
   1642                  }
   1643          
   1644                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000145                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000145   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1645          
   1646                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1647                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1648                        && (zgChildAgingEnable == TRUE) ) )
   \   000148   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00014E   500B         JNC     ??ZDApp_ProcessNetworkJoin_20
   \   000150   90....       MOV     DPTR,#zgChildAgingEnable
   \   000153   E0           MOVX    A,@DPTR
   \   000154   6401         XRL     A,#0x1
   \   000156   6003         JZ      $+5
   \   000158   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1649                  {
   1650                    NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00015B                ; Setup parameters for call to function NLME_SetPollRate
   \   00015B   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00015E   12....       LCALL   ?XLOAD_R2345
   \   000161   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000164   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1651                  }
   1652                }
   1653              }
   1654              else
   1655              {
   1656                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000167   90....       MOV     DPTR,#devStartMode
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   6401         XRL     A,#0x1
   \   00016D   7038         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1657                {
   1658                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   00016F   90....       MOV     DPTR,#retryCnt
   \   000172   E0           MOVX    A,@DPTR
   \   000173   04           INC     A
   \   000174   F0           MOVX    @DPTR,A
   \   000175   C3           CLR     C
   \   000176   9404         SUBB    A,#0x4
   \   000178   501F         JNC     ??ZDApp_ProcessNetworkJoin_22
   1659                  {
   1660                    if ( _NIB.nwkPanId == 0xFFFF )
   \   00017A   90....       MOV     DPTR,#_NIB + 33
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F4           CPL     A
   \   00017F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_23
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000184   601B         JZ      ??ZDApp_ProcessNetworkJoin_24
   1661                      devStartMode = MODE_JOIN;
   1662                    else
   1663                    {
   1664                      devStartMode = MODE_REJOIN;
   \   000186   90....       MOV     DPTR,#devStartMode
   \   000189   7403         MOV     A,#0x3
   \   00018B   F0           MOVX    @DPTR,A
   1665                      _tmpRejoinState = true;
   \   00018C   90....       MOV     DPTR,#_tmpRejoinState
   \   00018F   7401         MOV     A,#0x1
   \   000191   F0           MOVX    @DPTR,A
   1666                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000192   90....       MOV     DPTR,#prevDevState
   \   000195   7404         MOV     A,#0x4
   \   000197   8068         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1667                    }
   1668                  }
   1669                  // Do a normal join to the network after certain times of rejoin retries
   1670                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000199   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   6401         XRL     A,#0x1
   \   00019F   7061         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1671                  {
   1672                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001A1   90....       MOV     DPTR,#devStartMode
   \   0001A4   E4           CLR     A
   \   0001A5   805A         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1673                  }
   1674                }
   1675                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   6403         XRL     A,#0x3
   \   0001AA   7056         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1676                {
   1677                  if ( ZSTACK_END_DEVICE_BUILD )
   1678                  {
   1679                    devStartMode = MODE_REJOIN;
   1680                    _tmpRejoinState = true;
   \   0001AC   90....       MOV     DPTR,#_tmpRejoinState
   \   0001AF   7401         MOV     A,#0x1
   \   0001B1   F0           MOVX    @DPTR,A
   1681                    _NIB.nwkState = NWK_INIT;
   \   0001B2   90....       MOV     DPTR,#_NIB + 35
   \   0001B5   E4           CLR     A
   \   0001B6   F0           MOVX    @DPTR,A
   1682          
   1683                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   0001B7   90....       MOV     DPTR,#prevDevState
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   6404         XRL     A,#0x4
   \   0001BD   7007         JNZ     ??ZDApp_ProcessNetworkJoin_27
   1684                    {
   1685                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0001BF   12....       LCALL   ?Subroutine10 & 0xFFFF
   1686                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1687                    }
   \                     ??CrossCallReturnLabel_0:
   \   0001C2   740D         MOV     A,#0xd
   \   0001C4   803B         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1688                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   640D         XRL     A,#0xd
   \   0001C9   702C         JNZ     ??ZDApp_ProcessNetworkJoin_28
   1689                    {
   1690                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1691                      _NIB.nwkKeyLoaded = FALSE;
   \   0001CB   90....       MOV     DPTR,#_NIB + 61
   \   0001CE   E4           CLR     A
   \   0001CF   F0           MOVX    @DPTR,A
   1692                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   \   0001D0                ; Setup parameters for call to function ZDApp_ResetNwkKey
   \   0001D0   12....       LCALL   `??ZDApp_ResetNwkKey::?relay`; Banked call to: ZDApp_ResetNwkKey
   1693                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   0001D3   75..01       MOV     ?V0,#0x1
   \   0001D6   75..00       MOV     ?V1,#0x0
   \   0001D9   75..00       MOV     ?V2,#0x0
   \   0001DC   75..00       MOV     ?V3,#0x0
   \   0001DF   90....       MOV     DPTR,#_NIB + 22
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   78..         MOV     R0,#?V0
   \   0001E5   12....       LCALL   ?L_SHL
   \   0001E8   90....       MOV     DPTR,#runtimeChannel
   \   0001EB   78..         MOV     R0,#?V0
   \   0001ED   12....       LCALL   ?L_MOV_TO_X
   1694                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   \   0001F0   90....       MOV     DPTR,#prevDevState
   \   0001F3   740E         MOV     A,#0xe
   \   0001F5   800A         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1695                    }
   1696                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   640E         XRL     A,#0xe
   \   0001FA   7006         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1697                    {
   1698                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0001FC   12....       LCALL   ?Subroutine10 & 0xFFFF
   1699                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1700                    }
   1701          
   1702                  }
   1703                }
   \                     ??CrossCallReturnLabel_1:
   \   0001FF   740F         MOV     A,#0xf
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000201   F0           MOVX    @DPTR,A
   1704          
   1705                // Clear the neighbor Table and network discovery tables.
   1706                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000202                ; Setup parameters for call to function nwkNeighborInitTable
   \   000202   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1707                NLME_NwkDiscTerm();
   \   000205                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000205   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1708          
   1709                // setup a retry for later...
   1710                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1711                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000208                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000208   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00020B                ; Setup parameters for call to function ZDApp_NetworkInit
   1712              }
   1713            }
   \   00020B   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00020E   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000211   8012         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1714          #if defined ( ZIGBEEPRO )
   1715            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   000213   E0           MOVX    A,@DPTR
   \   000214   600F         JZ      ??ZDApp_ProcessNetworkJoin_6
   1716            {
   1717              // Assume from address conflict
   1718          
   1719              // Notify the network
   1720              ZDApp_AnnounceNewAddress();
   \   000216                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000216   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1721          
   1722              // Notify apps
   1723              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000219                ; Setup parameters for call to function osal_set_event
   \   000219   7A10         MOV     R2,#0x10
   \   00021B   7B00         MOV     R3,#0x0
   \   00021D   90....       MOV     DPTR,#ZDAppTaskID
   \   000220   E0           MOVX    A,@DPTR
   \   000221   F9           MOV     R1,A
   \   000222   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1724            }
   1725          #endif
   1726          }
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000225   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#runtimeChannel
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   74F8         MOV     A,#-0x8
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7407         MOV     A,#0x7
   \   000010   F0           MOVX    @DPTR,A
   \   000011   90....       MOV     DPTR,#prevDevState
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0
   1727          
   1728          /*********************************************************************
   1729           * @fn      ZDApp_SaveNwkKey()
   1730           *
   1731           * @brief   Save off the Network key information.
   1732           *
   1733           * @param   none
   1734           *
   1735           * @return  none
   1736           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1737          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1738          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1739            nwkActiveKeyItems keyItems;
   1740          
   1741            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1742          
   1743            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1744                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1745          
   1746            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1747          
   1748            // Clear copy in RAM before return.
   1749            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV     R4,#0x15
   \   000042   FD           MOV     R5,A
   \   000043   F9           MOV     R1,A
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1750          
   1751          }
   \   00004B                REQUIRE ?Subroutine8
   \   00004B                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   1752          
   1753          /*********************************************************************
   1754           * @fn      ZDApp_ForceConcentratorChange()
   1755           *
   1756           * @brief   Force a network concentrator change by resetting
   1757           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1758           *          from NV and set nwk event.
   1759           *
   1760           * @param   none
   1761           *
   1762           * @return  none
   1763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1764          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1766            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1767            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1768          
   1769            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1770            {
   1771              // Start next event
   1772              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1773            }
   1774            else
   1775            {
   1776              // Stop the next event
   1777              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1778            }
   1779          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1780          
   1781          /*********************************************************************
   1782           * @fn      ZDApp_ResetNwkKey()
   1783           *
   1784           * @brief   Reset the Network key information in NV.
   1785           *
   1786           * @param   none
   1787           *
   1788           * @return  none
   1789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1790          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1791          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1792            nwkActiveKeyItems keyItems;
   1793          
   1794            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1795            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1796                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1797          }
   \   00003F   02....       LJMP    ?Subroutine8 & 0xFFFF
   1798          
   1799          /*********************************************************************
   1800           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1801           *
   1802           * @brief
   1803           *
   1804           *   Save off the Network key information.
   1805           *
   1806           * @param   incrFrmCnt - set to true if we want to increment the network
   1807                      frame counter, else set to false
   1808           *
   1809           * @return  true if restored from NV, false if not
   1810           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1811          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1813            nwkActiveKeyItems keyItems;
   1814            uint8 ret = FALSE;
   \   00000C   7F00         MOV     R7,#0x0
   1815          
   1816            // Restore the key information
   1817            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1818                == ZSUCCESS )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   A8..         MOV     R0,?XSP + 0
   \   000010   A9..         MOV     R1,?XSP + 1
   \   000012   88..         MOV     ?V0,R0
   \   000014   89..         MOV     ?V1,R1
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   75..15       MOV     ?V0,#0x15
   \   00001E   8F..         MOV     ?V1,R7
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7C00         MOV     R4,#0x0
   \   000027   7D00         MOV     R5,#0x0
   \   000029   7A82         MOV     R2,#-0x7e
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   E9           MOV     A,R1
   \   000036   6003         JZ      $+5
   \   000038   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1819            {
   1820              uint8 nullKey[SEC_KEY_LEN];
   1821          
   1822              // initialize default value to compare to
   1823              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C10         MOV     R4,#0x10
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7900         MOV     R1,#0x0
   \   000041   7415         MOV     A,#0x15
   \   000043   12....       LCALL   ?XSTACK_DISP101_8
   \   000046   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1824          
   1825              // if stored key is different than default value, then a key has been established
   1826              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000049                ; Setup parameters for call to function osal_memcmp
   \   000049   7415         MOV     A,#0x15
   \   00004B   12....       LCALL   ?XSTACK_DISP100_8
   \   00004E   88..         MOV     ?V0,R0
   \   000050   89..         MOV     ?V1,R1
   \   000052   8F..         MOV     ?V2,R7
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C10         MOV     R4,#0x10
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   A982         MOV     R1,DPL
   \   000064   AA83         MOV     R2,DPH
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006B   7403         MOV     A,#0x3
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   E9           MOV     A,R1
   \   000071   7060         JNZ     ??ZDApp_RestoreNwkKey_0
   1827              {
   1828                if ( incrFrmCnt )
   \   000073   EE           MOV     A,R6
   \   000074   604E         JZ      ??ZDApp_RestoreNwkKey_1
   1829                {
   1830                  // Increment the frame counter stored in NV
   1831                  keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1832                                            NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000076   90....       MOV     DPTR,#__Constant_4e2
   \   000079   78..         MOV     R0,#?V0
   \   00007B   12....       LCALL   ?L_MOV_X
   \   00007E   7411         MOV     A,#0x11
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?L_ADD_TO_X
   1833          
   1834                  nwkFrameCounter = keyItems.frameCounter;
   \   000088   7411         MOV     A,#0x11
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?XLOAD_R0123
   \   000090   90....       MOV     DPTR,#nwkFrameCounter
   \   000093   12....       LCALL   ?XSTORE_R0123
   1835          
   1836                  // Save the updated Frame Counter right away
   1837                  osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1838                                (void *)&keyItems );
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   A8..         MOV     R0,?XSP + 0
   \   000098   A9..         MOV     R1,?XSP + 1
   \   00009A   88..         MOV     ?V0,R0
   \   00009C   89..         MOV     ?V1,R1
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   75..15       MOV     ?V0,#0x15
   \   0000A6   8F..         MOV     ?V1,R7
   \   0000A8   78..         MOV     R0,#?V0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   7C00         MOV     R4,#0x0
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   7A82         MOV     R2,#-0x7e
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   1839          
   1840                  nwkFrameCounterChanges = 0;
   \   0000BD   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   F0           MOVX    @DPTR,A
   1841                }
   1842          
   1843                ret = TRUE;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   0000C4   7F01         MOV     R7,#0x1
   1844          
   1845                // Clear copy in RAM before return.
   1846                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C6                ; Setup parameters for call to function osal_memset
   \   0000C6   7C15         MOV     R4,#0x15
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7900         MOV     R1,#0x0
   \   0000CC   AA..         MOV     R2,?XSP + 0
   \   0000CE   AB..         MOV     R3,?XSP + 1
   \   0000D0   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1847              }
   1848            }
   1849          
   1850            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000D3   EF           MOV     A,R7
   \   0000D4   F9           MOV     R1,A
   \   0000D5   7425         MOV     A,#0x25
   \   0000D7   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   1851          }
   1852          
   1853          /*********************************************************************
   1854           * @fn      ZDApp_ResetTimerStart
   1855           *
   1856           * @brief   Start the reset timer.
   1857           *
   1858           * @param   delay - delay time(ms) before reset
   1859           *
   1860           * @return  none
   1861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1862          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1864            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1865            {
   1866              // Start the rest timer
   1867              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1868            }
   1869          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1870          
   1871          /*********************************************************************
   1872           * @fn      ZDApp_ResetTimerCancel
   1873           *
   1874           * @brief   Cancel the reset timer.
   1875           *
   1876           * @param   none
   1877           *
   1878           * @return  none
   1879           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1880          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1881          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1882            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1883            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1884          }
   \   00001C   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1885          
   1886          /*********************************************************************
   1887           * @fn      ZDApp_LeaveCtrlInit
   1888           *
   1889           * @brief   Initialize the leave control logic.
   1890           *
   1891           * @param   none
   1892           *
   1893           * @return  none
   1894           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1895          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1896          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1897            uint8 status;
   1898          
   1899          
   1900            // Initialize control state
   1901            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1902          
   1903            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1904                                        sizeof(ZDApp_LeaveCtrl),
   1905                                        &ZDApp_LeaveCtrl );
   1906          
   1907            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1908            {
   1909              // Read saved control
   1910              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1911                            0,
   1912                            sizeof( uint8 ),
   1913                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1914            }
   1915          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1916          
   1917          /*********************************************************************
   1918           * @fn      ZDApp_LeaveCtrlSet
   1919           *
   1920           * @brief   Set the leave control logic.
   1921           *
   1922           * @param   ra - reassociate flag
   1923           *
   1924           * @return  none
   1925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1926          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1927          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1928            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1929          
   1930            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1931            {
   1932              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1933            }
   1934          
   1935            // Write the leave control
   1936            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1937                           0,
   1938                           sizeof( uint8 ),
   1939                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine4 & 0xFFFF
   1940          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine49_0
   \   000023                ; // Fall through to label ??Subroutine49_0
   1941          
   1942          /*********************************************************************
   1943           * @fn      ZDApp_LeaveCtrlReset
   1944           *
   1945           * @brief   Re-initialize the leave control logic.
   1946           *
   1947           * @param   none
   1948           *
   1949           * @return  none
   1950           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1951          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1952          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1953            // Set leave control to initialized state
   1954            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1955          
   1956            // Write initialized control
   1957            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1958                          0,
   1959                          sizeof( uint8 ),
   1960                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine4 & 0xFFFF
   1961          }
   1962          
   1963          /*********************************************************************
   1964           * @fn      ZDApp_LeaveCtrlBypass
   1965           *
   1966           * @brief   Check if NV restore should be skipped during a leave reset.
   1967           *
   1968           * @param   none
   1969           *
   1970           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1972          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1973          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1974            uint8 bypass;
   1975          
   1976            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1977            {
   1978              bypass = TRUE;
   1979            }
   1980            else
   1981            {
   1982              bypass = FALSE;
   1983            }
   1984          
   1985            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine40_0
   1986          }
   1987          
   1988          /*********************************************************************
   1989           * @fn      ZDApp_LeaveCtrlStartup
   1990           *
   1991           * @brief   Check for startup conditions during a leave reset.
   1992           *
   1993           * @param   state      - devState_t determined by leave control logic
   1994           * @param   startDelay - startup delay
   1995           *
   1996           * @return  none
   1997           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1998          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1999          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2000            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   2001          
   2002            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   2003            {
   2004              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   2005              {
   2006                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   2007              }
   2008              else
   2009              {
   2010                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   2011              }
   2012          
   2013              // Reset leave control logic
   2014              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2015            }
   2016          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine40_0
   2017          
   2018          /*********************************************************************
   2019           * @fn      ZDApp_LeaveReset
   2020           *
   2021           * @brief   Setup a device reset due to a leave indication/confirm.
   2022           *
   2023           * @param   ra - reassociate flag
   2024           *
   2025           * @return  none
   2026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2027          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2028          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2029            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2030          
   2031            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV     R2,#-0x78
   \   00000C   7B13         MOV     R3,#0x13
   \   00000E   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2032          
   2033            if ( ZSTACK_ROUTER_BUILD )
   2034            {
   2035              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2036              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2037            }
   2038          
   2039            if (ZG_DEVICE_ENDDEVICE_TYPE)
   2040            {
   2041              // Save polling values to be restored after rejoin
   2042              if ( ra == TRUE )
   \   000011   7401         MOV     A,#0x1
   \   000013   6E           XRL     A,R6
   \   000014   7024         JNZ     ??CrossCallReturnLabel_7
   2043              {
   2044                zgPollRate = POLL_RATE;
   \   000016   90....       MOV     DPTR,#zgPollRate
   \   000019   12....       LCALL   ?Subroutine11 & 0xFFFF
   2045                ZDApp_SavedPollRate = zgPollRate;
   \                     ??CrossCallReturnLabel_2:
   \   00001C   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00001F   12....       LCALL   ?Subroutine11 & 0xFFFF
   2046                zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     ??CrossCallReturnLabel_3:
   \   000022   90....       MOV     DPTR,#zgResponsePollRate
   \   000025   12....       LCALL   ?Subroutine13 & 0xFFFF
   2047                savedResponseRate = zgResponsePollRate;
   \                     ??CrossCallReturnLabel_4:
   \   000028   90....       MOV     DPTR,#savedResponseRate
   \   00002B   12....       LCALL   ?Subroutine13 & 0xFFFF
   2048                zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     ??CrossCallReturnLabel_5:
   \   00002E   90....       MOV     DPTR,#zgQueuedPollRate
   \   000031   12....       LCALL   ?Subroutine13 & 0xFFFF
   2049                savedQueuedPollRate = zgQueuedPollRate;
   \                     ??CrossCallReturnLabel_6:
   \   000034   90....       MOV     DPTR,#savedQueuedPollRate
   \   000037   12....       LCALL   ?Subroutine13 & 0xFFFF
   2050              }
   2051          
   2052              // Disable polling
   2053              NLME_SetPollRate(0);
   \                     ??CrossCallReturnLabel_7:
   \   00003A                ; Setup parameters for call to function NLME_SetPollRate
   \   00003A   90....       MOV     DPTR,#__Constant_0
   \   00003D   12....       LCALL   ?XLOAD_R2345
   \   000040   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2054              NLME_SetResponseRate(0);
   \   000043                ; Setup parameters for call to function NLME_SetResponseRate
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2055              NLME_SetQueuedPollRate(0);
   \   00004A                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2056            }
   2057          
   2058            if ( ra == TRUE )
   \   000051   7401         MOV     A,#0x1
   \   000053   6E           XRL     A,R6
   \   000054   7029         JNZ     ??ZDApp_LeaveReset_0
   2059            {
   2060              devState = DEV_NWK_DISC;
   \   000056   90....       MOV     DPTR,#devState
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?Subroutine14 & 0xFFFF
   2061              devStartMode = MODE_REJOIN;
   2062              _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_9:
   \   00005E   7401         MOV     A,#0x1
   \   000060   12....       LCALL   ?Subroutine15 & 0xFFFF
   2063          
   2064              // For rejoin, specify the extended PANID to look for
   2065              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_11:
   \   000063   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2066          
   2067              _NIB.nwkState = NWK_DISC;
   \   000066   90....       MOV     DPTR,#_NIB + 35
   \   000069   7402         MOV     A,#0x2
   \   00006B   F0           MOVX    @DPTR,A
   2068          
   2069              zdoDiscCounter = 3;
   \   00006C   90....       MOV     DPTR,#zdoDiscCounter
   \   00006F   04           INC     A
   \   000070   F0           MOVX    @DPTR,A
   2070              NLME_NwkDiscTerm();
   \   000071                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000071   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   2071          
   2072              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   000074                ; Setup parameters for call to function osal_rand
   \   000074   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000077                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000077   12....       LCALL   ?Subroutine29 & 0xFFFF
   2073            }
   \                     ??CrossCallReturnLabel_35:
   \   00007A   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   00007D   8007         SJMP    ??ZDApp_LeaveReset_1
   2074            else
   2075            {
   2076              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_0:
   \   00007F                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00007F   7A88         MOV     R2,#-0x78
   \   000081   7B13         MOV     R3,#0x13
   \   000083   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2077            }
   2078          }
   \                     ??ZDApp_LeaveReset_1:
   \   000086   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   7403         MOV     A,#0x3
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7410         MOV     A,#0x10
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   7427         MOV     A,#0x27
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
   2079          
   2080          /*********************************************************************
   2081           * @fn      ZDApp_LeaveUpdate
   2082           *
   2083           * @brief   Update local device data related to leaving device.
   2084           *
   2085           * @param   nwkAddr        - NWK address of leaving device
   2086           * @param   extAddr        - EXT address of leaving device
   2087           * @param   removeChildren - remove children of leaving device
   2088           *
   2089           * @return  none
   2090           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2091          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2092                                  uint8 removeChildren )
   2093          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   2094            // Remove Apps Key for leaving device
   2095            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2096          
   2097            // Clear SECURITY bit from Address Manager
   2098            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2099          
   2100            if ( pbindRemoveDev )
   \   000020   90....       MOV     DPTR,#pbindRemoveDev
   \   000023   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000026   6032         JZ      ??ZDApp_LeaveUpdate_0
   2101            {
   2102              zAddrType_t devAddr;
   2103          
   2104              // Remove bind entry and all related data
   2105              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7403         MOV     A,#0x3
   \   00002F   F0           MOVX    @DPTR,A
   2106              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV     ?V4,R6
   \   000032   8F..         MOV     ?V5,R7
   \   000034   75..00       MOV     ?V6,#0x0
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV     R4,#0x8
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP101_8
   \   000045   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   2107          
   2108              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV     R2,?XSP + 0
   \   00004F   AB..         MOV     R3,?XSP + 1
   \   000051   90....       MOV     DPTR,#pbindRemoveDev
   \   000054   12....       LCALL   ?Subroutine37 & 0xFFFF
   2109            }
   \                     ??CrossCallReturnLabel_56:
   \   000057   12....       LCALL   ?CALL_IND
   2110          
   2111            // Remove if child
   2112            if ( ZSTACK_ROUTER_BUILD )
   2113            {
   2114              // Router shall notify the Trust Center that a child End Device or
   2115              // a neighbor Router (within radius=1) has left the network
   2116              APSME_UpdateDeviceReq_t req;
   2117          
   2118              // forward authorization to the Trust Center
   2119              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   2120              req.devAddr    = nwkAddr;
   2121              req.devExtAddr = extAddr;
   2122              req.status = APSME_UD_DEVICE_LEFT;
   2123          
   2124              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2125              {
   2126                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2127                // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2128                // with legacy Coordinator devices which can only handle one or the other.
   2129                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   2130                {
   2131                  req.apsSecure = FALSE;
   2132          
   2133                  // send and APSME_UPDATE_DEVICE request to the trust center
   2134                  APSME_UpdateDeviceReq( &req );
   2135                }
   2136          
   2137                // send the message APS encrypted
   2138                req.apsSecure = TRUE;
   2139          
   2140                // send and APSME_UPDATE_DEVICE request to the trust center
   2141                APSME_UpdateDeviceReq( &req );
   2142              }
   2143              else
   2144              {
   2145                req.apsSecure = FALSE;
   2146          
   2147                // send and APSME_UPDATE_DEVICE request to the trust center
   2148                APSME_UpdateDeviceReq( &req );
   2149              }
   2150          
   2151              NLME_RemoveChild( extAddr, removeChildren );
   2152            }
   2153          
   2154            // Remove Routing table related entry
   2155            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   AA..         MOV     R2,?V0
   \   00005E   AB..         MOV     R3,?V1
   \   000060   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2156          
   2157            // Remove entry from neighborTable
   2158            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000063                ; Setup parameters for call to function nwkNeighborRemove
   \   000063   90....       MOV     DPTR,#_NIB + 33
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FC           MOV     R4,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FD           MOV     R5,A
   \   00006B   AA..         MOV     R2,?V0
   \   00006D   AB..         MOV     R3,?V1
   \   00006F   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2159          
   2160            // Schedule to save data to NV
   2161            ZDApp_NwkWriteNVRequest();
   2162          }
   \   000072   7409         MOV     A,#0x9
   \   000074                REQUIRE ?Subroutine5
   \   000074                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   2163          
   2164          /*********************************************************************
   2165           * @fn      ZDApp_NetworkDiscoveryReq
   2166           *
   2167           * @brief   Request a network discovery.
   2168           *
   2169           * @param  scanChannels -
   2170           * @param  scanDuration -
   2171           *
   2172           * @return  ZStatus_t
   2173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2174          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2176            // Setup optional filters - tbd
   2177          
   2178            // Request NLME network discovery
   2179            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   2180          }
   2181          
   2182          /*********************************************************************
   2183           * @fn      ZDApp_JoinReq
   2184           *
   2185           * @brief   Request the device to join a parent in a network.
   2186           *
   2187           * @param   channel -
   2188           * @param   panID -
   2189           *
   2190           * @return  ZStatus_t
   2191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2192          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2193                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2195            // Sync up the node with the stack profile (In the case where a pro device
   2196            // joins a non-pro network, or verse versa)
   2197            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2198          
   2199            // Request NLME Join Request
   2200            return NLME_JoinRequest(extendedPanID, panID,channel,
   2201                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2202                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046                REQUIRE ?Subroutine9
   \   000046                ; // Fall through to label ?Subroutine9
   2203          
   2204          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7404         MOV     A,#0x4
   \   000002   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   2205          
   2206          /*********************************************************************
   2207           * @fn      ZDApp_DeviceConfigured
   2208           *
   2209           * @brief   Check to see if the local device is configured (i.e., part
   2210           *          of a network).
   2211           *
   2212           * @param   none
   2213           *
   2214           * @return  TRUE if configured. FALSE, otherwise.
   2215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2216          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2217          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2218            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2219          
   2220            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2221                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2222          
   2223            // Does the NIB have anything more than default?
   2224            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054   7402         MOV     A,#0x2
   \   000056   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   2225          }
   2226          
   2227          /*********************************************************************
   2228           * CALLBACK FUNCTIONS
   2229           */
   2230          
   2231          
   2232          /*********************************************************************
   2233           * @fn      ZDApp_SendEventMsg()
   2234           *
   2235           * @brief
   2236           *
   2237           *   Sends a Network Join message
   2238           *
   2239           * @param  cmd - command ID
   2240           * @param  len - length (in bytes) of the buf field
   2241           * @param  buf - buffer for the rest of the message.
   2242           *
   2243           * @return  none
   2244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2245          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2246          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2247            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2248          }
   \   000013   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   2249          
   2250          /*********************************************************************
   2251           * @fn      ZDApp_SendMsg()
   2252           *
   2253           * @brief   Sends a OSAL message
   2254           *
   2255           * @param  taskID - Where to send the message
   2256           * @param  cmd - command ID
   2257           * @param  len - length (in bytes) of the buf field
   2258           * @param  buf - buffer for the rest of the message.
   2259           *
   2260           * @return  none
   2261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2262          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   2264            osal_event_hdr_t *msgPtr;
   2265          
   2266            // Send the address to the task
   2267            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV     R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   2268            if ( msgPtr )
   \   00001C   EA           MOV     A,R2
   \   00001D   45..         ORL     A,?V1
   \   00001F   6035         JZ      ??ZDApp_SendMsg_0
   2269            {
   2270              if ( (len > 0) && (buf != NULL) )
   \   000021   EE           MOV     A,R6
   \   000022   6020         JZ      ??ZDApp_SendMsg_1
   \   000024   E5..         MOV     A,?V2
   \   000026   45..         ORL     A,?V3
   \   000028   601A         JZ      ??ZDApp_SendMsg_1
   2271                osal_memcpy( msgPtr, buf, len );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   85....       MOV     ?V8,?V2
   \   00002D   85....       MOV     ?V9,?V3
   \   000030   75..00       MOV     ?V10,#0x0
   \   000033   78..         MOV     R0,#?V8
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   2272          
   2273              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   E5..         MOV     A,?V6
   \   00004C   F0           MOVX    @DPTR,A
   2274              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004D                ; Setup parameters for call to function osal_msg_send
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   A9..         MOV     R1,?V4
   \   000053   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2275            }
   2276          }
   \                     ??ZDApp_SendMsg_0:
   \   000056   7F0B         MOV     R7,#0xb
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   2277          
   2278          /*********************************************************************
   2279           * Call Back Functions from NWK  - API
   2280           */
   2281          
   2282          /*********************************************************************
   2283           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2284           *
   2285           * @brief       This function returns a choice of PAN to join.
   2286           *
   2287           * @param       status - return status of the nwk discovery confirm
   2288           *
   2289           * @return      ZStatus_t
   2290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2291          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2292          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2293            osal_event_hdr_t msg;
   2294          
   2295            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2296            // Send ZDO_MGMT_NWK_DISC_RSP back
   2297          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2298            if ( zdappMgmtNwkDiscReqInProgress )
   2299            {
   2300              zdappMgmtNwkDiscReqInProgress = false;
   2301              ZDO_FinishProcessingMgmtNwkDiscReq();
   2302            }
   2303            else
   2304          #endif
   2305            {
   2306              // Pass the confirm to another task if it registers the callback
   2307              // Otherwise, pass the confirm to ZDApp.
   2308              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000017   6009         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2309              {
   2310                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   \   000020   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2311              }
   2312              else
   2313              {
   2314                // Otherwise, send scan confirm to ZDApp task to proceed
   2315                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   2316                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC     A
   \   00002A   12....       LCALL   ?XSTACK_DISP102_8
   \   00002D   7B02         MOV     R3,#0x2
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2317              }
   2318            }
   2319            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000039   7900         MOV     R1,#0x0
   \   00003B   7403         MOV     A,#0x3
   \   00003D   02....       LJMP    ?Subroutine3 & 0xFFFF
   2320          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
   2321          
   2322          /*********************************************************************
   2323           * @fn          ZDApp_NwkDescListProcessing
   2324           *
   2325           * @brief       This function process the network discovery result and select
   2326           *              a parent device to join itself.
   2327           *
   2328           * @param       none
   2329           *
   2330           * @return      ZStatus_t
   2331           */
   2332          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2333          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2334          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2335            networkDesc_t *pNwkDesc;
   2336            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2337            uint8 stackProfile;
   2338            uint8 stackProfilePro;
   2339            uint8 selected;
   2340          
   2341            // Count the number of nwk descriptors in the list
   2342            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_67
   2343            while (pNwkDesc)
   2344            {
   2345              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2346              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine25 & 0xFFFF
   2347            }
   \                     ??CrossCallReturnLabel_67:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2348          
   2349            // process discovery results
   2350            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2351            selected = FALSE;
   2352          
   2353          
   2354            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2355            {
   2356              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2357              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8019         SJMP    ??CrossCallReturnLabel_68
   2358              {
   2359                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2360                {
   2361                  // If the extended Pan ID is commissioned to a non zero value
   2362                  // Only join the Pan that has match EPID
   2363                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2364                    continue;
   2365          
   2366                }
   2367                else if ( zgConfigPANID != 0xFFFF )
   2368                {
   2369                  // PAN Id is preconfigured. check if it matches
   2370                  if ( pNwkDesc->panId != zgConfigPANID )
   2371                    continue;
   2372                }
   2373          
   2374                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2375                {
   2376                  // check that network is allowing joining
   2377                  if ( ZSTACK_ROUTER_BUILD )
   2378                  {
   2379                    if ( stackProfilePro == FALSE )
   2380                    {
   2381                      if ( !pNwkDesc->routerCapacity )
   2382                      {
   2383                        continue;
   2384                      }
   2385                    }
   2386                    else
   2387                    {
   2388                      if ( !pNwkDesc->deviceCapacity )
   2389                      {
   2390                        continue;
   2391                      }
   2392                    }
   2393                  }
   2394                  else if ( ZSTACK_END_DEVICE_BUILD )
   2395                  {
   2396                    if ( !pNwkDesc->deviceCapacity )
   2397                    {
   2398                      continue;
   2399                    }
   2400                  }
   2401                }
   2402          
   2403                // check version of zigbee protocol
   2404                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2405                  continue;
   2406          
   2407                // check version of stack profile
   2408                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2409                {
   2410                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2411                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7008         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2412                  {
   2413                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV     ?V0,#0x1
   2414                  }
   2415          
   2416                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV     A,?V2
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC     ?V3
   \   00004A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00004D   E5..         MOV     A,?V3
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V1
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV     A,R1
   \   00005F   6401         XRL     A,#0x1
   \   000061   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV     A,R6
   \   000064   240B         ADD     A,#0xb
   \   000066   FC           MOV     R4,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV     A,R1
   \   000072   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV     DPTR,#zgConfigPANID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F4           CPL     A
   \   00007B   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000085   90....       MOV     DPTR,#zgConfigPANID
   \   000088   E0           MOVX    A,@DPTR
   \   000089   68           XRL     A,R0
   \   00008A   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV     DPTR,#_NIB + 23
   \   000094   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   68           XRL     A,R0
   \   00009A   7003         JNZ     ??ZDApp_NwkDescListProcessing_12
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   00009F   700A         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000A1   74FE         MOV     A,#-0x2
   \   0000A3   68           XRL     A,R0
   \   0000A4   7003         JNZ     ??ZDApp_NwkDescListProcessing_14
   \   0000A6   74FF         MOV     A,#-0x1
   \   0000A8   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000A9   700B         JNZ     ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6092         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F8           MOV     R0,A
   \   0000C1   90....       MOV     DPTR,#_NIB + 17
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   68           XRL     A,R0
   \   0000C6   7080         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   90....       MOV     DPTR,#zgStackProfile
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   68           XRL     A,R0
   \   0000D9   6032         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   6003         JZ      $+5
   \   0000E0   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000E3   7402         MOV     A,#0x2
   \   0000E5   68           XRL     A,R0
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000EB   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2417                  {
   2418                    continue;
   2419                  }
   2420                }
   2421          
   2422                break;
   2423              }
   2424          
   2425              if (i < ResultCount)
   2426              {
   2427               selected = TRUE;
   2428                break;
   2429              }
   2430          
   2431              // break if selected or stack profile pro wasn't found
   2432              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   600C         JZ      ??ZDApp_NwkDescListProcessing_16
   2433              {
   2434                break;
   2435              }
   2436            }
   \   0000F2   05..         INC     ?V2
   \   0000F4   E5..         MOV     A,?V2
   \   0000F6   C3           CLR     C
   \   0000F7   9402         SUBB    A,#0x2
   \   0000F9   5003         JNC     $+5
   \   0000FB   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2437          
   2438            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000FE   E5..         MOV     A,?V1
   \   000100   65..         XRL     A,?V3
   \   000102   7009         JNZ     ??ZDApp_NwkDescListProcessing_5
   2439            {
   2440              nwk_desc_list_free();
   \   000104                ; Setup parameters for call to function nwk_desc_list_free
   \   000104   12....       LCALL   `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2441              return (NULL);   // couldn't find appropriate PAN to join !
   \   000107   7A00         MOV     R2,#0x0
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   8004         SJMP    ??ZDApp_NwkDescListProcessing_17
   2442            }
   2443            else
   2444            {
   2445              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   2446            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000111                REQUIRE ?Subroutine1
   \   000111                ; // Fall through to label ?Subroutine1
   2447          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine44_0
   \   000009                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0
   2448          
   2449          /*********************************************************************
   2450           * @fn          ZDO_NetworkFormationConfirmCB
   2451           *
   2452           * @brief       This function reports the results of the request to
   2453           *              initialize a coordinator in a network.
   2454           *
   2455           * @param       Status - Result of NLME_NetworkFormationRequest()
   2456           *
   2457           * @return      none
   2458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2459          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2460          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2461            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2462          
   2463            if ( Status == ZSUCCESS )
   \   00000A   701B         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2464            {
   2465              // LED on shows Coordinator started
   2466              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2467          
   2468              // LED off forgets HOLD_AUTO_START
   2469              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2470          
   2471          #if defined ( ZBIT )
   2472              SIM_SetColor(0xd0ffd0);
   2473          #endif
   2474          
   2475              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700E         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2476              {
   2477                // Began with HOLD_AUTO_START
   2478                ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000020                ; Setup parameters for call to function ZDApp_ChangeState
   \   000020   7908         MOV     R1,#0x8
   \   000022   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000025   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2479              }
   2480            }
   2481          #if defined(BLINK_LEDS)
   2482            else
   2483            {
   2484              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000027                ; Setup parameters for call to function HalLedSet
   \   000027   7A04         MOV     R2,#0x4
   \   000029   7904         MOV     R1,#0x4
   \   00002B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2485            }
   2486          #endif
   2487          
   2488            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002E                ; Setup parameters for call to function osal_set_event
   \   00002E   7A02         MOV     R2,#0x2
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   2489          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine46_0
   \   00000A                ; // Fall through to label ??Subroutine46_0
   2490          
   2491          /****************************************************************************
   2492           * @fn          ZDApp_beaconIndProcessing
   2493           *
   2494           * @brief       This function processes the incoming beacon indication.
   2495           *
   2496           *              When another task (MT or App) is registered to process
   2497           *              beacon indication themselves, this function will parse the
   2498           *              beacon payload and pass the beacon descriptor to that task
   2499           *              If no other tasks registered, this function will process
   2500           *              the beacon payload and generate the network descriptor link
   2501           *              list.
   2502           *
   2503           * @param
   2504           *
   2505           * @return      none
   2506           *
   2507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2508          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2509          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2510            // Pass the beacon Indication to another task if it registers the callback
   2511            // Otherwise, process the beacon notification here.
   2512            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00000F   6006         JZ      ??ZDO_beaconNotifyIndCB_0
   2513            {
   2514              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ?CALL_IND
   \   000014   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2515            }
   2516            else
   2517            {
   2518              networkDesc_t *pNwkDesc;
   2519              networkDesc_t *pLastNwkDesc;
   2520              uint8 found = false;
   2521          
   2522              // Add the network to the Network Descriptor List
   2523              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV     DPTR,#NwkDescList
   \   00001A   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   2524              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_64:
   \   00001D   90....       MOV     DPTR,#NwkDescList
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V3,A
   \   000027   EA           MOV     A,R2
   \   000028   2404         ADD     A,#0x4
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V1
   \   00002F   F5..         MOV     ?V7,A
   \   000031   EA           MOV     A,R2
   \   000032   2402         ADD     A,#0x2
   \   000034   F5..         MOV     ?V4,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V1
   \   000039   F5..         MOV     ?V5,A
   \   00003B   802B         SJMP    ??CrossCallReturnLabel_69
   2525              while (pNwkDesc)
   2526              {
   2527                if ((pNwkDesc->panId == pBeacon->panID) &&
   2528                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000040   85..82       MOV     DPL,?V4
   \   000043   85..83       MOV     DPH,?V5
   \   000046   E0           MOVX    A,@DPTR
   \   000047   68           XRL     A,R0
   \   000048   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   85..82       MOV     DPL,?V6
   \   00005A   85..83       MOV     DPH,?V7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   68           XRL     A,R0
   \   00005F   6067         JZ      ??ZDO_beaconNotifyIndCB_5
   2529                {
   2530                  found = true;
   2531                  break;
   2532                }
   2533                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV     ?V2,R6
   \   000063   8F..         MOV     ?V3,R7
   2534                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL   ?Subroutine25 & 0xFFFF
   2535              }
   \                     ??CrossCallReturnLabel_69:
   \   000068   EE           MOV     A,R6
   \   000069   4F           ORL     A,R7
   \   00006A   70D1         JNZ     ??ZDO_beaconNotifyIndCB_2
   2536          
   2537              // If no existing descriptor found, make a new one and add to the list
   2538              if (found == false)
   2539              {
   2540                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV     R2,#0x16
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV     ?V8,R2
   \   000075   8B..         MOV     ?V9,R3
   \   000077   AE..         MOV     R6,?V8
   \   000079   AF..         MOV     R7,?V9
   2541                if ( !pNwkDesc )
   \   00007B   EE           MOV     A,R6
   \   00007C   4F           ORL     A,R7
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2542                {
   2543                  // Memory alloc failed, discard this beacon
   2544                  return;
   2545                }
   2546          
   2547                // Clear the network descriptor
   2548                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV     R4,#0x16
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7900         MOV     R1,#0x0
   \   000088   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2549          
   2550                // Initialize the descriptor
   2551                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   74FE         MOV     A,#-0x2
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   04           INC     A
   \   00009B   F0           MOVX    @DPTR,A
   2552                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   2553          
   2554                // Save new entry into the descriptor list
   2555                if ( !NwkDescList )
   \   0000AB   90....       MOV     DPTR,#NwkDescList
   \   0000AE   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000B1   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2556                {
   2557                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV     DPTR,#NwkDescList
   \   0000B6   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2558                }
   2559                else
   2560                {
   2561                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   2414         ADD     A,#0x14
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V3
   \   0000C1   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   EF           MOV     A,R7
   \   0000C7   F0           MOVX    @DPTR,A
   2562                }
   2563              }
   2564          
   2565              // Update the descriptor with the incoming beacon
   2566              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
   2567              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV     A,?V0
   \   0000DE   2408         ADD     A,#0x8
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000EC   F0           MOVX    @DPTR,A
   2568              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV     DPL,?V6
   \   0000F0   85..83       MOV     DPH,?V7
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   F0           MOVX    @DPTR,A
   2569              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV     DPL,?V4
   \   0000FE   85..83       MOV     DPH,?V5
   \   000101   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   2570              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_99:
   \   00010B   E5..         MOV     A,?V0
   \   00010D   240C         ADD     A,#0xc
   \   00010F   F582         MOV     DPL,A
   \   000111   E4           CLR     A
   \   000112   35..         ADDC    A,?V1
   \   000114   F583         MOV     DPH,A
   \   000116   E0           MOVX    A,@DPTR
   \   000117   C0E0         PUSH    A
   \   000119   EE           MOV     A,R6
   \   00011A   2413         ADD     A,#0x13
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   3F           ADDC    A,R7
   \   000120   F583         MOV     DPH,A
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   2571          
   2572              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2573              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV     A,R6
   \   000126   240B         ADD     A,#0xb
   \   000128   FA           MOV     R2,A
   \   000129   E4           CLR     A
   \   00012A   3F           ADDC    A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   8882         MOV     DPL,R0
   \   00012E   8983         MOV     DPH,R1
   \   000130   E0           MOVX    A,@DPTR
   \   000131   6401         XRL     A,#0x1
   \   000133   600E         JZ      ??ZDO_beaconNotifyIndCB_8
   2574              {
   2575                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV     A,?V0
   \   000137   240D         ADD     A,#0xd
   \   000139   FC           MOV     R4,A
   \   00013A   E4           CLR     A
   \   00013B   35..         ADDC    A,?V1
   \   00013D   FD           MOV     R5,A
   \   00013E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP    ??ZDO_beaconNotifyIndCB_9
   2576              }
   2577              else
   2578              {
   2579                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV     R4,#0x8
   \   000145   7D00         MOV     R5,#0x0
   \   000147   79FF         MOV     R1,#-0x1
   \   000149   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2580              }
   2581          
   2582              // check if this device is a better choice to join...
   2583              // ...dont bother checking assocPermit flag is doing a rejoin
   2584              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2585                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV     A,?V0
   \   00014E   240A         ADD     A,#0xa
   \   000150   F8           MOV     R0,A
   \   000151   E4           CLR     A
   \   000152   35..         ADDC    A,?V1
   \   000154   F9           MOV     R1,A
   \   000155   8882         MOV     DPL,R0
   \   000157   8983         MOV     DPH,R1
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F5..         MOV     ?V4,A
   \   00015C   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C3           CLR     C
   \   000161   95..         SUBB    A,?V4
   \   000163   4003         JC      $+5
   \   000165   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000168   85..82       MOV     DPL,?V0
   \   00016B   85..83       MOV     DPH,?V1
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   6401         XRL     A,#0x1
   \   000176   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   000178   90....       MOV     DPTR,#_tmpRejoinState
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   7003         JNZ     $+5
   \   00017E   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2586              {
   2587                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000181   C2F0         CLR     B.0
   2588                uint8 capacity = FALSE;
   2589          
   2590          #if defined ( ZIGBEEPRO )
   2591                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2592                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2593                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2594                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000183   EE           MOV     A,R6
   \   000184   2409         ADD     A,#0x9
   \   000186   FA           MOV     R2,A
   \   000187   E4           CLR     A
   \   000188   3F           ADDC    A,R7
   \   000189   FB           MOV     R3,A
   \   00018A   8A82         MOV     DPL,R2
   \   00018C   8B83         MOV     DPH,R3
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5..         MOV     ?V5,A
   \   000191   EE           MOV     A,R6
   \   000192   240A         ADD     A,#0xa
   \   000194   FC           MOV     R4,A
   \   000195   E4           CLR     A
   \   000196   3F           ADDC    A,R7
   \   000197   FD           MOV     R5,A
   \   000198   E5..         MOV     A,?V0
   \   00019A   240B         ADD     A,#0xb
   \   00019C   F5..         MOV     ?V2,A
   \   00019E   E4           CLR     A
   \   00019F   35..         ADDC    A,?V1
   \   0001A1   F5..         MOV     ?V3,A
   \   0001A3   E5..         MOV     A,?V5
   \   0001A5   C3           CLR     C
   \   0001A6   95..         SUBB    A,?V4
   \   0001A8   500E         JNC     ??ZDO_beaconNotifyIndCB_11
   \   0001AA   85..82       MOV     DPL,?V2
   \   0001AD   85..83       MOV     DPH,?V3
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   C3           CLR     C
   \   0001B2   9414         SUBB    A,#0x14
   \   0001B4   401B         JC      ??ZDO_beaconNotifyIndCB_12
   \   0001B6   801B         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001B8   E5..         MOV     A,?V5
   \   0001BA   65..         XRL     A,?V4
   \   0001BC   7015         JNZ     ??ZDO_beaconNotifyIndCB_13
   \   0001BE   8C82         MOV     DPL,R4
   \   0001C0   8D83         MOV     DPH,R5
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F5..         MOV     ?V4,A
   \   0001C5   85..82       MOV     DPL,?V2
   \   0001C8   85..83       MOV     DPH,?V3
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   C3           CLR     C
   \   0001CD   95..         SUBB    A,?V4
   \   0001CF   5002         JNC     ??ZDO_beaconNotifyIndCB_13
   2595                {
   2596                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D1   D2F0         SETB    B.0
   2597                }
   2598          #else
   2599                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2600                {
   2601                  selected = TRUE;
   2602                }
   2603          #endif
   2604          
   2605                if ( ZSTACK_ROUTER_BUILD )
   2606                {
   2607                  capacity = pBeacon->routerCapacity;
   2608                }
   2609                else if ( ZSTACK_END_DEVICE_BUILD )
   2610                {
   2611                  capacity = pBeacon->deviceCapacity;
   2612                }
   2613          
   2614                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D3   E5..         MOV     A,?V0
   \   0001D5   2407         ADD     A,#0x7
   \   0001D7   F5..         MOV     ?V4,A
   \   0001D9   E4           CLR     A
   \   0001DA   35..         ADDC    A,?V1
   \   0001DC   F5..         MOV     ?V5,A
   \   0001DE   85..82       MOV     DPL,?V4
   \   0001E1   F583         MOV     DPH,A
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   701B         JNZ     ??ZDO_beaconNotifyIndCB_14
   \   0001E6   85..82       MOV     DPL,?V0
   \   0001E9   85..83       MOV     DPH,?V1
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F5..         MOV     ?V6,A
   \   0001EF   A3           INC     DPTR
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   F5..         MOV     ?V7,A
   \   0001F3   90....       MOV     DPTR,#_NIB + 23
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   65..         XRL     A,?V6
   \   0001F9   7004         JNZ     ??ZDO_beaconNotifyIndCB_15
   \   0001FB   A3           INC     DPTR
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   65..         XRL     A,?V7
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001FF   7048         JNZ     ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000201   A2F0         MOV     C,B.0
   \   000203   5030         JNC     ??ZDO_beaconNotifyIndCB_17
   2615                {
   2616                  // this is the new chosen router for joining...
   2617                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000205   85..82       MOV     DPL,?V0
   \   000208   85..83       MOV     DPH,?V1
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   F5..         MOV     ?V6,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F5..         MOV     ?V7,A
   \   000212   8E82         MOV     DPL,R6
   \   000214   8F83         MOV     DPH,R7
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   E5..         MOV     A,?V6
   \   00021F   F0           MOVX    @DPTR,A
   \   000220   A3           INC     DPTR
   \   000221   E5..         MOV     A,?V7
   \   000223   F0           MOVX    @DPTR,A
   2618                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   000224   8882         MOV     DPL,R0
   \   000226   8983         MOV     DPH,R1
   \   000228   E0           MOVX    A,@DPTR
   \   000229   8A82         MOV     DPL,R2
   \   00022B   8B83         MOV     DPH,R3
   \   00022D   12....       LCALL   ?Subroutine17 & 0xFFFF
   2619                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   2620                }
   \                     ??CrossCallReturnLabel_12:
   \   000230   8C82         MOV     DPL,R4
   \   000232   8D83         MOV     DPH,R5
   \   000234   F0           MOVX    @DPTR,A
   2621          
   2622                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000235   85..82       MOV     DPL,?V4
   \   000238   85..83       MOV     DPH,?V5
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   600B         JZ      ??ZDO_beaconNotifyIndCB_16
   2623                  pNwkDesc->deviceCapacity = 1;
   \   00023E   8E82         MOV     DPL,R6
   \   000240   8F83         MOV     DPH,R7
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   7401         MOV     A,#0x1
   \   000248   F0           MOVX    @DPTR,A
   2624          
   2625                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000249   85..82       MOV     DPL,?V0
   \   00024C   85..83       MOV     DPH,?V1
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   E0           MOVX    A,@DPTR
   \   000256   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2626                  pNwkDesc->routerCapacity = 1;
   \   000258   8E82         MOV     DPL,R6
   \   00025A   8F83         MOV     DPH,R7
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   7401         MOV     A,#0x1
   \   000261   F0           MOVX    @DPTR,A
   2627              }
   2628            }
   2629          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000262   7F0A         MOV     R7,#0xa
   \   000264   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
   2630          
   2631          /*********************************************************************
   2632           * @fn          ZDO_StartRouterConfirmCB
   2633           *
   2634           * @brief       This function reports the results of the request to
   2635           *              start functioning as a router in a network.
   2636           *
   2637           * @param       Status - Result of NLME_StartRouterRequest()
   2638           *
   2639           * @return      none
   2640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2641          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2642          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2643            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2644          
   2645            if ( Status == ZSUCCESS )
   \   00000A   701B         JNZ     ??ZDO_StartRouterConfirmCB_0
   2646            {
   2647              // LED on shows Router started
   2648              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2649              // LED off forgets HOLD_AUTO_START
   2650              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2651              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700E         JNZ     ??ZDO_StartRouterConfirmCB_1
   2652              {
   2653                // Began with HOLD_AUTO_START
   2654                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000020                ; Setup parameters for call to function ZDApp_ChangeState
   \   000020   7906         MOV     R1,#0x6
   \   000022   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000025   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2655              }
   2656            }
   2657          #if defined(BLINK_LEDS)
   2658            else
   2659            {
   2660              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000027                ; Setup parameters for call to function HalLedSet
   \   000027   7A04         MOV     R2,#0x4
   \   000029   7904         MOV     R1,#0x4
   \   00002B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2661            }
   2662          #endif
   2663          
   2664            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002E                ; Setup parameters for call to function osal_set_event
   \   00002E   7A20         MOV     R2,#0x20
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   2665          }
   2666          
   2667          /*********************************************************************
   2668           * @fn          ZDO_JoinConfirmCB
   2669           *
   2670           * @brief       This function allows the next higher layer to be notified
   2671           *              of the results of its request to join itself or another
   2672           *              device to a network.
   2673           *
   2674           * @param       Status - Result of NLME_JoinRequest()
   2675           *
   2676           * @return      none
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2679          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2680            (void)PanId;  // remove if this parameter is used.
   2681          
   2682            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2683          
   2684            if ( Status == ZSUCCESS )
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2685            {
   2686              if ( ZSTACK_END_DEVICE_BUILD
   2687                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2688              {
   2689                neighborEntry_t *pItem;
   2690          
   2691                // We don't need the neighbor table entries.
   2692                // Clear the neighbor Table to remove beacon information
   2693                nwkNeighborInitTable();
   \   000016                ; Setup parameters for call to function nwkNeighborInitTable
   \   000016   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2694          
   2695                // Force a neighbor table entry for the parent
   2696                pItem = nwkNeighborFindEmptySlot();
   \   000019                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000019   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   00001C   8A..         MOV     ?V2,R2
   \   00001E   8B..         MOV     ?V3,R3
   \   000020   AE..         MOV     R6,?V2
   \   000022   AF..         MOV     R7,?V3
   2697                if ( pItem != NULL )
   \   000024   EE           MOV     A,R6
   \   000025   4F           ORL     A,R7
   \   000026   6054         JZ      ??ZDO_JoinConfirmCB_1
   2698                {
   2699                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000028                ; Setup parameters for call to function osal_memset
   \   000028   7C17         MOV     R4,#0x17
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2700                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000031   90....       MOV     DPTR,#_NIB + 23
   \   000034   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   2701                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \                     ??CrossCallReturnLabel_61:
   \   00003E                ; Setup parameters for call to function sAddrExtCpy
   \   00003E   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   000040   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000042   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000045   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2702                  pItem->panId = _NIB. nwkPanId;
   \   000048   90....       MOV     DPTR,#_NIB + 33
   \   00004B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00004E   12....       LCALL   ?Subroutine16 & 0xFFFF
   2703                  pItem->linkInfo.rxLqi = DEF_LQI;
   \                     ??CrossCallReturnLabel_62:
   \   000051   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000054   74AA         MOV     A,#-0x56
   \   000056   F0           MOVX    @DPTR,A
   2704                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000057   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   00005A   E4           CLR     A
   \   00005B   93           MOVC    A,@A+DPTR
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   2401         ADD     A,#0x1
   \   000060   F8           MOV     R0,A
   \   000061   5001         JNC     ??ZDO_JoinConfirmCB_2
   \   000063   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000064   7A02         MOV     R2,#0x2
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   ?S_DIV_MOD
   \   00006B   EE           MOV     A,R6
   \   00006C   240D         ADD     A,#0xd
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F583         MOV     DPH,A
   \   000074   E8           MOV     A,R0
   \   000075   F0           MOVX    @DPTR,A
   2705                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   000076   12....       LCALL   ?Subroutine34 & 0xFFFF
   2706                }
   2707              }
   \                     ??CrossCallReturnLabel_45:
   \   000079   7401         MOV     A,#0x1
   \   00007B   F0           MOVX    @DPTR,A
   2708          
   2709              // LED on shows device joined
   2710              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00007C                ; Setup parameters for call to function HalLedSet
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7904         MOV     R1,#0x4
   \   000080   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2711              // LED off forgets HOLD_AUTO_START
   2712              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000083                ; Setup parameters for call to function HalLedSet
   \   000083   7A00         MOV     R2,#0x0
   \   000085   7908         MOV     R1,#0x8
   \   000087   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2713              if ( (devState == DEV_HOLD) )
   \   00008A   90....       MOV     DPTR,#devState
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   700E         JNZ     ??ZDO_JoinConfirmCB_3
   2714              {
   2715                // Began with HOLD_AUTO_START
   2716                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000090                ; Setup parameters for call to function ZDApp_ChangeState
   \   000090   7903         MOV     R1,#0x3
   \   000092   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000095   8007         SJMP    ??ZDO_JoinConfirmCB_3
   2717              }
   2718          
   2719              if ( !ZG_SECURE_ENABLED )
   2720              {
   2721                // Notify to save info into NV
   2722                ZDApp_NVUpdate();
   2723              }
   2724            }
   2725            else
   2726            {
   2727          #if defined(BLINK_LEDS)
   2728              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000097                ; Setup parameters for call to function HalLedSet
   \   000097   7A04         MOV     R2,#0x4
   \   000099   7904         MOV     R1,#0x4
   \   00009B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2729          #endif
   2730            }
   2731          
   2732            // Pass the join confirm to higher layer if callback registered
   2733            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_3:
   \   00009E   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000A1   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000A4   6030         JZ      ??ZDO_JoinConfirmCB_4
   2734            {
   2735              zdoJoinCnf_t joinCnf;
   2736          
   2737              joinCnf.status = Status;
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   E5..         MOV     A,?V0
   \   0000AE   F0           MOVX    @DPTR,A
   2738              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000AF   90....       MOV     DPTR,#_NIB + 20
   \   0000B2   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   2739              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_100:
   \   0000BD   90....       MOV     DPTR,#_NIB + 23
   \   0000C0   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000C3   7403         MOV     A,#0x3
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   2740          
   2741              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_101:
   \   0000CB                ; Setup parameters for indirect call
   \   0000CB   AA..         MOV     R2,?XSP + 0
   \   0000CD   AB..         MOV     R3,?XSP + 1
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   12....       LCALL   ?CALL_IND
   2742            }
   2743          
   2744            // Notify ZDApp
   2745            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   0000D6                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000D6   7C00         MOV     R4,#0x0
   \   0000D8   7D00         MOV     R5,#0x0
   \   0000DA   7B02         MOV     R3,#0x2
   \   0000DC   7A02         MOV     R2,#0x2
   \   0000DE   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2746          
   2747          }
   \   0000E6   7405         MOV     A,#0x5
   \   0000E8   02....       LJMP    ??Subroutine53_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine43_0
   \   000004                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2748          
   2749          /*********************************************************************
   2750           * @fn          ZDO_PermitJoinCB
   2751           *
   2752           * @brief      This function is called when there is a change in the
   2753           *             device's permit join status.
   2754           *
   2755           * @param       duration - the new duration
   2756           *
   2757           * @return      none
   2758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2759          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2760          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2761            // Pass the Permit Join status to higher layer if callback registered
   2762            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000017   6007         JZ      ??ZDO_PermitJoinCB_0
   2763            {
   2764              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   2765            }
   2766          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV     A,#0x1
   \   000022   02....       LJMP    ?Subroutine3 & 0xFFFF
   2767          
   2768          /*********************************************************************
   2769           * @fn          ZDO_AddrChangeIndicationCB
   2770           *
   2771           * @brief       This function notifies the application that this
   2772           *              device's address has changed.  Could happen in
   2773           *              a network with stochastic addressing (PRO).
   2774           *
   2775           * @param       newAddr - the new address
   2776           *
   2777           * @return      none
   2778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2779          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2781            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2782            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   2783          
   2784            // Notify to save info into NV
   2785            ZDApp_NVUpdate();
   2786          
   2787            // Notify the applications
   2788            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_65:
   \   00000F                ; Setup parameters for call to function osal_set_event
   \   00000F   7A10         MOV     R2,#0x10
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#ZDAppTaskID
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001B   8043         SJMP    ??CrossCallReturnLabel_66
   2789          
   2790            while (pItem != NULL)
   2791            {
   2792              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   00001D   EE           MOV     A,R6
   \   00001E   2402         ADD     A,#0x2
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   3F           ADDC    A,R7
   \   000023   F9           MOV     R1,A
   \   000024   88..         MOV     ?V2,R0
   \   000026   89..         MOV     ?V3,R1
   \   000028   8882         MOV     DPL,R0
   \   00002A   F583         MOV     DPH,A
   \   00002C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00002F   6028         JZ      ??ZDO_AddrChangeIndicationCB_1
   2793              {
   2794                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000031                ; Setup parameters for call to function osal_msg_allocate
   \   000031   7A04         MOV     R2,#0x4
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2795                if (pZDOAddrChangeMsg != NULL)
   \   000038   EA           MOV     A,R2
   \   000039   4B           ORL     A,R3
   \   00003A   601D         JZ      ??ZDO_AddrChangeIndicationCB_1
   2796                {
   2797                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   74D6         MOV     A,#-0x2a
   \   000042   F0           MOVX    @DPTR,A
   2798                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E5..         MOV     A,?V0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V1
   \   00004B   12....       LCALL   ?Subroutine17 & 0xFFFF
   2799                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2800                }
   2801              }
   \                     ??CrossCallReturnLabel_13:
   \   00004E   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2802              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   2803            }
   \                     ??CrossCallReturnLabel_66:
   \   000060   EE           MOV     A,R6
   \   000061   4F           ORL     A,R7
   \   000062   70B9         JNZ     ??ZDO_AddrChangeIndicationCB_0
   2804          
   2805            // Send out a device announce
   2806            ZDApp_AnnounceNewAddress();
   \   000064                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000064   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2807          }
   \   000067   02....       LJMP    ?Subroutine1 & 0xFFFF
   2808          
   2809          /*********************************************************************
   2810           * @fn          ZDO_JoinIndicationCB
   2811           *
   2812           * @brief       This function allows the next higher layer of a
   2813           *              coordinator to be notified of a remote join request.
   2814           *
   2815           * @param       ShortAddress - 16-bit address
   2816           * @param       ExtendedAddress - IEEE (64-bit) address
   2817           * @param       CapabilityFlags - Association Capability Flags
   2818           * @param       type - of joining -
   2819           *                          NWK_ASSOC_JOIN
   2820           *                          NWK_ASSOC_REJOIN_UNSECURE
   2821           *                          NWK_ASSOC_REJOIN_SECURE
   2822           *
   2823           * @return      ZStatus_t
   2824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2825          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2826                                          uint8 CapabilityFlags, uint8 type)
   2827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   7410         MOV     A,#0x10
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   2828            (void)ExtendedAddress;
   2829          #if ZDO_NV_SAVE_RFDs
   2830            (void)CapabilityFlags;
   2831          
   2832          #else  // if !ZDO_NV_SAVE_RFDs
   2833            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2834          #endif
   2835            {
   2836              ZDApp_NVUpdate();  // Notify to save info into NV.
   2837            }
   2838          
   2839            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2840            {
   2841              if ( type == NWK_ASSOC_JOIN ||
   2842                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2843                   type == NWK_ASSOC_REJOIN_SECURE )
   \   000010   600D         JZ      ??ZDO_JoinIndicationCB_0
   \   000012   7401         MOV     A,#0x1
   \   000014   68           XRL     A,R0
   \   000015   6008         JZ      ??ZDO_JoinIndicationCB_0
   \   000017   7402         MOV     A,#0x2
   \   000019   68           XRL     A,R0
   \   00001A   6003         JZ      $+5
   \   00001C   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2844              {
   2845                uint16 timeToFire;
   2846                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2847          
   2848                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A06         MOV     R2,#0x6
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000026   8A..         MOV     ?V2,R2
   \   000028   8B..         MOV     ?V3,R3
   \   00002A   AE..         MOV     R6,?V2
   \   00002C   AF..         MOV     R7,?V3
   2849          
   2850                if ( pNewDevice == NULL )
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   7005         JNZ     ??ZDO_JoinIndicationCB_2
   2851                {
   2852                  // Memory alloc failed
   2853                  return ZMemError;
   \   000032   7910         MOV     R1,#0x10
   \   000034   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2854                }
   2855          
   2856                // Add the new device to the New Device List
   2857                if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_2:
   \   000037   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00003A   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00003D   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000040   7006         JNZ     ??ZDO_JoinIndicationCB_4
   2858                {
   2859                  // The list is empty, add the first element
   2860                  ZDApp_NewDeviceList = pNewDevice;
   \   000042   EE           MOV     A,R6
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   EF           MOV     A,R7
   \   000046   801F         SJMP    ??ZDO_JoinIndicationCB_5
   2861                }
   2862                else
   2863                {
   2864                  pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_4:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   8003         SJMP    ??ZDO_JoinIndicationCB_6
   2865          
   2866                  // Walk the list to last element
   2867                  while ( pDeviceList->next )
   2868                  {
   2869                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_7:
   \   00004E   E8           MOV     A,R0
   \   00004F   FA           MOV     R2,A
   \   000050   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000051   FB           MOV     R3,A
   2870                  }
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000059   70F3         JNZ     ??ZDO_JoinIndicationCB_7
   2871          
   2872                  // Add new device at the end
   2873                  pDeviceList->next = pNewDevice;
   \   00005B   EE           MOV     A,R6
   \   00005C   F8           MOV     R0,A
   \   00005D   EF           MOV     A,R7
   \   00005E   F9           MOV     R1,A
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E8           MOV     A,R0
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_5:
   \   000067   F0           MOVX    @DPTR,A
   2874                }
   2875          
   2876                // get the remaining time of the timer
   2877                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000068                ; Setup parameters for call to function osal_get_timeoutEx
   \   000068   7A40         MOV     R2,#0x40
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   90....       MOV     DPTR,#ZDAppTaskID
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000074   8A..         MOV     ?V4,R2
   \   000076   8B..         MOV     ?V5,R3
   2878          
   2879                pNewDevice->next = NULL;
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   E4           CLR     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
   2880                pNewDevice->shortAddr = ShortAddress;
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E5..         MOV     A,?V0
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   E5..         MOV     A,?V1
   \   00008C   F0           MOVX    @DPTR,A
   2881                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   00008D   7458         MOV     A,#0x58
   \   00008F   C3           CLR     C
   \   000090   95..         SUBB    A,?V4
   \   000092   F8           MOV     R0,A
   \   000093   7402         MOV     A,#0x2
   \   000095   95..         SUBB    A,?V5
   \   000097   F9           MOV     R1,A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   12....       LCALL   ?Subroutine16 & 0xFFFF
   2882          
   2883                // Start the timer only if there is no pending timer
   2884                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_63:
   \   00009F   7458         MOV     A,#0x58
   \   0000A1   68           XRL     A,R0
   \   0000A2   7003         JNZ     ??ZDO_JoinIndicationCB_8
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_8:
   \   0000A7   7017         JNZ     ??ZDO_JoinIndicationCB_1
   2885                {
   2886                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000A9                ; Setup parameters for call to function osal_start_timerEx
   \   0000A9   90....       MOV     DPTR,#__Constant_258
   \   0000AC   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AF   7A40         MOV     R2,#0x40
   \   0000B1   7B00         MOV     R3,#0x0
   \   0000B3   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000BB   7404         MOV     A,#0x4
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   2887                }
   2888              }
   2889            }
   2890          
   2891            return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000C0   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000C2   7F08         MOV     R7,#0x8
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
   2892          }
   2893          
   2894          /*********************************************************************
   2895           * @fn          ZDO_ConcentratorIndicationCB
   2896           *
   2897           * @brief       This function allows the next higher layer of a
   2898           *              device to be notified of existence of the concentrator.
   2899           *
   2900           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2901           * @param       extAddr - pointer to extended Address
   2902           *                        NULL if not available
   2903           * @param       pktCost - PktCost from RREQ
   2904           *
   2905           * @return      void
   2906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2907          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2908          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2909            zdoConcentratorInd_t conInd;
   2910          
   2911            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   2912            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_104:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2913            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2914          
   2915            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000024   6007         JZ      ??ZDO_ConcentratorIndicationCB_0
   2916            {
   2917              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ?CALL_IND
   2918            }
   2919          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D                REQUIRE ?Subroutine6
   \   00002D                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine45_0
   \   000002                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine52_0
   \   000006                ; // Fall through to label ??Subroutine52_0
   2920          
   2921          /*********************************************************************
   2922           * @fn          ZDO_LeaveCnf
   2923           *
   2924           * @brief       This function allows the next higher layer to be
   2925           *              notified of the results of its request for this or
   2926           *              a child device to leave the network.
   2927           *
   2928           * @param       cnf - NLME_LeaveCnf_t
   2929           *
   2930           * @return      none
   2931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2932          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2933          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2934            // Check for this device
   2935            if ( osal_ExtAddrEqual( cnf->extAddr,
   2936                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000017   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   701C         JNZ     ??ZDO_LeaveCnf_0
   2937            {
   2938              // Pass the leave confirm to higher layer if callback registered
   2939              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2940                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000025   600E         JZ      ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   8B..         MOV     ?V1,R3
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V1
   \   000033   7006         JNZ     ??ZDO_LeaveCnf_0
   2941              {
   2942                // Prepare to leave with reset
   2943                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000035                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000035   12....       LCALL   ?Subroutine30 & 0xFFFF
   2944              }
   2945            }
   \                     ??CrossCallReturnLabel_36:
   \   000038   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   2946            else if ( ZSTACK_ROUTER_BUILD )
   2947            {
   2948              // Remove device address(optionally descendents) from data
   2949              ZDApp_LeaveUpdate( cnf->dstAddr,
   2950                                 cnf->extAddr,
   2951                                 cnf->removeChildren );
   2952            }
   2953          }
   \                     ??ZDO_LeaveCnf_0:
   \   00003B   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   2954          
   2955          /*********************************************************************
   2956           * @fn          ZDO_LeaveInd
   2957           *
   2958           * @brief       This function allows the next higher layer of a
   2959           *              device to be notified of a remote leave request or
   2960           *              indication.
   2961           *
   2962           * @param       ind - NLME_LeaveInd_t
   2963           *
   2964           * @return      none
   2965           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2966          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2967          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2968            uint8 leave;
   2969          
   2970          
   2971            // Parent is requesting the leave - NWK layer filters out illegal
   2972            // requests
   2973            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   7034         JNZ     ??ZDO_LeaveInd_0
   2974            {
   2975              // Only respond if we are not rejoining the network
   2976              if ( ind->rejoin == FALSE )
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   7022         JNZ     ??ZDO_LeaveInd_1
   2977              {
   2978                // Notify network of leave
   2979                NLME_LeaveRsp_t rsp;
   2980                rsp.rejoin = ind->rejoin;
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
   2981          
   2982                if ( ZSTACK_ROUTER_BUILD )
   2983                {
   2984                  rsp.removeChildren = ind->removeChildren;
   2985                }
   2986                else if ( ZSTACK_END_DEVICE_BUILD )
   2987                {
   2988                  NLME_SetResponseRate(0);
   \   00003A                ; Setup parameters for call to function NLME_SetResponseRate
   \   00003A   FA           MOV     R2,A
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2989                  NLME_SetQueuedPollRate(0);
   \   00003F                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2990                  rsp.removeChildren = 0;
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   2991                }
   2992          
   2993                NLME_LeaveRsp( &rsp );
   \   00004E                ; Setup parameters for call to function NLME_LeaveRsp
   \   00004E   AA..         MOV     R2,?XSP + 0
   \   000050   AB..         MOV     R3,?XSP + 1
   \   000052   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   2994              }
   2995          
   2996              if ( ZSTACK_END_DEVICE_BUILD )
   2997              {
   2998                // Stop polling and get ready to reset
   2999                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   000055                ; Setup parameters for call to function NLME_SetPollRate
   \   000055   90....       MOV     DPTR,#__Constant_0
   \   000058   12....       LCALL   ?XLOAD_R2345
   \   00005B   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   3000              }
   3001          
   3002              // Prepare to leave with reset
   3003              ZDApp_LeaveReset( ind->rejoin );
   \   00005E                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00005E   802A         SJMP    ??ZDO_LeaveInd_2
   3004            }
   3005            else
   3006            {
   3007              leave = FALSE;
   3008          
   3009              // Check if this device needs to leave as a child or descendent
   3010              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000060                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000060   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000063   8A..         MOV     ?V2,R2
   \   000065   8B..         MOV     ?V3,R3
   \   000067   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000071   E5..         MOV     A,?V2
   \   000073   6A           XRL     A,R2
   \   000074   7003         JNZ     ??ZDO_LeaveInd_3
   \   000076   E5..         MOV     A,?V3
   \   000078   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_3:
   \   000079   701C         JNZ     ??ZDO_LeaveInd_4
   3011              {
   3012                if ( ( ind->removeChildren == TRUE               ) ||
   3013                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   3014                       NODETYPE_DEVICE                           )    )
   \   00007B   7401         MOV     A,#0x1
   \   00007D   69           XRL     A,R1
   \   00007E   600A         JZ      ??ZDO_LeaveInd_2
   \   000080   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000083   E0           MOVX    A,@DPTR
   \   000084   5407         ANL     A,#0x7
   \   000086   6402         XRL     A,#0x2
   \   000088   700D         JNZ     ??ZDO_LeaveInd_4
   3015                {
   3016                  leave = TRUE;
   3017                }
   3018              }
   3019              else if ( ind->removeChildren == TRUE )
   3020              {
   3021                // Check NWK address allocation algorithm
   3022                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3023              }
   3024          
   3025              if ( leave == TRUE )
   3026              {
   3027                // Prepare to leave with reset
   3028                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_2:
   \   00008A                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000095   800A         SJMP    ??ZDO_LeaveInd_5
   3029              }
   3030              else
   3031              {
   3032                // Remove device address(optionally descendents) from data
   3033                ZDApp_LeaveUpdate( ind->srcAddr,
   3034                                   ind->extAddr,
   3035                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_4:
   \   000097                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000097   EE           MOV     A,R6
   \   000098   2402         ADD     A,#0x2
   \   00009A   FC           MOV     R4,A
   \   00009B   E4           CLR     A
   \   00009C   3F           ADDC    A,R7
   \   00009D   FD           MOV     R5,A
   \   00009E   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   3036              }
   3037            }
   3038          
   3039            // Pass the leave indication to higher layer if callback registered.
   3040            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_5:
   \   0000A1   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000A4   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000A7   6007         JZ      ??ZDO_LeaveInd_6
   3041            {
   3042              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000A9                ; Setup parameters for indirect call
   \   0000A9   EE           MOV     A,R6
   \   0000AA   FA           MOV     R2,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   FB           MOV     R3,A
   \   0000AD   12....       LCALL   ?CALL_IND
   3043            }
   3044          }
   \                     ??ZDO_LeaveInd_6:
   \   0000B0   02....       LJMP    ?Subroutine2 & 0xFFFF
   3045          
   3046          /*********************************************************************
   3047           * @fn          ZDO_SyncIndicationCB
   3048           *
   3049           * @brief       This function allows the next higher layer of a
   3050           *              coordinator to be notified of a loss of synchronization
   3051           *                          with the parent/child device.
   3052           *
   3053           * @param       type: 0 - child; 1 - parent
   3054           *
   3055           *
   3056           * @return      none
   3057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3058          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3059          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3060            (void)shortAddr;  // Remove this line if this parameter is used.
   3061          
   3062            if ( ZSTACK_END_DEVICE_BUILD
   3063              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3064            {
   3065              if ( type == 1 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7030         JNZ     ??ZDO_SyncIndicationCB_0
   3066              {
   3067                // We lost contact with our parent.  Clear the neighbor Table.
   3068                nwkNeighborInitTable();
   \   00000C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00000C   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3069          
   3070                runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   00000F   75..01       MOV     ?V0,#0x1
   \   000012   75..00       MOV     ?V1,#0x0
   \   000015   75..00       MOV     ?V2,#0x0
   \   000018   75..00       MOV     ?V3,#0x0
   \   00001B   90....       MOV     DPTR,#_NIB + 22
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?L_SHL
   \   000024   90....       MOV     DPTR,#runtimeChannel
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?L_MOV_TO_X
   3071          
   3072                // Start the rejoin process.
   3073                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00002C                ; Setup parameters for call to function ZDApp_SendMsg
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   7B02         MOV     R3,#0x2
   \   000032   7A03         MOV     R2,#0x3
   \   000034   90....       MOV     DPTR,#ZDAppTaskID
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   3074              }
   3075            }
   3076          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00003C   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   3077          
   3078          /*********************************************************************
   3079           * @fn          ZDO_ManytoOneFailureIndicationCB
   3080           *
   3081           * @brief       This function allows the next higher layer of a
   3082           *              concentrator to be notified of a many-to-one route
   3083           *              failure.
   3084           *
   3085           * @param       none
   3086           *
   3087           *
   3088           * @return      none
   3089           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3090          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3091          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3092            // By default, the concentrator automatically redo many-to-one route
   3093            // discovery to update all many-to-one routes in the network
   3094            // If you want anything processing other than the default,
   3095            // please replace the following code.
   3096          
   3097            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3098          }
   \   000007   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3099          
   3100          /*********************************************************************
   3101           * @fn          ZDO_PollConfirmCB
   3102           *
   3103           * @brief       This function allows the next higher layer to be
   3104           *              notified of a Poll Confirm.
   3105           *
   3106           * @param       none
   3107           *
   3108           * @return      none
   3109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3110          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3111          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3112            (void)status;  // Remove this line if this parameter is used.
   3113            return;
   \   000000   02....       LJMP    ?BRET
   3114          }
   3115          
   3116          /*********************************************************************
   3117           * @fn          ZDO_NetworkStatusCB
   3118           *
   3119           * @brief       Network Status Callback function
   3120           *
   3121           * @param       nwkDstAddr - message's destination address- used to determine
   3122           *                           if the message was intended for this device or
   3123           *                           a sleeping end device.
   3124           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3125           * @param       dstAddr - the destination address related to the status code
   3126           *
   3127           * @return      none
   3128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3129          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3130          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3131            (void)dstAddr;     // Remove this line if this parameter is used.
   3132          
   3133            if ( (nwkDstAddr == NLME_GetShortAddr())
   3134                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3135            {
   3136              // Routing error for dstAddr, this is informational and a Route
   3137              // Request should happen automatically.
   3138            }
   3139          }
   \   000007   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3140          
   3141          /******************************************************************************
   3142           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3143           *
   3144           * @brief       Stub routine implemented by NHLE. NHLE should call
   3145           *              <AddrMgrWriteNV> when appropriate.
   3146           *
   3147           * @param       none
   3148           *
   3149           * @return      none
   3150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3151          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3152          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3153          #if defined ( NV_RESTORE )
   3154            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   3155            {
   3156              // Trigger to save info into NV
   3157              ZDApp_NVUpdate();
   3158            }
   3159          #endif
   3160          }
   \   000000   02....       LJMP    ?BRET
   3161          
   3162          /*********************************************************************
   3163           * Call Back Functions from Security  - API
   3164           */
   3165          
   3166           /*********************************************************************
   3167           * @fn          ZDO_UpdateDeviceIndication
   3168           *
   3169           * @brief       This function notifies the "Trust Center" of a
   3170           *              network when a device joins or leaves the network.
   3171           *
   3172           * @param       extAddr - pointer to 64 bit address of new device
   3173           * @param       status  - 0 if a new device joined securely
   3174           *                      - 1 if a new device joined un-securely
   3175           *                      - 2 if a device left the network
   3176           *
   3177           * @return      true if newly joined device should be allowed to
   3178           *                                              remain on network
   3179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3180          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3181          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3182            // can implement a network access policy based on the
   3183            // IEEE address of newly joining devices...
   3184            (void)extAddr;
   3185            (void)status;
   3186          
   3187            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   3188          }
   3189          
   3190          /*********************************************************************
   3191           * @fn          ZDApp_InMsgCB
   3192           *
   3193           * @brief       This function is called to pass up any message that is
   3194           *              not yet supported.  This allows for the developer to
   3195           *              support features themselves..
   3196           *
   3197           * @return      none
   3198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3199          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3200          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3201            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000015   5480         ANL     A,#0x80
   \   000017   703B         JNZ     ??ZDApp_InMsgCB_0
   3202            {
   3203              // Handle the response message
   3204            }
   3205            else
   3206            {
   3207              // Handle the request message by sending a generic "not supported".
   3208              // Device Announce doesn't have a response.
   3209              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000019   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00001C   7036         JNZ     ??ZDApp_InMsgCB_0
   \   00001E   7413         MOV     A,#0x13
   \   000020   68           XRL     A,R0
   \   000021   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000023   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000024   602E         JZ      ??ZDApp_InMsgCB_0
   3210              {
   3211                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3212                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   E8           MOV     A,R0
   \   000027   F5..         MOV     ?V0,A
   \   000029   E9           MOV     A,R1
   \   00002A   4480         ORL     A,#0x80
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   E4           CLR     A
   \   000034   F5..         MOV     ?V0,A
   \   000036   F5..         MOV     ?V1,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   12....       LCALL   ?Subroutine34 & 0xFFFF
   3213              }
   3214            }
   \                     ??CrossCallReturnLabel_46:
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   7C84         MOV     R4,#-0x7c
   \   000044   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000047   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   3215          }
   \                     ??ZDApp_InMsgCB_0:
   \   000054   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   3216          
   3217          
   3218          /*********************************************************************
   3219           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3220           *
   3221           * @brief   Changes the Match Descriptor Response permission.
   3222           *
   3223           * @param   endpoint - endpoint to allow responses
   3224           * @param   action - true to allow responses, false to not
   3225           *
   3226           * @return  none
   3227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3228          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3229          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3230            // Store the action
   3231            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   3232          }
   \   000008   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   3233          
   3234          /*********************************************************************
   3235           * @fn      ZDApp_NetworkInit()
   3236           *
   3237           * @brief   Used to start the network joining process
   3238           *
   3239           * @param   delay - mSec delay to wait before starting
   3240           *
   3241           * @return  none
   3242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3243          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3244          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3245            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3246            {
   3247              // Wait awhile before starting the device
   3248              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3249            }
   3250            else
   3251            {
   3252              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3253            }
   3254          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   3255          
   3256          /*********************************************************************
   3257           * @fn      ZDApp_NwkStateUpdateCB()
   3258           *
   3259           * @brief   This function notifies that this device's network
   3260           *          state info has been changed.
   3261           *
   3262           * @param   none
   3263           *
   3264           * @return  none
   3265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3266          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3267          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3268            // Notify to save info into NV
   3269            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   3270            {
   3271              // Trigger to save info into NV
   3272              ZDApp_NVUpdate();
   3273            }
   3274          }
   \   000010   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3275          
   3276          /*********************************************************************
   3277           * @fn      ZDApp_NodeProfileSync()
   3278           *
   3279           * @brief   Sync node with stack profile.
   3280           *
   3281           * @param   stackProfile - stack profile of the network to join
   3282           *
   3283           * @return  none
   3284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3285          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3286          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3287            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501B         JNC     ??ZDApp_NodeProfileSync_0
   3288            {
   3289              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6014         JZ      ??ZDApp_NodeProfileSync_0
   3290              {
   3291                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   4402         ORL     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   3292                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   740C         MOV     A,#0xc
   \   000025   F0           MOVX    @DPTR,A
   3293                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000026                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3294              }
   3295            }
   3296          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   00002A   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   3297          
   3298          /*********************************************************************
   3299           * @fn      ZDApp_StartJoiningCycle()
   3300           *
   3301           * @brief   Starts the joining cycle of a device.  This will only
   3302           *          continue an already started (or stopped) joining cycle.
   3303           *
   3304           * @param   none
   3305           *
   3306           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3308          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3309          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3310            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3311            {
   3312              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3313              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3314          
   3315              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3316            }
   3317            else
   3318              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3319          }
   3320          
   3321          /*********************************************************************
   3322           * @fn      ZDApp_StopJoiningCycle()
   3323           *
   3324           * @brief   Stops the joining or rejoining process of a device.
   3325           *
   3326           * @param   none
   3327           *
   3328           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3329           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3330          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3331          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3332            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   600A         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   640C         XRL     A,#0xc
   \   000014   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3333            {
   3334              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV     DPTR,#continueJoining
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   3335              return ( TRUE );
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3336            }
   3337            else
   3338              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3339          }
   3340          
   3341          /*********************************************************************
   3342           * @fn      ZDApp_AnnounceNewAddress()
   3343           *
   3344           * @brief   Send Device Announce and hold all transmissions for
   3345           *          new address timeout.
   3346           *
   3347           * @param   none
   3348           *
   3349           * @return  none
   3350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3351          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3352          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3353          #if defined ( ZIGBEEPRO )
   3354            // Turn off data request hold
   3355            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3356          #endif
   3357          
   3358            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3359                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014   8A..         MOV     ?V0,R2
   \   000016   8B..         MOV     ?V1,R3
   \   000018   AE..         MOV     R6,?V0
   \   00001A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001A   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00001D   75..00       MOV     ?V0,#0x0
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   EE           MOV     A,R6
   \   00002B   FC           MOV     R4,A
   \   00002C   AD..         MOV     R5,?V1
   \   00002E   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   3360          
   3361          #if defined ( ZIGBEEPRO )
   3362            // Setup the timeout
   3363            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000036                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000036   7A00         MOV     R2,#0x0
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3364          #endif
   3365          
   3366            if ( ZSTACK_END_DEVICE_BUILD )
   3367            {
   3368              if ( zgChildAgingEnable == TRUE )
   \   00003D   90....       MOV     DPTR,#zgChildAgingEnable
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6401         XRL     A,#0x1
   \   000043   7027         JNZ     ??ZDApp_AnnounceNewAddress_0
   3369              {
   3370                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3371          
   3372                // Send the message to parent
   3373                NLME_GetCoordExtAddr( coordExtAddr );
   \   000045                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000045   AA..         MOV     R2,?XSP + 0
   \   000047   AB..         MOV     R3,?XSP + 1
   \   000049   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   3374                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3375                                           zgEndDeviceTimeoutValue,
   3376                                           zgEndDeviceConfiguration );
   \   00004C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004C   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00004F                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   00004F   90....       MOV     DPTR,#zgEndDeviceConfiguration
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0,A
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV     DPTR,#zgEndDeviceTimeoutValue
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP102_8
   \   000064   12....       LCALL   `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   3377              }
   3378            }
   3379          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   00006C   7408         MOV     A,#0x8
   \   00006E   80..         SJMP    ??Subroutine49_0
   3380          
   3381          /*********************************************************************
   3382           * @fn      ZDApp_SendParentAnnce()
   3383           *
   3384           * @brief   Send Parent Announce message.
   3385           *
   3386           * @param   none
   3387           *
   3388           * @return  none
   3389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3390          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3392            uint8 count;
   3393            uint8 *childInfo;
   3394          
   3395            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   3396          
   3397            if ( childInfo != NULL )
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V1
   \   000018   6054         JZ      ??ZDApp_SendParentAnnce_0
   3398            {
   3399              if ( count > 0 )
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6044         JZ      ??ZDApp_SendParentAnnce_1
   3400              {
   3401                zAddrType_t dstAddr;
   3402          
   3403                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000023   7409         MOV     A,#0x9
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   740F         MOV     A,#0xf
   \   00002A   F0           MOVX    @DPTR,A
   3404                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   74FC         MOV     A,#-0x4
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74FF         MOV     A,#-0x1
   \   000036   F0           MOVX    @DPTR,A
   3405          
   3406                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000037                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000037   75..00       MOV     ?V2,#0x0
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..1F       MOV     ?V2,#0x1f
   \   000042   75..00       MOV     ?V3,#0x0
   \   000045   78..         MOV     R0,#?V2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7405         MOV     A,#0x5
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   7406         MOV     A,#0x6
   \   000058   12....       LCALL   ?XSTACK_DISP102_8
   \   00005B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00005D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00005F   12....       LCALL   `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   3407              }
   3408          
   3409              // Free the list after the message has been sent
   3410              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   AA..         MOV     R2,?V0
   \   000069   AB..         MOV     R3,?V1
   \   00006B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3411            }
   3412          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006E   740A         MOV     A,#0xa
   \   000070   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   3413          
   3414          /*********************************************************************
   3415           * @fn          ZDApp_NVUpdate
   3416           *
   3417           * @brief       Set the NV Update Timer.
   3418           *
   3419           * @param       none
   3420           *
   3421           * @return      none
   3422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3423          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3424          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3425          #if defined ( NV_RESTORE )
   3426            if ( (ZSTACK_END_DEVICE_BUILD)
   3427                 || (ZSTACK_ROUTER_BUILD
   3428                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   3429            {
   3430              // No need to wait, set the event to save the state
   3431              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   3432            }
   3433            else
   3434            {
   3435              // To allow for more changes to the network state before saving
   3436              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3437            }
   3438          #endif
   3439          }
   \   000000   02....       LJMP    ?BRET
   3440          
   3441          /*********************************************************************
   3442           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3443           *
   3444           * @brief   Returns a PAN ID for the network layer to use during
   3445           *          a coordinator start and there is another network with
   3446           *          the intended PANID.
   3447           *
   3448           * @param   panid - the intended PAN ID
   3449           *
   3450           * @return  PANID to try
   3451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3452          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3453          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3454            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3455          }
   3456          
   3457          /*********************************************************************
   3458           * @fn          ZDO_SrcRtgIndCB
   3459           *
   3460           * @brief       This function notifies the ZDO available src route record received.
   3461           *
   3462           * @param       srcAddr - source address of the source route
   3463           * @param       relayCnt - number of devices in the relay list
   3464           * @param       relayList - relay list of the source route
   3465           *
   3466           * @return      none
   3467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3468          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3469          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3470            zdoSrcRtg_t srcRtg;
   3471          
   3472            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   3473            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_105:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3474            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3475          
   3476            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000024   600A         JZ      ??ZDO_SrcRtgIndCB_0
   3477            {
   3478              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   3479            }
   \                     ??CrossCallReturnLabel_54:
   \   00002D   12....       LCALL   ?CALL_IND
   3480          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP    ?Subroutine6 & 0xFFFF
   3481          
   3482          /*********************************************************************
   3483           * @fn          ZDApp_InitZdoCBFunc
   3484           *
   3485           * @brief       Call this function to initialize zdoCBFunc[]
   3486           *
   3487           * @param       none
   3488           *
   3489           * @return      none
   3490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3491          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3492          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3493            uint8 i;
   3494          
   3495            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3496            {
   3497              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine28 & 0xFFFF
   3498            }
   \                     ??CrossCallReturnLabel_31:
   \   00000C   0A           INC     R2
   \   00000D   EA           MOV     A,R2
   \   00000E   C3           CLR     C
   \   00000F   9409         SUBB    A,#0x9
   \   000011   40F3         JC      ??ZDApp_InitZdoCBFunc_0
   3499          }
   \   000013   02....       LJMP    ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3500          
   3501          /*********************************************************************
   3502           * @fn          ZDO_RegisterForZdoCB
   3503           *
   3504           * @brief       Call this function to register the higher layer (for
   3505           *              example, the Application layer or MT layer) with ZDO
   3506           *              callbacks to get notified of some ZDO indication like
   3507           *              existence of a concentrator or receipt of a source
   3508           *              route record.
   3509           *
   3510           * @param       indID - ZDO Indication ID
   3511           * @param       pFn   - Callback function pointer
   3512           *
   3513           * @return      ZSuccess - successful, ZInvalidParameter if not
   3514           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3515          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3516          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3517            // Check the range of the indication ID
   3518            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500C         JNC     ??ZDO_RegisterForZdoCB_0
   3519            {
   3520              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000010   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   3521              return ZSuccess;
   \                     ??CrossCallReturnLabel_102:
   \   000013   7900         MOV     R1,#0x0
   \   000015   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3522            }
   3523          
   3524            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000017   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000019   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3525          }
   3526          
   3527          /*********************************************************************
   3528           * @fn          ZDO_DeregisterForZdoCB
   3529           *
   3530           * @brief       Call this function to de-register the higher layer (for
   3531           *              example, the Application layer or MT layer) with ZDO
   3532           *              callbacks to get notified of some ZDO indication like
   3533           *              existence of a concentrator or receipt of a source
   3534           *              route record.
   3535           *
   3536           * @param       indID - ZDO Indication ID
   3537           *
   3538           * @return      ZSuccess - successful, ZInvalidParameter if not
   3539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3540          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3541          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3542            // Check the range of the indication ID
   3543            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   5008         JNC     ??ZDO_DeregisterForZdoCB_0
   3544            {
   3545              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine28 & 0xFFFF
   3546              return ZSuccess;
   \                     ??CrossCallReturnLabel_32:
   \   000010   F9           MOV     R1,A
   \   000011   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3547            }
   3548          
   3549            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000013   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000015   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3550          }
   3551          
   3552          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3553          #if defined ( REFLECTOR )
   3554          /*********************************************************************
   3555           * @fn          ZDApp_SetPendingBindDefault
   3556           *
   3557           * @brief       This function initializes a specific entry of pending
   3558           *              Bind Request.
   3559           *
   3560           * @param       pendBindReq - pointer to the entry in the table
   3561           *
   3562           * @return      none
   3563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3564          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3565          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3566            // Set it to an initial value
   3567            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3568          
   3569            // We are checking for age 0 for aged-out records
   3570            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3571          }
   \   00001D   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   3572          
   3573          /*********************************************************************
   3574           * @fn          ZDApp_InitPendingBind
   3575           *
   3576           * @brief       This function initializes the buffer that holds
   3577           *              pending Bind Request messages if no valid NWK address
   3578           *              exists in Address Manager and a Network Address Req
   3579           *              has been sent out.
   3580           *
   3581           * @param       none
   3582           *
   3583           * @return      none
   3584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3585          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3586          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3587            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3588            {
   3589              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000017   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3590              {
   3591                uint8 i;
   3592          
   3593                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3594                {
   3595                  // Set to default values
   3596                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3597                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3598              }
   3599            }
   3600          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   3601          
   3602          /*********************************************************************
   3603           * @fn          ZDApp_GetEmptyPendingBindReq
   3604           *
   3605           * @brief       This function looks for an empty entry.
   3606           *
   3607           * @param       none
   3608           *
   3609           * @return      Pointer to entry
   3610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3611          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3612          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3613            uint8 i;
   3614          
   3615            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000007   6027         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3616            {
   3617              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7C00         MOV     R4,#0x0
   3618              {
   3619                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EC           MOV     A,R4
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   A9F0         MOV     R1,B
   \   000013   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000016   E0           MOVX    A,@DPTR
   \   000017   28           ADD     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   39           ADDC    A,R1
   \   00001C   FB           MOV     R3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2420         ADD     A,#0x20
   \   000020   F582         MOV     DPL,A
   \   000022   E4           CLR     A
   \   000023   3B           ADDC    A,R3
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   600B         JZ      ??ZDApp_GetEmptyPendingBindReq_2
   3620                {
   3621                  return ( &ZDAppPendingBindReq[i] );
   3622                }
   3623              }
   \   000029   0C           INC     R4
   \   00002A   EC           MOV     A,R4
   \   00002B   C3           CLR     C
   \   00002C   9403         SUBB    A,#0x3
   \   00002E   40DB         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3624            }
   3625          
   3626            // No empty entry was found
   3627            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000030   7A00         MOV     R2,#0x0
   \   000032   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   000034   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3628          }
   3629          
   3630          /*********************************************************************
   3631           * @fn          ZDApp_ProcessPendingBindReq
   3632           *
   3633           * @brief       Process pending entry based on EXT address.
   3634           *
   3635           * @param       extAddr - of device to look up
   3636           *
   3637           * @return      none
   3638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3639          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   3641            uint8 i;
   3642          
   3643            // Loop through all the pending entries for that Ext Address
   3644            // to create Bind Entries and send Bind Rsp
   3645            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3646            {
   3647              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0,#0x0
   3648              {
   3649                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3650                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019   E5..         MOV     A,?V0
   \   00001B   75F021       MOV     B,#0x21
   \   00001E   A4           MUL     AB
   \   00001F   FE           MOV     R6,A
   \   000020   AFF0         MOV     R7,B
   \   000022                ; Setup parameters for call to function osal_memcmp
   \   000022   85....       MOV     ?V4,?V2
   \   000025   85....       MOV     ?V5,?V3
   \   000028   75..00       MOV     ?V6,#0x0
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000030   7C08         MOV     R4,#0x8
   \   000032   7D00         MOV     R5,#0x0
   \   000034   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000037   240B         ADD     A,#0xb
   \   000039   F5..         MOV     ?V4,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   A9..         MOV     R1,?V4
   \   00003F   FA           MOV     R2,A
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3651                {
   3652                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   748C         MOV     A,#-0x74
   \   00005A   F0           MOVX    @DPTR,A
   3653          
   3654                  // Add Bind entry
   3655                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3656                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3657                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3658                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   00005B   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   2E           ADD     A,R6
   \   000060   F5..         MOV     ?V4,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   3F           ADDC    A,R7
   \   000065   F5..         MOV     ?V5,A
   \   000067                ; Setup parameters for call to function APSME_BindRequest
   \   000067   E5..         MOV     A,?V4
   \   000069   2414         ADD     A,#0x14
   \   00006B   F582         MOV     DPL,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V5
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V1,A
   \   000075   78..         MOV     R0,#?V1
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   E5..         MOV     A,?V4
   \   00007C   240B         ADD     A,#0xb
   \   00007E   FC           MOV     R4,A
   \   00007F   E4           CLR     A
   \   000080   35..         ADDC    A,?V5
   \   000082   FD           MOV     R5,A
   \   000083   85..82       MOV     DPL,?V4
   \   000086   85..83       MOV     DPH,?V5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000094   85..82       MOV     DPL,?V4
   \   000097   85..83       MOV     DPH,?V5
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   E9           MOV     A,R1
   \   0000AD   7008         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3659                  {
   3660                    // valid entry
   3661                    bindStat = ZDP_SUCCESS;
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   E4           CLR     A
   \   0000B6   F0           MOVX    @DPTR,A
   3662          
   3663                    // Notify to save info into NV
   3664                    ZDApp_NVUpdate();
   3665                  }
   3666          
   3667                  // Send back a response message
   3668                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3669                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000B7   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000BA   F5..         MOV     ?V1,A
   \   0000BC   78..         MOV     R0,#?V1
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   7401         MOV     A,#0x1
   \   0000C3   12....       LCALL   ?XSTACK_DISP100_8
   \   0000C6   88..         MOV     ?V4,R0
   \   0000C8   89..         MOV     ?V5,R1
   \   0000CA   78..         MOV     R0,#?V4
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   75..21       MOV     ?V4,#0x21
   \   0000D2   75..80       MOV     ?V5,#-0x80
   \   0000D5   78..         MOV     R0,#?V4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000DD   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000DF   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000E0   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000E3   7405         MOV     A,#0x5
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   3670          
   3671                  // Set the pending request entry to default values
   3672                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000E8                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000E8   12....       LCALL   ?Subroutine35 & 0xFFFF
   3673                }
   3674              }
   \                     ??CrossCallReturnLabel_47:
   \   0000EB   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000EE   05..         INC     ?V0
   \   0000F0   E5..         MOV     A,?V0
   \   0000F2   C3           CLR     C
   \   0000F3   9403         SUBB    A,#0x3
   \   0000F5   5003         JNC     $+5
   \   0000F7   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3675            }
   3676          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000FA   7401         MOV     A,#0x1
   \   0000FC   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003   EA           MOV     A,R2
   \   000004   241E         ADD     A,#0x1e
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   3B           ADDC    A,R3
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
   3677          
   3678          /*********************************************************************
   3679           * @fn          ZDApp_AgeOutPendingBindEntry
   3680           *
   3681           * @brief       Age out pending Bind Req entries.
   3682           *
   3683           * @param       none
   3684           *
   3685           * @return      none
   3686           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3687          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3688          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3689            uint8 i;
   3690            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   3691          
   3692            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3693            {
   3694              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V1,#0x0
   3695              {
   3696                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V1
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   FE           MOV     R6,A
   \   00001F   AFF0         MOV     R7,B
   \   000021   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000024   2420         ADD     A,#0x20
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   39           ADDC    A,R1
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   C3           CLR     C
   \   00002F   9402         SUBB    A,#0x2
   \   000031   4009         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3697                {
   3698                  ZDAppPendingBindReq[i].age--;
   \   000033   E0           MOVX    A,@DPTR
   \   000034   14           DEC     A
   \   000035   F0           MOVX    @DPTR,A
   3699          
   3700                  entryFound = TRUE;
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3701                }
   3702                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   6A           XRL     A,R2
   \   00003F   707F         JNZ     ??ZDApp_AgeOutPendingBindEntry_3
   3703                {
   3704                  // The record has aged out and has valid data
   3705                  AddrMgrEntry_t entry;
   3706                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   748C         MOV     A,#-0x74
   \   000049   F0           MOVX    @DPTR,A
   3707          
   3708                  entry.user = ADDRMGR_USER_BINDING;
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7404         MOV     A,#0x4
   \   000051   F0           MOVX    @DPTR,A
   3709          
   3710                  // Remove the entry in address manager so we do not keep entries
   3711                  // with invalid addresses
   3712                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000052                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000052   E8           MOV     A,R0
   \   000053   240B         ADD     A,#0xb
   \   000055   FC           MOV     R4,A
   \   000056   E4           CLR     A
   \   000057   39           ADDC    A,R1
   \   000058   FD           MOV     R5,A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3713          
   3714                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000065                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?XSTACK_DISP101_8
   \   00006A   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00006D   E9           MOV     A,R1
   \   00006E   6401         XRL     A,#0x1
   \   000070   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3715                  {
   3716                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FE         XRL     A,#0xfe
   \   00007A   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00007F   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3717                    {
   3718                      // Release the entry that contains an invalid NWK address
   3719                      AddrMgrEntryRelease( &entry );
   \   000081                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?XSTACK_DISP101_8
   \   000086   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3720                    }
   3721                  }
   3722          
   3723                  // Send the Bind Response with failure status
   3724                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3725                               &(ZDAppPendingBindReq[i].srcAddr),
   3726                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000089   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00008C   F5..         MOV     ?V2,A
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP100_8
   \   000098   88..         MOV     ?V2,R0
   \   00009A   89..         MOV     ?V3,R1
   \   00009C   78..         MOV     R0,#?V2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   75..21       MOV     ?V2,#0x21
   \   0000A4   75..80       MOV     ?V3,#-0x80
   \   0000A7   78..         MOV     R0,#?V2
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000AF   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000B1   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000B2   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   3727          
   3728                  // Clear the record and set to default values
   3729                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000BA                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000BA   12....       LCALL   ?Subroutine35 & 0xFFFF
   3730                }
   3731              }
   \                     ??CrossCallReturnLabel_48:
   \   0000BD   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000C0   05..         INC     ?V1
   \   0000C2   E5..         MOV     A,?V1
   \   0000C4   C3           CLR     C
   \   0000C5   9403         SUBB    A,#0x3
   \   0000C7   5003         JNC     $+5
   \   0000C9   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3732            }
   3733          
   3734            if ( entryFound == FALSE )
   \   0000CC   E5..         MOV     A,?V0
   \   0000CE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D0   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3735            {
   3736              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000D2                ; Setup parameters for call to function osal_stop_timerEx
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B10         MOV     R3,#0x10
   \   0000D6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000DE   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3737            }
   3738            else
   3739            {
   3740              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3741                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000E0                ; Setup parameters for call to function osal_start_timerEx
   \   0000E0   90....       MOV     DPTR,#__Constant_3e8
   \   0000E3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E6   7A00         MOV     R2,#0x0
   \   0000E8   7B10         MOV     R3,#0x10
   \   0000EA   90....       MOV     DPTR,#ZDAppTaskID
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000F2   7404         MOV     A,#0x4
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   3742            }
   3743          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   0000F7   740E         MOV     A,#0xe
   \   0000F9   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   3744          #endif
   3745          #endif
   3746          
   3747          /*********************************************************************
   3748           * @fn          ZDO_ChangeState
   3749           *
   3750           * @brief       Chance the device state
   3751           *
   3752           * @param       state - new state
   3753           *
   3754           * @return      none
   3755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3756          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3757          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3758            if ( devState != state )
   \   000007   90....       MOV     DPTR,#devState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6E           XRL     A,R6
   \   00000C   600E         JZ      ??ZDApp_ChangeState_0
   3759            {
   3760              devState = state;
   \   00000E   EE           MOV     A,R6
   \   00000F   F0           MOVX    @DPTR,A
   3761              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   7A10         MOV     R2,#0x10
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3762            }
   3763          }
   \                     ??ZDApp_ChangeState_0:
   \   00001C   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   3764          
   3765          /*********************************************************************
   3766           * @fn      ZDApp_SetRejoinScanDuration()
   3767           *
   3768           * @brief   Sets scan duration for rejoin for an end device
   3769           *
   3770           * @param   rejoinScanDuration - milliseconds
   3771           *
   3772           * @return  none
   3773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3774          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3775          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3776            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine7
   \   000010                ; // Fall through to label ?Subroutine7
   3777          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?L_MOV_TO_X
   \   000005   80..         SJMP    ??Subroutine54_0
   3778          
   3779          /*********************************************************************
   3780           * @fn      ZDApp_SetRejoinBackoffDuration()
   3781           *
   3782           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3783           *
   3784           * @param   rejoinBackoffDuration - milliseconds
   3785           *
   3786           * @return  none
   3787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3788          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   3789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3790            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP    ?Subroutine7
   3791          }
   3792          
   3793          /*********************************************************************
   3794           * @fn          ZDApp_SetParentAnnceTimer
   3795           *
   3796           * @brief       This function sets up the link status timer.
   3797           *
   3798           * @param       none
   3799           *
   3800           * @return      none
   3801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3802          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   3803          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3804            // Parent Announce shall be sent no earlier than 10 seconds
   3805            uint32 timeout = 10000;
   3806          
   3807            // Add with jitter of up to 10 seconds
   3808            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   3809          
   3810            // Set timer to send the message
   3811            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   5410         ANL     A,#0x10
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   EB           MOV     A,R3
   \   00000E   5427         ANL     A,#0x27
   \   000010   F5..         MOV     ?V1,A
   \   000012   E4           CLR     A
   \   000013   F5..         MOV     ?V2,A
   \   000015   F5..         MOV     ?V3,A
   \   000017   90....       MOV     DPTR,#__Constant_2710
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?L_ADD_X
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B40         MOV     R3,#0x40
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP    ?Subroutine9 & 0xFFFF
   3812          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinScanDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinScanDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinBackoffDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinBackoffDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetParentAnnceTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetParentAnnceTimer
   3813          
   3814          /*********************************************************************
   3815          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     26   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_pwrmgr_device
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     24   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     41   ZDApp_LeaveUpdate
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      0      0   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     31   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     24   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     29   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> osal_get_timeoutEx
      0     50   ZDApp_ProcessMsgCBs
        0     35   -> ZDApp_ProcessPendingBindReq
        0     35   -> ZDO_ParseAddrRsp
        0     35   -> ZDO_ParseBindUnbindReq
        0     35   -> ZDO_ProcessBindUnbindReq
        0     35   -> ZDO_UpdateAddrManager
        0     35   -> osal_mem_free
      0     29   ZDApp_ProcessNetworkJoin
        0     14   -> NLME_GetShortAddr
        0     14   -> NLME_NwkDiscTerm
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkInit
        0     14   -> ZDApp_ResetNwkKey
        0     14   -> ZDApp_ResetTimerStart
        0     14   -> ZDApp_RestoreNwkKey
        0     14   -> ZMacSetReq
        0     14   -> nwkNeighborInitTable
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     14   -> osal_stop_timerEx
      0     33   ZDApp_ProcessOSALMsg
        0     19   -> NLME_JoinRequest
        0     15   -> NLME_ReJoinRequest
        0     15   -> NLME_ReJoinRequestUnsecure
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_ChangeState
        0     15   -> ZDApp_NetworkInit
        0     15   -> ZDApp_NodeProfileSync
        0     15   -> ZDApp_NwkDescListProcessing
        0     15   -> ZDApp_ProcessMsgCBs
        0     15   -> ZDApp_ProcessNetworkJoin
        0     15   -> ZDApp_ProcessSecMsg
        0     15   -> ZDApp_RestoreNwkKey
        0     15   -> ZDP_IncomingData
        0     15   -> ZMacSetReq
        0     19   -> osal_nv_read
        0     15   -> osal_rand
        0     15   -> sAddrExtCpy
      0     56   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
      2     15   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     49   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     30   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     68   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      0      0   ZDApp_SaveNetworkStateEvt
      0     44   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     37   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     39   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     27   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     16   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     21   ZDOInitDevice
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_SecInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> osal_rand
        0     12   -> zgInitItems
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> ZDApp_ChangeState
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      0     14   ZDO_LeaveInd
        0     14   -> NLME_GetCoordShortAddr
        0     14   -> NLME_LeaveRsp
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     14   -> ZDApp_LeaveReset
        0     14   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0     12   ZDO_SyncIndicationCB
        0     12   -> ZDApp_SendMsg
        0     12   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devState>
       1  ?<Initializer for prevDevState>
       1  ?<Initializer for zdoDiscCounter>
       7  ??Subroutine40_0
       2  ??Subroutine41_0
       6  ??Subroutine42_0
       6  ??Subroutine43_0
       6  ??Subroutine44_0
       5  ??Subroutine45_0
       5  ??Subroutine46_0
       6  ??Subroutine47_0
       4  ??Subroutine48_0
       3  ??Subroutine49_0
       5  ??Subroutine50_0
       6  ??Subroutine51_0
       6  ??Subroutine52_0
       3  ??Subroutine53_0
       5  ??Subroutine54_0
      10  ?Subroutine0
       5  ?Subroutine1
      21  ?Subroutine10
      13  ?Subroutine11
       6  ?Subroutine12
       8  ?Subroutine13
      10  ?Subroutine14
      10  ?Subroutine15
       4  ?Subroutine16
       9  ?Subroutine17
      12  ?Subroutine18
       3  ?Subroutine19
       2  ?Subroutine2
      14  ?Subroutine20
       5  ?Subroutine21
       1  ?Subroutine22
      14  ?Subroutine23
       4  ?Subroutine24
       9  ?Subroutine25
      11  ?Subroutine26
      12  ?Subroutine27
       8  ?Subroutine28
       9  ?Subroutine29
       3  ?Subroutine3
       5  ?Subroutine30
       8  ?Subroutine31
      10  ?Subroutine32
      14  ?Subroutine33
      10  ?Subroutine34
      11  ?Subroutine35
       6  ?Subroutine36
       1  ?Subroutine37
      15  ?Subroutine38
      11  ?Subroutine39
      35  ?Subroutine4
       8  ?Subroutine5
       2  ?Subroutine6
       7  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
       3  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  MatchRsps
      24  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      81  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     252  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
     112  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      31  ZDApp_ChangeState
       6  ZDApp_ChangeState::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      59  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      89  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     129  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      55  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
      87  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      91  ZDApp_Init
       6  ZDApp_Init::?relay
      61  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      22  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      70  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      75  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
     137  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     116  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
       3  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
     113  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      45  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     273  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      19  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     152  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     552  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     684  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     255  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
      72  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      56  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      55  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
     218  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
       3  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      75  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       4  ZDApp_SavedPollRate
     134  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      22  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      91  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
     115  ZDApp_SendParentAnnce
       6  ZDApp_SendParentAnnce::?relay
      51  ZDApp_SetParentAnnceTimer
       6  ZDApp_SetParentAnnceTimer::?relay
      32  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      18  ZDApp_SetRejoinBackoffDuration
       6  ZDApp_SetRejoinBackoffDuration::?relay
      16  ZDApp_SetRejoinScanDuration
       6  ZDApp_SetRejoinScanDuration::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      36  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     264  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     114  ZDOInitDevice
       6  ZDOInitDevice::?relay
     106  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      45  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      24  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     235  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     199  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      62  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     179  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      64  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      51  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      37  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      28  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      51  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      51  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      63  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     615  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 7 744 bytes in segment BANKED_CODE
   462 bytes in segment BANK_RELAYS
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    24 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
 8 220 bytes of CODE  memory
     0 bytes of CONST memory (+ 24 bytes shared)
    80 bytes of XDATA memory

Errors: none
Warnings: none
