///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.20.1.2476 for 8051               08/Aug/2015  11:43:45
// Copyright 2004-2015 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.20
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    Command line       =  
//        -f
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=10000 -DQUEUED_POLL_RATE=1000 -DRESPONSE_POLL_RATE=1000
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -lC
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List\
//        -lA
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List\
//        --diag_suppress Pe001,Pa010 -o
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\Obj\
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List\zcl_sampletemperaturesensor.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_sampletemperaturesensor

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleTemperatureSensor_BasicResetCB::?rel`,0203H
        FUNCTION `??zclSampleTemperatureSensor_EZModeCB::?relay`,0203H
        FUNCTION `??zclSampleTemperatureSensor_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleTemperatureSensor_IdentifyCB::?relay`,0203H
        FUNCTION ??zclSampleTemperatureSensor_IdentifyQueryRspCB,0203H
        PUBLIC `??zclSampleTemperatureSensor_Init::?relay`
        FUNCTION `??zclSampleTemperatureSensor_Init::?relay`,0203H
        PUBLIC ??zclSampleTemperatureSensor_LcdDisplayHelpMode
        FUNCTION ??zclSampleTemperatureSensor_LcdDisplayHelpMode,0203H
        PUBLIC ??zclSampleTemperatureSensor_LcdDisplayMainMode
        FUNCTION ??zclSampleTemperatureSensor_LcdDisplayMainMode,0203H
        PUBLIC `??zclSampleTemperatureSensor_LcdDisplayUpdate::`
        FUNCTION `??zclSampleTemperatureSensor_LcdDisplayUpdate::`,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessIdentifyTim,0203H
        PUBLIC `??zclSampleTemperatureSensor_event_loop::?relay`
        FUNCTION `??zclSampleTemperatureSensor_event_loop::?relay`,0203H
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK _A_TCON
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_bb8
        PUBLIC giTemperatureSensorScreenMode
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sSwEZMode
        PUBLIC sSwHelp
        PUBLIC sSwTempDown
        PUBLIC sSwTempUp
        PUBLIC zclSampleTemperatureSensorSeqNum
        FUNCTION zclSampleTemperatureSensor_BasicResetCB,021603H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_DstAddr
        FUNCTION zclSampleTemperatureSensor_EZModeCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        FUNCTION zclSampleTemperatureSensor_HandleKeys,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclSampleTemperatureSensor_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_Init
        FUNCTION zclSampleTemperatureSensor_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleTemperatureSensor_LcdDisplayHelpMode
        FUNCTION zclSampleTemperatureSensor_LcdDisplayHelpMode,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_LcdDisplayMainMode
        FUNCTION zclSampleTemperatureSensor_LcdDisplayMainMode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC zclSampleTemperatureSensor_LcdDisplayUpdate
        FUNCTION zclSampleTemperatureSensor_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_NwkState
        FUNCTION zclSampleTemperatureSensor_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_TaskID
        PUBLIC zclSampleTemperatureSensor_event_loop
        FUNCTION zclSampleTemperatureSensor_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
MT_SysCommandProcessing SYMBOL "MT_SysCommandProcessing"
`??MT_SysCommandProcessing::?relay` SYMBOL "?relay", MT_SysCommandProcessing
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
_ltoa               SYMBOL "_ltoa"
`??_ltoa::?relay`   SYMBOL "?relay", _ltoa
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zclHA_uint16toa     SYMBOL "zclHA_uint16toa"
`??zclHA_uint16toa::?relay` SYMBOL "?relay", zclHA_uint16toa
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_RegisterEZMode  SYMBOL "zcl_RegisterEZMode"
`??zcl_RegisterEZMode::?relay` SYMBOL "?relay", zcl_RegisterEZMode
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleTemperatureSensor_Init SYMBOL "zclSampleTemperatureSensor_Init"
`??zclSampleTemperatureSensor_Init::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_Init
zclSampleTemperatureSensor_LcdDisplayHelpMode SYMBOL "zclSampleTemperatureSensor_LcdDisplayHelpMode"
??zclSampleTemperatureSensor_LcdDisplayHelpMode SYMBOL "?relay", zclSampleTemperatureSensor_LcdDisplayHelpMode
zclSampleTemperatureSensor_LcdDisplayMainMode SYMBOL "zclSampleTemperatureSensor_LcdDisplayMainMode"
??zclSampleTemperatureSensor_LcdDisplayMainMode SYMBOL "?relay", zclSampleTemperatureSensor_LcdDisplayMainMode
zclSampleTemperatureSensor_LcdDisplayUpdate SYMBOL "zclSampleTemperatureSensor_LcdDisplayUpdate"
`??zclSampleTemperatureSensor_LcdDisplayUpdate::` SYMBOL "?relay", zclSampleTemperatureSensor_LcdDisplayUpdate
zclSampleTemperatureSensor_event_loop SYMBOL "zclSampleTemperatureSensor_event_loop"
`??zclSampleTemperatureSensor_event_loop::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_event_loop

        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??MT_SysCommandProcessing::?relay`
        FUNCTION `??MT_SysCommandProcessing::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??_ltoa::?relay`
        FUNCTION `??_ltoa::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zclHA_uint16toa::?relay`
        FUNCTION `??zclHA_uint16toa::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_RegisterEZMode::?relay`
        FUNCTION `??zcl_RegisterEZMode::?relay`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_SysCommandProcessing
        FUNCTION MT_SysCommandProcessing,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_uint16toa
        FUNCTION zclHA_uint16toa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleTemperatureSensor_Attrs
        EXTERN zclSampleTemperatureSensor_IdentifyTime
        EXTERN zclSampleTemperatureSensor_MaxMeasuredValue
        EXTERN zclSampleTemperatureSensor_MeasuredValue
        EXTERN zclSampleTemperatureSensor_MinMeasuredValue
        EXTERN zclSampleTemperatureSensor_OnOff
        EXTERN zclSampleTemperatureSensor_SimpleDesc
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_RegisterEZMode
        FUNCTION zcl_RegisterEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Sears\Documents\GitHub\Z-Stack-Home-1.2.2.42930\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampletemperaturesensor.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6   Description:    Zigbee Cluster Library - sample device application.
//    7 
//    8 
//    9   Copyright 2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This device will act as a temperature sensor. It updates the current
//   42   temperature on the thermostat when the user sends the desired
//   43   temperature using SW1.
//   44 
//   45   SCREEN MODES
//   46   ----------------------------------------
//   47   Main:
//   48     - SW1: Send current temperature
//   49     - SW2: Invoke EZMode
//   50     - SW3: Adjust temperature
//   51     - SW5: Go to Help screen
//   52 
//   53   Temperature:
//   54     - SW1: Increase temperature
//   55     - SW3: Decrease temperature
//   56     - SW5: Enter temperature
//   57   ----------------------------------------
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "ZComDef.h"
//   64 #include "OSAL.h"
//   65 #include "AF.h"
//   66 #include "ZDApp.h"
//   67 #include "ZDObject.h"
//   68 #include "ZDProfile.h"
//   69 #include "MT_SYS.h"
//   70 
//   71 #include "zcl.h"
//   72 #include "zcl_general.h"
//   73 #include "zcl_ha.h"
//   74 #include "zcl_ezmode.h"
//   75 #include "zcl_ms.h"
//   76 
//   77 #include "zcl_sampletemperaturesensor.h"
//   78 
//   79 #include "onboard.h"

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1
//   80 
//   81 /* HAL */
//   82 #include "hal_lcd.h"
//   83 #include "hal_led.h"
//   84 #include "hal_key.h"
//   85 #include "hal_adc.h"
//   86 
//   87 
//   88 /*********************************************************************
//   89  * MACROS
//   90  */
//   91 
//   92 // how often to report temperature
//   93 #define SAMPLETEMPERATURESENSOR_REPORT_INTERVAL  10000          //10000 milliseconds = 10 seconds
//   94 
//   95 /*********************************************************************
//   96  * CONSTANTS
//   97  */
//   98 
//   99 /*********************************************************************
//  100  * TYPEDEFS
//  101  */
//  102 
//  103 /*********************************************************************
//  104  * GLOBAL VARIABLES
//  105  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  106 byte zclSampleTemperatureSensor_TaskID;
zclSampleTemperatureSensor_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  107 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 uint8 zclSampleTemperatureSensorSeqNum;
zclSampleTemperatureSensorSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  109 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  110 static byte gPermitDuration = 0x00;
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  111 
//  112 /*********************************************************************
//  113  * GLOBAL FUNCTIONS
//  114  */
//  115 
//  116 /*********************************************************************
//  117  * LOCAL VARIABLES
//  118  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  119 afAddrType_t zclSampleTemperatureSensor_DstAddr;
zclSampleTemperatureSensor_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  120 static int reads = 0;
reads:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  121 
//  122 #ifdef ZCL_EZMODE
//  123 static void zclSampleTemperatureSensor_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  124 static void zclSampleTemperatureSensor_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  125 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  126 static const zclEZMode_RegisterData_t zclSampleTemperatureSensor_RegisterEZModeData =
zclSampleTemperatureSensor_RegisterEZModeData:
        DATA16
        DW zclSampleTemperatureSensor_TaskID
        DW 4
        DW 2
        DW zclSampleTemperatureSensorSeqNum
        DW `??zclSampleTemperatureSensor_EZModeCB::?relay`
//  127 {
//  128   &zclSampleTemperatureSensor_TaskID,
//  129   SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT,
//  130   SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT,
//  131   &zclSampleTemperatureSensorSeqNum,
//  132   zclSampleTemperatureSensor_EZModeCB
//  133 };
//  134 
//  135 // NOT ZCL_EZMODE, Use EndDeviceBind
//  136 #else
//  137 
//  138 static cId_t bindingOutClusters[] =
//  139 {
//  140   ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
//  141 };
//  142 #define ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST        1
//  143 #endif
//  144 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  145 devStates_t zclSampleTemperatureSensor_NwkState = DEV_INIT;
zclSampleTemperatureSensor_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_N`
        REQUIRE __INIT_XDATA_I
//  146 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 uint8 giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;   // display main screen mode first
giTemperatureSensorScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  148 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  149 static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
aProcessCmd:
        DATA32
        DS 4
        REQUIRE `?<Initializer for aProcessCmd>`
        REQUIRE __INIT_XDATA_I
//  150 
//  151 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  152 static endPointDesc_t sampleTemperatureSensor_TestEp =
sampleTemperatureSensor_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleTemperatureSensor_Test`
        REQUIRE __INIT_XDATA_I
//  153 {
//  154   20,                                 // Test endpoint
//  155   &zclSampleTemperatureSensor_TaskID,
//  156   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  157   (afNetworkLatencyReq_t)0            // No Network Latency req
//  158 };
//  159 
//  160 
//  161 /*********************************************************************
//  162  * LOCAL FUNCTIONS
//  163  */
//  164 static int16 readTemp(void);
//  165 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys );
//  166 static void zclSampleTemperatureSensor_BasicResetCB( void );
//  167 static void zclSampleTemperatureSensor_IdentifyCB( zclIdentify_t *pCmd );
//  168 static void zclSampleTemperatureSensor_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  169 static void zclSampleTemperatureSensor_ProcessIdentifyTimeChange( void );
//  170 
//  171 // app display functions
//  172 void zclSampleTemperatureSensor_LcdDisplayUpdate(void);
//  173 void zclSampleTemperatureSensor_LcdDisplayMainMode(void);
//  174 void zclSampleTemperatureSensor_LcdDisplayTempMode(void);
//  175 void zclSampleTemperatureSensor_LcdDisplayHelpMode(void);
//  176 
//  177 static void zclSampleTemperatureSensor_SendTemp(void);
//  178 
//  179 // Functions to process ZCL Foundation incoming Command/Response messages
//  180 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  181 #ifdef ZCL_READ
//  182 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  183 #endif
//  184 #ifdef ZCL_WRITE
//  185 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  186 #endif
//  187 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  188 #ifdef ZCL_DISCOVER
//  189 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  190 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  191 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  192 #endif // ZCL_DISCOVER
//  193 
//  194 /*********************************************************************
//  195  * STATUS STRINGS
//  196  */
//  197 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  198 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  199 const char sDeviceName[]   = "  Temp Sensor";
sDeviceName:
        DB "  Temp Sensor"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  200 const char sSwTempUp[]     = "SW1: Raise Temp";
sSwTempUp:
        DB "SW1: Raise Temp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  201 const char sSwEZMode[]     = "SW2: EZ-Mode";
sSwEZMode:
        DB "SW2: EZ-Mode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  202 const char sSwTempDown[]   = "SW3: Lower Temp";
sSwTempDown:
        DB "SW3: Lower Temp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  203 const char sSwHelp[]       = "SW5: Help";
sSwHelp:
        DB "SW5: Help"
//  204 #endif
//  205 
//  206 /*********************************************************************
//  207  * ZCL General Profile Callback table
//  208  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  209 static zclGeneral_AppCallbacks_t zclSampleTemperatureSensor_CmdCallbacks =
zclSampleTemperatureSensor_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_C`
        REQUIRE __INIT_XDATA_I
//  210 {
//  211   zclSampleTemperatureSensor_BasicResetCB,        // Basic Cluster Reset command
//  212   zclSampleTemperatureSensor_IdentifyCB,          // Identify command
//  213 #ifdef ZCL_EZMODE
//  214   NULL,                                           // Identify EZ-Mode Invoke command
//  215   NULL,                                           // Identify Update Commission State command
//  216 #endif
//  217   NULL,                                           // Identify Trigger Effect command
//  218   zclSampleTemperatureSensor_IdentifyQueryRspCB,  // Identify Query Response command
//  219   NULL,             				                      // On/Off cluster command
//  220   NULL,                                           // On/Off cluster enhanced command Off with Effect
//  221   NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
//  222   NULL,                                           // On/Off cluster enhanced command On with Timed Off
//  223 #ifdef ZCL_LEVEL_CTRL
//  224   NULL,                                           // Level Control Move to Level command
//  225   NULL,                                           // Level Control Move command
//  226   NULL,                                           // Level Control Step command
//  227   NULL,                                           // Level Control Stop command
//  228 #endif
//  229 #ifdef ZCL_GROUPS
//  230   NULL,                                           // Group Response commands
//  231 #endif
//  232 #ifdef ZCL_SCENES
//  233   NULL,                                           // Scene Store Request command
//  234   NULL,                                           // Scene Recall Request command
//  235   NULL,                                           // Scene Response command
//  236 #endif
//  237 #ifdef ZCL_ALARMS
//  238   NULL,                                           // Alarm (Response) commands
//  239 #endif
//  240 #ifdef SE_UK_EXT
//  241   NULL,                                           // Get Event Log command
//  242   NULL,                                           // Publish Event Log command
//  243 #endif
//  244   NULL,                                           // RSSI Location command
//  245   NULL                                            // RSSI Location Response command
//  246 };
//  247 
//  248 /*********************************************************************
//  249  * @fn          zclSampleTemperatureSensor_Init
//  250  *
//  251  * @brief       Initialization function for the zclGeneral layer.
//  252  *
//  253  * @param       none
//  254  *
//  255  * @return      none
//  256  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  257 void zclSampleTemperatureSensor_Init( byte task_id )
zclSampleTemperatureSensor_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_Init
        CODE
//  258 {
        FUNCALL zclSampleTemperatureSensor_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_RegisterEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  259   zclSampleTemperatureSensor_TaskID = task_id;
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    @DPTR,A
//  260 
//  261   // Set destination address to indirect
//  262   zclSampleTemperatureSensor_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleTemperatureSensor_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  263   zclSampleTemperatureSensor_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  264   zclSampleTemperatureSensor_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleTemperatureSensor_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  265 
//  266   // This app is part of the Home Automation Profile
//  267   zclHA_Init( &zclSampleTemperatureSensor_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleTemperatureSensor_SimpleDesc & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  268 
//  269   // Register the ZCL General Cluster Library callback functions
//  270   zclGeneral_RegisterCmdCallbacks( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleTemperatureSensor_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  271 
//  272   // Register the application's attribute list
//  273   zcl_registerAttrList( SAMPLETEMPERATURESENSOR_ENDPOINT, SAMPLETEMPERATURESENSOR_MAX_ATTRIBUTES, zclSampleTemperatureSensor_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleTemperatureSensor_Attrs & 0xff
        MOV     R5,#(zclSampleTemperatureSensor_Attrs >> 8) & 0xff
        MOV     R2,#0x11
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  274 
//  275   // Register the Application to receive the unprocessed Foundation command/response messages
//  276   zcl_registerForMsg( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  277 
//  278 #ifdef ZCL_EZMODE
//  279   // Register EZ-Mode
//  280   zcl_RegisterEZMode( &zclSampleTemperatureSensor_RegisterEZModeData );
        ; Setup parameters for call to function zcl_RegisterEZMode
        MOV     R2,#zclSampleTemperatureSensor_RegisterEZModeData & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_RegisterEZModeData >> 8) & 0xff
        LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
//  281 
//  282   // Register with the ZDO to receive Match Descriptor Responses
//  283   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  284 #endif
//  285 
//  286   // Register for all key events - This app will handle all key events
//  287   RegisterForKeys( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  288 
//  289   // Register for a test endpoint
//  290   afRegister( &sampleTemperatureSensor_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleTemperatureSensor_TestEp & 0xff
        MOV     R3,#(sampleTemperatureSensor_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  291 
//  292 #ifdef LCD_SUPPORTED
//  293   // display the device name
//  294   HalLcdWriteString( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sDeviceName & 0xff
        MOV     R3,#(sDeviceName >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  295 #endif
//  296 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock1
//  297 
//  298 /*********************************************************************
//  299  * @fn          zclSample_event_loop
//  300  *
//  301  * @brief       Event Loop Processor for zclGeneral.
//  302  *
//  303  * @param       none
//  304  *
//  305  * @return      none
//  306  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  307 uint16 zclSampleTemperatureSensor_event_loop( uint8 task_id, uint16 events )
zclSampleTemperatureSensor_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
        CODE
//  308 {
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  309   afIncomingMSGPacket_t *MSGpkt;
//  310 
//  311   (void)task_id;  // Intentionally unreferenced parameter
//  312 
//  313   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleTemperatureSensor_event_loop_0
//  314   {
//  315     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleTemperatureSensor_TaskID )) )
//  316     {
//  317       switch ( MSGpkt->hdr.event )
//  318       {
//  319 #ifdef ZCL_EZMODE
//  320         case ZDO_CB_MSG:
//  321           zclSampleTemperatureSensor_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  322           break;
//  323 #endif
//  324 
//  325         case ZCL_INCOMING_MSG:
//  326           // Incoming ZCL Foundation command/response messages
//  327           zclSampleTemperatureSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  328           break;
//  329 
//  330         case KEY_CHANGE:
//  331           zclSampleTemperatureSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  332           break;
//  333 
//  334         case ZDO_STATE_CHANGE:
//  335           zclSampleTemperatureSensor_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  336 
//  337 
//  338           // now on the network
//  339           if ( (zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD) ||
//  340                (zclSampleTemperatureSensor_NwkState == DEV_ROUTER)   ||
//  341                (zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE) )
//  342           {
//  343 #ifndef HOLD_AUTO_START
//  344             giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
//  345             zclSampleTemperatureSensor_LcdDisplayUpdate();
//  346 #endif
//  347 #ifdef ZCL_EZMODE
//  348             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  349 #endif // ZCL_EZMODE
//  350           }
//  351           break;
//  352 
//  353         default:
//  354           break;
//  355       }
//  356 
//  357       // Release the memory
//  358       osal_msg_deallocate( (uint8 *)MSGpkt );
//  359     }
//  360 
//  361     // return unprocessed events
//  362     return (events ^ SYS_EVENT_MSG);
//  363   }
//  364 
//  365   if ( events & SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleTemperatureSensor_event_loop_1 & 0xFFFF
//  366   {
//  367     if ( zclSampleTemperatureSensor_IdentifyTime > 0 )
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleTemperatureSensor_event_loop_2
//  368       zclSampleTemperatureSensor_IdentifyTime--;
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  369     zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
??zclSampleTemperatureSensor_event_loop_2:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
//  370 
//  371     return ( events ^ SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  372   }
??zclSampleTemperatureSensor_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleTemperatureSensor_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleTemperatureSensor_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_event_loop_6
??zclSampleTemperatureSensor_event_loop_5:
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
        LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x2
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
??zclSampleTemperatureSensor_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleTemperatureSensor_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_event_loop_7 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleTemperatureSensor_event_loop_8
        ADD     A,#0x74
        JZ      ??zclSampleTemperatureSensor_event_loop_9
        ADD     A,#-0x11
        JZ      ??zclSampleTemperatureSensor_event_loop_4
        ADD     A,#-0x2
        JNZ     ??zclSampleTemperatureSensor_event_loop_6
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_event_loop_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??zclSampleTemperatureSensor_event_loop_10:
        JNZ     ??zclSampleTemperatureSensor_event_loop_6
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V2,R2
        MOV     ?V3,R3
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R1,#0x5
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
??zclSampleTemperatureSensor_event_loop_11:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleTemperatureSensor_event_loop_6
??zclSampleTemperatureSensor_event_loop_8:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleTemperatureSensor_event_loop_12
        ADD     A,#-0x3
        JNZ     ??zclSampleTemperatureSensor_event_loop_13
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleTemperatureSensor_event_loop_13
        INC     R0
        SJMP    ??CrossCallReturnLabel_6
??zclSampleTemperatureSensor_event_loop_12:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        SJMP    ??zclSampleTemperatureSensor_event_loop_14
??zclSampleTemperatureSensor_event_loop_15:
        INC     R0
??zclSampleTemperatureSensor_event_loop_14:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleTemperatureSensor_event_loop_15
??zclSampleTemperatureSensor_event_loop_13:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_event_loop_6 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        SJMP    ??zclSampleTemperatureSensor_event_loop_11
??zclSampleTemperatureSensor_event_loop_9:
        ; Setup parameters for call to function zclSampleTemperatureSensor_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclSampleTemperatureSensor_HandleKeys::?relay`; Banked call to: zclSampleTemperatureSensor_HandleKeys
        LJMP    ??zclSampleTemperatureSensor_event_loop_6 & 0xFFFF
??zclSampleTemperatureSensor_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??zclSampleTemperatureSensor_event_loop_16 & 0xFFFF
//  373 
//  374 #ifdef ZCL_EZMODE
//  375   // going on to next state
//  376   if ( events & SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT )
??zclSampleTemperatureSensor_event_loop_1:
        ANL     A,#0x4
        JZ      ??zclSampleTemperatureSensor_event_loop_17
//  377   {
//  378     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  379     return ( events ^ SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT );
        MOV     A,R6
        XRL     A,#0x4
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  380   }
//  381 
//  382   // the overall EZMode timer expired, so we timed out
//  383   if ( events & SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT )
??zclSampleTemperatureSensor_event_loop_17:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??zclSampleTemperatureSensor_event_loop_18
//  384   {
//  385     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x63
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  386     return ( events ^ SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  387   }
//  388 #endif // ZLC_EZMODE
//  389 
//  390   if ( events & SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT )
??zclSampleTemperatureSensor_event_loop_18:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zclSampleTemperatureSensor_event_loop_19
//  391   {
//  392     giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
//  393     zclSampleTemperatureSensor_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
        LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
//  394 
//  395     return ( events ^ SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x8
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  396   }
//  397 
//  398   if ( events & SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT )			//THIS IS THE TEMPERATURE READING
??zclSampleTemperatureSensor_event_loop_19:
        MOV     A,R6
        ANL     A,#0x10
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_event_loop_20 & 0xFFFF
//  399   {
//  400     zclSampleTemperatureSensor_MeasuredValue = readTemp() ;
        MOV     DPTR,#0x61bd
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#0x624b
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
        CLR     0x88.5
        MOV     0xb6,#0x3e
??zclSampleTemperatureSensor_event_loop_21:
        MOV     C,0x88.5
        JNC     ??zclSampleTemperatureSensor_event_loop_21
        MOV     R0,0xba+0x0
        MOV     R3,0xbb
        MOV     A,R0
        MOV     ?V0,A
        MOV     A,R3
        MOV     ?V1,A
        MOV     A,#0x4
        MOV     R0,#?V0
        LCALL   ?US_SHR
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     DPTR,#??bCalibrate
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_event_loop_22
        MOV     DPTR,#??voltageAtTemp22
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPTR,#??bCalibrate
        CLR     A
        MOVX    @DPTR,A
??zclSampleTemperatureSensor_event_loop_22:
        MOV     DPTR,#??voltageAtTemp22
        LCALL   ??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     ?V0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     ?V1,A
        MOV     A,#0x2
        MOV     R0,#?V0
        LCALL   ?US_SHR
        MOV     A,?V0
        ADD     A,#0x16
        MOV     R0,A
        CLR     C
        SUBB    A,#0x64
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??zclSampleTemperatureSensor_event_loop_23
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        MOV     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x27
        SJMP    ??zclSampleTemperatureSensor_event_loop_24
??zclSampleTemperatureSensor_event_loop_23:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??zclSampleTemperatureSensor_event_loop_25
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??zclSampleTemperatureSensor_event_loop_24
??zclSampleTemperatureSensor_event_loop_25:
        MOV     A,R0
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x64
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??zclSampleTemperatureSensor_event_loop_24:
        MOVX    @DPTR,A
//  401     ++reads;
        MOV     DPTR,#reads
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  402     
//  403     if ( reads == 1 ){
        MOV     DPTR,#reads
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_event_loop_26
        INC     DPTR
        MOVX    A,@DPTR
??zclSampleTemperatureSensor_event_loop_26:
        JNZ     ??zclSampleTemperatureSensor_event_loop_27
//  404       zclSampleTemperatureSensor_SendTemp();
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_event_loop_28
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,#0x29
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        INC     DPTR
        MOV     A,#zclSampleTemperatureSensor_MeasuredValue & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclSampleTemperatureSensor_MeasuredValue >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     DPTR,#zclSampleTemperatureSensorSeqNum
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV     A,R0
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V2,#0x1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x2
        MOV     R5,#0x4
        MOV     R2,#zclSampleTemperatureSensor_DstAddr & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_DstAddr >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
??zclSampleTemperatureSensor_event_loop_28:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  405       reads = 0;
        MOV     DPTR,#reads
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  406     }
//  407 
//  408     // restart current temperature reading counter
//  409     osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT, SAMPLETEMPERATURESENSOR_REPORT_INTERVAL );
??zclSampleTemperatureSensor_event_loop_27:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2710
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  410 
//  411     return ( events ^ SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x10
??zclSampleTemperatureSensor_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleTemperatureSensor_event_loop_16:
        MOV     R3,A
        SJMP    ??zclSampleTemperatureSensor_event_loop_29
//  412   }
//  413   // Discard unknown events
//  414   return 0;
??zclSampleTemperatureSensor_event_loop_20:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclSampleTemperatureSensor_event_loop_29:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock2
        REQUIRE _A_TCON
        REQUIRE ADCCON3
        REQUIRE ADCL
        REQUIRE ADCH
//  415 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleTemperatureSensor_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI (cfiCond3) CFA_SP SP+0
          CFI (cfiCond4) CFA_SP SP+0
          CFI (cfiPicker5) CFA_SP SP+0
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zclSampleTemperatureSensor_event_loop
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiCond7) CFA_SP SP+0
          CFI (cfiPicker8) CFA_SP SP+0
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//  416 
//  417 /*********************************************************************
//  418  * @fn      zclSampleTemperatureSensor_HandleKeys
//  419  *
//  420  * @brief   Handles all key events for this device.
//  421  *
//  422  * @param   shift - true if in shift/alt.
//  423  * @param   keys - bit field for key events. Valid entries:
//  424  *                 HAL_KEY_SW_5
//  425  *                 HAL_KEY_SW_4
//  426  *                 HAL_KEY_SW_3
//  427  *                 HAL_KEY_SW_2
//  428  *                 HAL_KEY_SW_1
//  429  *
//  430  * @return  none
//  431  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  432 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys )
zclSampleTemperatureSensor_HandleKeys:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_HandleKeys
        CODE
//  433 {
        FUNCALL zclSampleTemperatureSensor_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, zclSampleTemperatureSensor_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, zclSampleTemperatureSensor_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  434   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclSampleTemperatureSensor_HandleKeys_0
//  435   {
//  436     // increase temperature
//  437     giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
//  438 
//  439     if ( zclSampleTemperatureSensor_MeasuredValue < zclSampleTemperatureSensor_MaxMeasuredValue )
        MOV     DPTR,#zclSampleTemperatureSensor_MaxMeasuredValue
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        JNC     ??zclSampleTemperatureSensor_HandleKeys_1
//  440     {
//  441       zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MeasuredValue + 100;  // considering using whole number value
        MOVX    A,@DPTR
        ADD     A,#0x64
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_2
//  442     }
//  443     else if ( zclSampleTemperatureSensor_MeasuredValue >= zclSampleTemperatureSensor_MaxMeasuredValue )
//  444     {
//  445       zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MaxMeasuredValue;
??zclSampleTemperatureSensor_HandleKeys_1:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??zclSampleTemperatureSensor_HandleKeys_2:
        MOVX    @DPTR,A
//  446     }
//  447 
//  448     // Send temperature information
//  449     // zclSampleTemperatureSensor_SendTemp();
//  450   }
//  451 
//  452   if ( keys & HAL_KEY_SW_2 )
??zclSampleTemperatureSensor_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleTemperatureSensor_HandleKeys_3
//  453   {
//  454     if ( ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE ) ||
//  455         ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE ) )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_HandleKeys_4
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_3
//  456     {
//  457       giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
??zclSampleTemperatureSensor_HandleKeys_4:
        CLR     A
        MOVX    @DPTR,A
//  458 
//  459 #ifdef ZCL_EZMODE
//  460       zclEZMode_InvokeData_t ezModeData;
//  461       static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT };   // only bind on the Temperature Measurement cluster
//  462 
//  463       // Invoke EZ-Mode
//  464       ezModeData.endpoint = SAMPLETEMPERATURESENSOR_ENDPOINT; // endpoint on which to invoke EZ-Mode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x8
        MOVX    @DPTR,A
//  465       if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
//  466            ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )   ||
//  467            ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE ) )
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleTemperatureSensor_HandleKeys_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleTemperatureSensor_HandleKeys_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_6
//  468       {
//  469         ezModeData.onNetwork = TRUE;      // node is already on the network
??zclSampleTemperatureSensor_HandleKeys_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_7
//  470       }
//  471       else
//  472       {
//  473         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zclSampleTemperatureSensor_HandleKeys_6:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zclSampleTemperatureSensor_HandleKeys_7:
        MOVX    @DPTR,A
//  474       }
//  475       ezModeData.initiator = TRUE;        // Temperature Sensor is an initiator
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  476       ezModeData.numActiveInClusters = 1;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  477       ezModeData.pActiveInClusterIDs = clusterIDs;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??clusterIDs & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??clusterIDs >> 8) & 0xff
        MOVX    @DPTR,A
//  478       ezModeData.numActiveOutClusters = 0;   // active output cluster
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  479       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  480       zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  481 
//  482 #ifdef LCD_SUPPORTED
//  483       HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "EZMode">` & 0xff
        MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  484 #endif
//  485 
//  486       // NOT ZCL_EZMODE, Use EndDeviceBind
//  487 #else
//  488       {
//  489         zAddrType_t dstAddr;
//  490         dstAddr.addrMode = Addr16Bit;
//  491         dstAddr.addr.shortAddr = 0;   // Coordinator makes the EDB match
//  492 
//  493         // Initiate an End Device Bind Request, this bind request will
//  494         // only use a cluster list that is important to binding.
//  495         HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  496         ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  497                               SAMPLETEMPERATURESENSOR_ENDPOINT,
//  498                               ZCL_HA_PROFILE_ID,
//  499                               0, NULL,
//  500                               ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST, bindingOutClusters,
//  501                               FALSE );
//  502       }
//  503 #endif // ZCL_EZMODE
//  504     }
//  505   }
//  506 
//  507   if ( keys & HAL_KEY_SW_3 )
??zclSampleTemperatureSensor_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclSampleTemperatureSensor_HandleKeys_8
//  508   {
//  509     giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
//  510 
//  511     // decrease the temperature
//  512     if ( zclSampleTemperatureSensor_MeasuredValue > zclSampleTemperatureSensor_MinMeasuredValue )
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        LCALL   ??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     DPH,#(zclSampleTemperatureSensor_MinMeasuredValue >> 8) & 0xff
        MOV     DPL,#zclSampleTemperatureSensor_MinMeasuredValue & 0xff
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??zclSampleTemperatureSensor_HandleKeys_9
//  513     {
//  514       zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MeasuredValue - 100;  // considering using whole number value
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        MOVX    A,@DPTR
        ADD     A,#-0x64
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_10
//  515     }
//  516     else if ( zclSampleTemperatureSensor_MeasuredValue >= zclSampleTemperatureSensor_MinMeasuredValue )
??zclSampleTemperatureSensor_HandleKeys_9:
        MOV     DPTR,#zclSampleTemperatureSensor_MinMeasuredValue
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??zclSampleTemperatureSensor_HandleKeys_8
//  517     {
//  518       zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MinMeasuredValue;
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??zclSampleTemperatureSensor_HandleKeys_10:
        MOVX    @DPTR,A
//  519     }
//  520 
//  521     // Send temperature information
//  522     // zclSampleTemperatureSensor_SendTemp();
//  523   }
//  524 
//  525   if ( keys & HAL_KEY_SW_4 )
??zclSampleTemperatureSensor_HandleKeys_8:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zclSampleTemperatureSensor_HandleKeys_11
//  526   {
//  527     giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
//  528 
//  529     if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
//  530          ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleTemperatureSensor_HandleKeys_12
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_11
//  531     {
//  532       zAddrType_t tmpAddr;
//  533 
//  534       tmpAddr.addrMode = Addr16Bit;
??zclSampleTemperatureSensor_HandleKeys_12:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  535       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  536 
//  537       // toggle permit join
//  538       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_HandleKeys_13
        CLR     A
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_14
??zclSampleTemperatureSensor_HandleKeys_13:
        MOV     A,#-0x1
??zclSampleTemperatureSensor_HandleKeys_14:
        MOVX    @DPTR,A
//  539 
//  540       // Trust Center significance is always true
//  541       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  542     }
//  543   }
//  544 
//  545   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zclSampleTemperatureSensor_HandleKeys_11:
        MOV     A,R6
        JZ      ??zclSampleTemperatureSensor_HandleKeys_15
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleTemperatureSensor_HandleKeys_16
//  546   {
//  547     zclSampleTemperatureSensor_BasicResetCB();
        ; Setup parameters for call to function zclSampleTemperatureSensor_BasicResetCB
        LCALL   `??zclSampleTemperatureSensor_BasicResetCB::?rel`; Banked call to: zclSampleTemperatureSensor_BasicResetCB
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_16
//  548   }
//  549   else if ( keys & HAL_KEY_SW_5 )
??zclSampleTemperatureSensor_HandleKeys_15:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleTemperatureSensor_HandleKeys_16
//  550   {
//  551     if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_17
//  552     {
//  553       giTemperatureSensorScreenMode = TEMPSENSE_HELPMODE;
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_18
//  554     }
//  555     else if ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE )
??zclSampleTemperatureSensor_HandleKeys_17:
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_16
//  556     {
//  557 #ifdef LCD_SUPPORTED
//  558       HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#sClearLine & 0xff
        MOV     R3,#(sClearLine >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  559 #endif
//  560       giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
??zclSampleTemperatureSensor_HandleKeys_18:
        MOVX    @DPTR,A
//  561     }
//  562   }
//  563 
//  564   // update display
//  565   zclSampleTemperatureSensor_LcdDisplayUpdate();
??zclSampleTemperatureSensor_HandleKeys_16:
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
        LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
//  566 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclSampleTemperatureSensor_HandleKeys
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPH,#(zclSampleTemperatureSensor_MeasuredValue >> 8) & 0xff
        MOV     DPL,#zclSampleTemperatureSensor_MeasuredValue & 0xff
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        RET
          CFI (cfiCond10) CFA_SP SP+0
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiPicker12) CFA_SP SP+0
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG XDATA_I:XDATA:NOROOT(0)
??clusterIDs:
        DATA16
        DS 2
        REQUIRE `?<Initializer for clusterIDs>`
        REQUIRE __INIT_XDATA_I
//  567 
//  568 /*********************************************************************
//  569  * @fn      zclSampleTemperatureSensor_LcdDisplayUpdate		//these can be shut off for power saving
//  570  *
//  571  * @brief   Called to update the LCD display.
//  572  *
//  573  * @param   none
//  574  *
//  575  * @return  none
//  576  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  577 void zclSampleTemperatureSensor_LcdDisplayUpdate( void )
zclSampleTemperatureSensor_LcdDisplayUpdate:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_LcdDisplayUpdate
        CODE
//  578 {
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, zclSampleTemperatureSensor_LcdDisplayHelpMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, zclSampleTemperatureSensor_LcdDisplayMainMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  579   // turn on red LED for temperatures >= 24.00C
//  580   if ( zclSampleTemperatureSensor_MeasuredValue >= 2400 )
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x60
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x9
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??zclSampleTemperatureSensor_LcdDisplayUpdate_0
//  581   {
//  582     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayUpdate_1
//  583     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  584   }
//  585   // turn on green LED for temperatures <= 20.00C
//  586   else if ( zclSampleTemperatureSensor_MeasuredValue <= 2000 )
??zclSampleTemperatureSensor_LcdDisplayUpdate_0:
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x2f
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x7
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        MOV     R2,#0x1
        JNC     ??zclSampleTemperatureSensor_LcdDisplayUpdate_1
//  587   {
//  588     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  589     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayUpdate_2
//  590   }
//  591   // turn on both red and green LEDs for temperatures between 20.00C and 24.00C
//  592   else
//  593   {
//  594     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
??zclSampleTemperatureSensor_LcdDisplayUpdate_1:
        ; Setup parameters for call to function HalLedSet
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  595     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??zclSampleTemperatureSensor_LcdDisplayUpdate_2:
        MOV     R1,#0x2
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  596   }
//  597 
//  598   if ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayUpdate_3
//  599   {
//  600     zclSampleTemperatureSensor_LcdDisplayHelpMode();
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayHelpMode
        LCALL   ??zclSampleTemperatureSensor_LcdDisplayHelpMode; Banked call to: zclSampleTemperatureSensor_LcdDisplayHelpMode
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayUpdate_4
//  601   }
//  602   else
//  603   {
//  604     zclSampleTemperatureSensor_LcdDisplayMainMode();
??zclSampleTemperatureSensor_LcdDisplayUpdate_3:
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayMainMode
        LCALL   ??zclSampleTemperatureSensor_LcdDisplayMainMode; Banked call to: zclSampleTemperatureSensor_LcdDisplayMainMode
//  605   }
//  606 }
??zclSampleTemperatureSensor_LcdDisplayUpdate_4:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock13
//  607 
//  608 /*********************************************************************
//  609  * @fn      zclSampleTemperatureSensor_LcdDisplayMainMode
//  610  *
//  611  * @brief   Called to display the main screen on the LCD.
//  612  *
//  613  * @param   none
//  614  *
//  615  * @return  none
//  616  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  617 void zclSampleTemperatureSensor_LcdDisplayMainMode( void )
zclSampleTemperatureSensor_LcdDisplayMainMode:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_LcdDisplayMainMode
        CODE
//  618 {
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  619   char sDisplayTemp[16];
//  620 
//  621   if ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD )
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_1
//  622   {
//  623     zclHA_LcdStatusLine1( 0 );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x0
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_2
//  624   }
//  625   else if ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )
??zclSampleTemperatureSensor_LcdDisplayMainMode_1:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_3
//  626   {
//  627     zclHA_LcdStatusLine1( 1 );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x1
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_2
//  628   }
//  629   else if ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE )
??zclSampleTemperatureSensor_LcdDisplayMainMode_3:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_4
//  630   {
//  631     zclHA_LcdStatusLine1( 2 );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x2
??zclSampleTemperatureSensor_LcdDisplayMainMode_2:
        LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
//  632   }
//  633 
//  634   // display current temperature
//  635   osal_memcpy(sDisplayTemp, "TEMP: ", 6);
??zclSampleTemperatureSensor_LcdDisplayMainMode_4:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "TEMP: ">` & 0xff
        MOV     ?V1,#(`?<Constant "TEMP: ">` >> 8) & 0xff
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  636   _ltoa( ( zclSampleTemperatureSensor_MeasuredValue / 100 ), (void *)(&sDisplayTemp[6]), 10 );   // convert temperature to whole number
        ; Setup parameters for call to function _ltoa
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        LCALL   ??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        MOV     A,#0xa
        MOV     R1,A
        LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  637   osal_memcpy( &sDisplayTemp[8], "C", 2 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "C">` & 0xff
        MOV     ?V1,#(`?<Constant "C">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  638 #ifdef LCD_SUPPORTED
//  639   HalLcdWriteString( (char *)sDisplayTemp, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  640 #endif
//  641 
//  642 #ifdef LCD_SUPPORTED
//  643   if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
//  644        ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleTemperatureSensor_LcdDisplayMainMode_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_6
//  645   {
//  646     // display help key with permit join status
//  647     if ( gPermitDuration )
??zclSampleTemperatureSensor_LcdDisplayMainMode_5:
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        MOV     R1,#0x3
        JZ      ??zclSampleTemperatureSensor_LcdDisplayMainMode_7
//  648     {
//  649       HalLcdWriteString( "SW5: Help      *", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "SW5: Help      *">` & 0xff
        MOV     R3,#(`?<Constant "SW5: Help      *">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_8
//  650     }
//  651     else
//  652     {
//  653       HalLcdWriteString( "SW5: Help       ", HAL_LCD_LINE_3 );
??zclSampleTemperatureSensor_LcdDisplayMainMode_7:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "SW5: Help       ">` & 0xff
        MOV     R3,#(`?<Constant "SW5: Help       ">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_8
//  654     }
//  655   }
//  656   else
//  657   {
//  658     // display help key
//  659     HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
??zclSampleTemperatureSensor_LcdDisplayMainMode_6:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sSwHelp & 0xff
        MOV     R3,#(sSwHelp >> 8) & 0xff
??zclSampleTemperatureSensor_LcdDisplayMainMode_8:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  660   }
//  661 #endif
//  662 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond16) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond16) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond16) CFA_SP SP+-7
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclSampleTemperatureSensor_HandleKeys
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zclSampleTemperatureSensor_LcdDisplayMainMode
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zclSampleTemperatureSensor_IdentifyCB
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond21) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond21) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond21) CFA_SP SP+-7
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclSampleTemperatureSensor_event_loop
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond23) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond23) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond23) CFA_SP SP+-7
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond19) CFA_SP SP+0
          CFI (cfiCond20) CFA_SP SP+0
          CFI (cfiCond21) CFA_SP SP+-5
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond23) CFA_SP SP+-5
          CFI (cfiPicker24) CFA_SP SP+0
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
//  663 
//  664 /*********************************************************************
//  665  * @fn      zclSampleTemperatureSensor_LcdDisplayHelpMode
//  666  *
//  667  * @brief   Called to display the SW options on the LCD.
//  668  *
//  669  * @param   none
//  670  *
//  671  * @return  none
//  672  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  673 void zclSampleTemperatureSensor_LcdDisplayHelpMode( void )
zclSampleTemperatureSensor_LcdDisplayHelpMode:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_LcdDisplayHelpMode
        CODE
//  674 {
        FUNCALL zclSampleTemperatureSensor_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  675 #ifdef LCD_SUPPORTED
//  676   HalLcdWriteString( (char *)sSwTempUp, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#sSwTempUp & 0xff
        MOV     R3,#(sSwTempUp >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  677   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#sSwEZMode & 0xff
        MOV     R3,#(sSwEZMode >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  678   HalLcdWriteString( (char *)sSwTempDown, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sSwTempDown & 0xff
        MOV     R3,#(sSwTempDown >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  679 #endif
//  680 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock25
//  681 
//  682 /*********************************************************************
//  683  * @fn      readTemp
//  684  *
//  685  * @brief   Called to read current temperature via the ADC
//  686  *
//  687  * @param   none
//  688  *
//  689  * @return  none
//  690  */
//  691 int16 readTemp(void)
//  692 {

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  693   static uint16 voltageAtTemp22;
??voltageAtTemp22:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  694   static uint8 bCalibrate=TRUE; // Calibrate the first time the temp sensor is read
??bCalibrate:
        DATA8
        DS 1
        REQUIRE `?<Initializer for bCalibrate>`
        REQUIRE __INIT_XDATA_I
//  695   uint16 value;
//  696   int8 temp;
//  697 
//  698   #if defined (HAL_MCU_CC2530)
//  699   ATEST = 0x01;
//  700   TR0  |= 0x01;
//  701  
//  702   /* Clear ADC interrupt flag */
//  703   ADCIF = 0;
//  704 
//  705   ADCCON3 = (HAL_ADC_REF_125V | 0x30 | HAL_ADC_CHN_TEMP);
//  706 
//  707   /* Wait for the conversion to finish */
//  708   while ( !ADCIF );
//  709 
//  710   /* Get the result */
//  711   value = ADCL;
//  712   value |= ((uint16) ADCH) << 8;
//  713 
//  714   // Use the 12 MSB of adcValue
//  715   value >>= 4;
//  716  
//  717   /*
//  718    * These parameters are typical values and need to be calibrated
//  719    * See the datasheet for the appropriate chip for more details
//  720    * also, the math below may not be very accurate
//  721    */
//  722     /* Assume ADC = 1480 at 25C and ADC = 4/C */
//  723   #define VOLTAGE_AT_TEMP_25        1480
//  724   #define TEMP_COEFFICIENT          4
//  725 
//  726   // Calibrate for 22C the first time the temp sensor is read.
//  727   // This will assume that the demo is started up in temperature of 22C
//  728   if(bCalibrate) {
//  729     voltageAtTemp22=value;
//  730     bCalibrate=FALSE;
//  731   }
//  732  
//  733   temp = 22 + ( (value - voltageAtTemp22) / TEMP_COEFFICIENT );
//  734  
//  735   // Set 0C as minimum temperature, and 100C as max
//  736   if( temp >= 100)
//  737   {
//  738     zclSampleTemperatureSensor_MeasuredValue = 100*100 ;
//  739     return 100*100;
//  740   }
//  741   else if (temp <= 0) {
//  742     zclSampleTemperatureSensor_MeasuredValue = 0 ;
//  743     return 0;
//  744   }
//  745   else {
//  746     zclSampleTemperatureSensor_MeasuredValue = temp*100 ;
//  747     return temp*100;
//  748   }
//  749   // Only CC2530 is supported
//  750   #else
//  751   return 0;
//  752   #endif
//  753 }
//  754 
//  755 /*********************************************************************
//  756  * @fn      zclSampleTemperatureSensor_SendTemp
//  757  *
//  758  * @brief   Called to send current temperature information to the thermostat
//  759  *
//  760  * @param   none
//  761  *
//  762  * @return  none
//  763  */
//  764 static void zclSampleTemperatureSensor_SendTemp( void )
//  765 {
//  766 #ifdef ZCL_REPORT
//  767   zclReportCmd_t *pReportCmd;
//  768 
//  769   pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + sizeof(zclReport_t) );
//  770   if ( pReportCmd != NULL )
//  771   {
//  772     pReportCmd->numAttr = 1;
//  773     pReportCmd->attrList[0].attrID = ATTRID_MS_TEMPERATURE_MEASURED_VALUE;
//  774     pReportCmd->attrList[0].dataType = ZCL_DATATYPE_INT16;
//  775     pReportCmd->attrList[0].attrData = (void *)(&zclSampleTemperatureSensor_MeasuredValue);
//  776 
//  777     zcl_SendReportCmd( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_DstAddr,
//  778                        ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
//  779                        pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleTemperatureSensorSeqNum++ );
//  780   }
//  781 
//  782   osal_mem_free( pReportCmd );
//  783 #endif  // ZCL_REPORT
//  784 }
//  785 
//  786 /*********************************************************************
//  787  * @fn      zclSampleTemperatureSensor_ProcessIdentifyTimeChange
//  788  *
//  789  * @brief   Called to process any change to the IdentifyTime attribute.
//  790  *
//  791  * @param   none
//  792  *
//  793  * @return  none
//  794  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  795 static void zclSampleTemperatureSensor_ProcessIdentifyTimeChange( void )
zclSampleTemperatureSensor_ProcessIdentifyTimeChange:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        CODE
//  796 {
        FUNCALL zclSampleTemperatureSensor_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  797   if ( zclSampleTemperatureSensor_IdentifyTime > 0 )
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zclSampleTemperatureSensor_ProcessIdentifyTim_1
//  798   {
//  799     //osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT, 1000 );
//  800     //HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
//  801   }
//  802   else
//  803   {
//  804     if ( zclSampleTemperatureSensor_OnOff )
        MOV     DPTR,#zclSampleTemperatureSensor_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_ProcessIdentifyTim_2
//  805     {
//  806       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleTemperatureSensor_ProcessIdentifyTim_3
//  807     }
//  808     else
//  809     {
//  810       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
??zclSampleTemperatureSensor_ProcessIdentifyTim_2:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleTemperatureSensor_ProcessIdentifyTim_3:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  811     }
//  812 
//  813     osal_stop_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  814   }
//  815 }
??zclSampleTemperatureSensor_ProcessIdentifyTim_1:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock26
//  816 
//  817 /*********************************************************************
//  818  * @fn      zclSampleTemperatureSensor_BasicResetCB
//  819  *
//  820  * @brief   Callback from the ZCL General Cluster Library
//  821  *          to set all the Basic Cluster attributes to default values.
//  822  *
//  823  * @param   none
//  824  *
//  825  * @return  none
//  826  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  827 static void zclSampleTemperatureSensor_BasicResetCB( void )
zclSampleTemperatureSensor_BasicResetCB:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_BasicResetCB
        CODE
//  828 {
        FUNCALL zclSampleTemperatureSensor_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_BasicResetCB, MT_SysCommandProcessing
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  829   // Put device back to factory default settings
//  830   zgWriteStartupOptions( ZG_STARTUP_SET, 3 );   // bit set both default configuration and default network
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x3
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  831 
//  832   // restart device
//  833   MT_SysCommandProcessing( aProcessCmd );
        ; Setup parameters for call to function MT_SysCommandProcessing
        MOV     R2,#aProcessCmd & 0xff
        MOV     R3,#(aProcessCmd >> 8) & 0xff
        LCALL   `??MT_SysCommandProcessing::?relay`; Banked call to: MT_SysCommandProcessing
//  834 }
          CFI EndBlock cfiBlock27
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock28
//  835 
//  836 /*********************************************************************
//  837  * @fn      zclSampleTemperatureSensor_IdentifyCB
//  838  *
//  839  * @brief   Callback from the ZCL General Cluster Library when
//  840  *          it received an Identity Command for this application.
//  841  *
//  842  * @param   srcAddr - source address and endpoint of the response message
//  843  * @param   identifyTime - the number of seconds to identify yourself
//  844  *
//  845  * @return  none
//  846  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  847 static void zclSampleTemperatureSensor_IdentifyCB( zclIdentify_t *pCmd )
zclSampleTemperatureSensor_IdentifyCB:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_IdentifyCB
        CODE
//  848 {
        FUNCALL zclSampleTemperatureSensor_IdentifyCB, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  849   zclSampleTemperatureSensor_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  850   zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
//  851 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock29
//  852 
//  853 /*********************************************************************
//  854  * @fn      zclSampleTemperatureSensor_IdentifyQueryRspCB
//  855  *
//  856  * @brief   Callback from the ZCL General Cluster Library when
//  857  *          it received an Identity Query Response Command for this application.
//  858  *
//  859  * @param   srcAddr - requestor's address
//  860  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  861  *
//  862  * @return  none
//  863  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  864 static void zclSampleTemperatureSensor_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
zclSampleTemperatureSensor_IdentifyQueryRspCB:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_IdentifyQueryRspCB
        CODE
//  865 {
        FUNCALL zclSampleTemperatureSensor_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  866   (void)pRsp;
//  867 #ifdef ZCL_EZMODE
//  868   {
//  869     zclEZMode_ActionData_t data;
//  870     data.pIdentifyQueryRsp = pRsp;
        LCALL   ?Subroutine2 & 0xFFFF
//  871     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
//  872   }
??CrossCallReturnLabel_0:
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  873 #endif
//  874 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zclSampleTemperatureSensor_IdentifyQueryRspCB
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond32) CFA_SP SP+-7
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_EZModeAction
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond32) CFA_SP SP+-5
          CFI (cfiPicker33) CFA_SP SP+0
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
//  875 
//  876 /******************************************************************************
//  877  *
//  878  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  879  *
//  880  *****************************************************************************/
//  881 
//  882 /*********************************************************************
//  883  * @fn      zclSampleTemperatureSensor_ProcessIncomingMsg
//  884  *
//  885  * @brief   Process ZCL Foundation incoming message
//  886  *
//  887  * @param   pInMsg - pointer to the received message
//  888  *
//  889  * @return  none
//  890  */
//  891 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
//  892 {
//  893   switch ( pInMsg->zclHdr.commandID )
//  894   {
//  895 #ifdef ZCL_READ
//  896     case ZCL_CMD_READ_RSP:
//  897       zclSampleTemperatureSensor_ProcessInReadRspCmd( pInMsg );
//  898       break;
//  899 #endif
//  900 #ifdef ZCL_WRITE
//  901     case ZCL_CMD_WRITE_RSP:
//  902       zclSampleTemperatureSensor_ProcessInWriteRspCmd( pInMsg );
//  903       break;
//  904 #endif
//  905 #ifdef ZCL_REPORT
//  906     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  907     case ZCL_CMD_CONFIG_REPORT:
//  908       //zclSampleTemperatureSensor_ProcessInConfigReportCmd( pInMsg );
//  909       break;
//  910 
//  911     case ZCL_CMD_CONFIG_REPORT_RSP:
//  912       //zclSampleTemperatureSensor_ProcessInConfigReportRspCmd( pInMsg );
//  913       break;
//  914 
//  915     case ZCL_CMD_READ_REPORT_CFG:
//  916       //zclSampleTemperatureSensor_ProcessInReadReportCfgCmd( pInMsg );
//  917       break;
//  918 
//  919     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  920       //zclSampleTemperatureSensor_ProcessInReadReportCfgRspCmd( pInMsg );
//  921       break;
//  922 
//  923     case ZCL_CMD_REPORT:
//  924       //zclSampleTemperatureSensor_ProcessInReportCmd( pInMsg );
//  925       break;
//  926 #endif
//  927     case ZCL_CMD_DEFAULT_RSP:
//  928       zclSampleTemperatureSensor_ProcessInDefaultRspCmd( pInMsg );
//  929       break;
//  930 #ifdef ZCL_DISCOVER
//  931     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  932       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
//  933       break;
//  934 
//  935     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  936       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
//  937       break;
//  938 
//  939     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  940       zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( pInMsg );
//  941       break;
//  942 
//  943     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  944       zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( pInMsg );
//  945       break;
//  946 #endif
//  947     default:
//  948       break;
//  949   }
//  950 
//  951   if ( pInMsg->attrCmd )
//  952   {
//  953     osal_mem_free( pInMsg->attrCmd );
//  954   }
//  955 }
//  956 
//  957 #ifdef ZCL_READ
//  958 /*********************************************************************
//  959  * @fn      zclSampleTemperatureSensor_ProcessInReadRspCmd
//  960  *
//  961  * @brief   Process the "Profile" Read Response Command
//  962  *
//  963  * @param   pInMsg - incoming message to process
//  964  *
//  965  * @return  none
//  966  */
//  967 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  968 {
//  969   zclReadRspCmd_t *readRspCmd;
//  970   uint8 i;
//  971 
//  972   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  973   for ( i = 0; i < readRspCmd->numAttr; i++ )
//  974   {
//  975     // Notify the originator of the results of the original read attributes
//  976     // attempt and, for each successfull request, the value of the requested
//  977     // attribute
//  978   }
//  979 
//  980   return ( TRUE );
//  981 }
//  982 #endif // ZCL_READ
//  983 
//  984 #ifdef ZCL_WRITE
//  985 /*********************************************************************
//  986  * @fn      zclSampleTemperatureSensor_ProcessInWriteRspCmd
//  987  *
//  988  * @brief   Process the "Profile" Write Response Command
//  989  *
//  990  * @param   pInMsg - incoming message to process
//  991  *
//  992  * @return  none
//  993  */
//  994 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  995 {
//  996   zclWriteRspCmd_t *writeRspCmd;
//  997   uint8 i;
//  998 
//  999   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1000   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1001   {
// 1002     // Notify the device of the results of the its original write attributes
// 1003     // command.
// 1004   }
// 1005 
// 1006   return ( TRUE );
// 1007 }
// 1008 #endif // ZCL_WRITE
// 1009 
// 1010 /*********************************************************************
// 1011  * @fn      zclSampleTemperatureSensor_ProcessInDefaultRspCmd
// 1012  *
// 1013  * @brief   Process the "Profile" Default Response Command
// 1014  *
// 1015  * @param   pInMsg - incoming message to process
// 1016  *
// 1017  * @return  none
// 1018  */
// 1019 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1020 {
// 1021   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1022 
// 1023   // Device is notified of the Default Response command.
// 1024   (void)pInMsg;
// 1025 
// 1026   return ( TRUE );
// 1027 }
// 1028 
// 1029 #ifdef ZCL_DISCOVER
// 1030 /*********************************************************************
// 1031  * @fn      zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
// 1032  *
// 1033  * @brief   Process the Discover Commands Response Command
// 1034  *
// 1035  * @param   pInMsg - incoming message to process
// 1036  *
// 1037  * @return  none
// 1038  */
// 1039 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1040 {
// 1041   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1042   uint8 i;
// 1043 
// 1044   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1045   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1046   {
// 1047     // Device is notified of the result of its attribute discovery command.
// 1048   }
// 1049 
// 1050   return ( TRUE );
// 1051 }
// 1052 
// 1053 /*********************************************************************
// 1054  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
// 1055  *
// 1056  * @brief   Process the "Profile" Discover Attributes Response Command
// 1057  *
// 1058  * @param   pInMsg - incoming message to process
// 1059  *
// 1060  * @return  none
// 1061  */
// 1062 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1063 {
// 1064   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1065   uint8 i;
// 1066 
// 1067   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1068   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1069   {
// 1070     // Device is notified of the result of its attribute discovery command.
// 1071   }
// 1072 
// 1073   return ( TRUE );
// 1074 }
// 1075 
// 1076 /*********************************************************************
// 1077  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
// 1078  *
// 1079  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1080  *
// 1081  * @param   pInMsg - incoming message to process
// 1082  *
// 1083  * @return  none
// 1084  */
// 1085 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1086 {
// 1087   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1088   uint8 i;
// 1089 
// 1090   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1091   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1092   {
// 1093     // Device is notified of the result of its attribute discovery command.
// 1094   }
// 1095 
// 1096   return ( TRUE );
// 1097 }
// 1098 #endif // ZCL_DISCOVER
// 1099 
// 1100 #ifdef ZCL_EZMODE
// 1101 
// 1102 /*********************************************************************
// 1103  * @fn      zclSampleTemperatureSensor_ProcessZDOMsgs
// 1104  *
// 1105  * @brief   Called when this node receives a ZDO/ZDP response.
// 1106  *
// 1107  * @param   none
// 1108  *
// 1109  * @return  status
// 1110  */
// 1111 static void zclSampleTemperatureSensor_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1112 {
// 1113   zclEZMode_ActionData_t data;
// 1114   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1115 
// 1116   // Let EZ-Mode know of the Match Descriptor Response
// 1117   if ( pMsg->clusterID == Match_Desc_rsp )
// 1118   {
// 1119     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1120     data.pMatchDescRsp = pMatchDescRsp;
// 1121     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1122     osal_mem_free( pMatchDescRsp );
// 1123   }
// 1124 }
// 1125 
// 1126 /*********************************************************************
// 1127  * @fn      zclSampleTemperatureSensor_EZModeCB
// 1128  *
// 1129  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1130 *           going on during EZ-Mode steering/finding/binding.
// 1131  *
// 1132  * @param   state - an
// 1133  *
// 1134  * @return  none
// 1135  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1136 static void zclSampleTemperatureSensor_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
zclSampleTemperatureSensor_EZModeCB:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_EZModeCB
        CODE
// 1137 {
        FUNCALL zclSampleTemperatureSensor_EZModeCB, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, zclHA_uint16toa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1138 #ifdef LCD_SUPPORTED
// 1139   char szLine[20];
// 1140   char *pStr;
// 1141   uint8 err;
// 1142 #endif
// 1143 
// 1144   // time to go into identify mode
// 1145   if ( state == EZMODE_STATE_IDENTIFYING )
        MOV     A,#0x4
        XRL     A,?V2
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_0
// 1146   {
// 1147     zclSampleTemperatureSensor_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        MOV     A,#-0x4c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1148     zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1149   }
// 1150 
// 1151   // autoclosing, show what happened (success, cancelled, etc...)
// 1152   if( state == EZMODE_STATE_AUTOCLOSE )
??zclSampleTemperatureSensor_EZModeCB_0:
        MOV     A,#0x7
        XRL     A,?V2
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_2
// 1153   {
// 1154 #ifdef LCD_SUPPORTED
// 1155     pStr = NULL;
// 1156     err = pData->sAutoClose.err;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
// 1157     if ( err == EZMODE_ERR_SUCCESS )
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_3
// 1158     {
// 1159       pStr = "EZMode: Success";
        MOV     R2,#`?<Constant "EZMode: Success">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_4
// 1160     }
// 1161     else if ( err == EZMODE_ERR_NOMATCH )
??zclSampleTemperatureSensor_EZModeCB_3:
        MOV     A,#0x4
        XRL     A,R0
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1162     {
// 1163       pStr = "EZMode: NoMatch"; // not a match made in heaven
        MOV     R2,#`?<Constant "EZMode: NoMatch">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
// 1164     }
// 1165     if ( pStr )
??zclSampleTemperatureSensor_EZModeCB_4:
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1166     {
// 1167       if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1168       {
// 1169         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1170       }
// 1171     }
// 1172 #endif
// 1173   }
// 1174 
// 1175   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1176   if( state == EZMODE_STATE_FINISH )
??zclSampleTemperatureSensor_EZModeCB_2:
        MOV     A,#0x63
        XRL     A,?V2
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1177   {
// 1178     // turn off identify mode
// 1179     zclSampleTemperatureSensor_IdentifyTime = 0;
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1180     zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
// 1181 
// 1182 #ifdef LCD_SUPPORTED
// 1183     // if successful, inform user which nwkaddr/ep we bound to
// 1184     pStr = NULL;
// 1185     err = pData->sFinish.err;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
// 1186     if( err == EZMODE_ERR_SUCCESS )
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_5 & 0xFFFF
// 1187     {
// 1188       // "EZDst:1234 EP:34"
// 1189       osal_memcpy( szLine, "EZDst:", 6 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,#`?<Constant "EZDst:">` & 0xff
        MOV     ?V5,#(`?<Constant "EZDst:">` >> 8) & 0xff
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1190       zclHA_uint16toa( pData->sFinish.nwkaddr, &szLine[6] );
        ; Setup parameters for call to function zclHA_uint16toa
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
// 1191       osal_memcpy( &szLine[10], " EP:", 4 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,#`?<Constant " EP:">` & 0xff
        MOV     ?V5,#(`?<Constant " EP:">` >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1192       _ltoa( pData->sFinish.ep, (void *)(&szLine[14]), 16 );  // _ltoa NULL terminates
        ; Setup parameters for call to function _ltoa
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x10
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1193       pStr = szLine;
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R2,?V0
        MOV     R3,?V1
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
// 1194     }
// 1195     else if ( err == EZMODE_ERR_BAD_PARAMETER )
??zclSampleTemperatureSensor_EZModeCB_5:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_7
// 1196     {
// 1197       pStr = "EZMode: BadParm";
        MOV     R2,#`?<Constant "EZMode: BadParm">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
// 1198     }
// 1199     else if ( err == EZMODE_ERR_CANCELLED )
??zclSampleTemperatureSensor_EZModeCB_7:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_8
// 1200     {
// 1201       pStr = "EZMode: Cancel";
        MOV     R2,#`?<Constant "EZMode: Cancel">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
// 1202     }
// 1203     else
// 1204     {
// 1205       pStr = "EZMode: TimeOut";
??zclSampleTemperatureSensor_EZModeCB_8:
        MOV     R2,#`?<Constant "EZMode: TimeOut">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
// 1206     }
// 1207     if ( pStr )
??zclSampleTemperatureSensor_EZModeCB_6:
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleTemperatureSensor_EZModeCB_9
// 1208     {
// 1209       if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_9
// 1210       {
// 1211         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1212       }
// 1213     }
// 1214 #endif  // LCD_SUPPORTED
// 1215 
// 1216     // show main UI screen 3 seconds after joining network
// 1217     osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT, 3000 );
??zclSampleTemperatureSensor_EZModeCB_9:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1218 
// 1219     // report current temperature reading 15 seconds after joinging the network
// 1220     osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT, SAMPLETEMPERATURESENSOR_REPORT_INTERVAL );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2710
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1221   }
// 1222 }
??zclSampleTemperatureSensor_EZModeCB_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock34

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_N`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for aProcessCmd>`:
        DATA8
        DB 1
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleTemperatureSensor_Test`:
        DATA8
        DB 20
        DATA16
        DW zclSampleTemperatureSensor_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_C`:
        DATA16
        DW `??zclSampleTemperatureSensor_BasicResetCB::?rel`
        DW `??zclSampleTemperatureSensor_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW ??zclSampleTemperatureSensor_IdentifyQueryRspCB
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for clusterIDs>`:
        DATA16
        DW 1026

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bCalibrate>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_LcdDisplayUpdate::`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_LcdDisplayMainMode:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_LcdDisplayMainMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_LcdDisplayHelpMode:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_LcdDisplayHelpMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessIdentifyTim:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_BasicResetCB::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_IdentifyQueryRspCB:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_EZModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_EZModeCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode">`:
        DB "EZMode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TEMP: ">`:
        DB "TEMP: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "C">`:
        DB "C"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SW5: Help      *">`:
        DB "SW5: Help      *"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SW5: Help       ">`:
        DB "SW5: Help       "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Success">`:
        DB "EZMode: Success"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: NoMatch">`:
        DB "EZMode: NoMatch"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZDst:">`:
        DB "EZDst:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " EP:">`:
        DB " EP:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: BadParm">`:
        DB "EZMode: BadParm"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Cancel">`:
        DB "EZMode: Cancel"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: TimeOut">`:
        DB "EZMode: TimeOut"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        END
// 1223 #endif // ZCL_EZMODE
// 1224 
// 1225 /****************************************************************************
// 1226 ****************************************************************************/
// 1227 
// 1228 
// 
// 2 029 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//    38 bytes in segment XDATA_I
//    38 bytes in segment XDATA_ID
//   230 bytes in segment XDATA_ROM_C
//    20 bytes in segment XDATA_Z
// 
// 2 133 bytes of CODE  memory
//   222 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 4 bytes shared)
//    58 bytes of XDATA memory
//
//Errors: none
//Warnings: none
